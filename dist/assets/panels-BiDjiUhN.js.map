{"version":3,"file":"panels-BiDjiUhN.js","sources":["../../src/utils/formatters.js","../../src/components/panels/DashboardPanel.vue","../../src/utils/productMappings.js","../../src/components/panels/TimeseriesPanel.vue","../../src/components/panels/SimulationPanel.vue","../../src/components/panels/MLPanel.vue"],"sourcesContent":["/**\n * Unified formatting system for FAO agricultural data\n * All FAO data is in \"1000 t\" (thousand tonnes) base unit\n */\n\n/**\n * Format agricultural production/trade values with consistent units\n * @param {number} value - Raw value from FAO dataset (in 1000 tonnes)\n * @param {object} options - Formatting options\n * @param {string} options.unit - Override unit (default: \"1000 t\")\n * @param {number} options.precision - Decimal places (default: 1 for large values, 0 for small)\n * @param {boolean} options.showUnit - Whether to show unit (default: true)\n * @param {boolean} options.longForm - Use long form units (default: false)\n * @returns {string} Formatted value with unit\n */\nexport function formatAgricultureValue(value, options = {}) {\n  const {\n    unit = \"1000 t\",\n    precision = null,\n    showUnit = true,\n    longForm = false\n  } = options;\n\n  if (value === null || value === undefined || isNaN(value)) {\n    return showUnit ? `0 ${unit}` : '0';\n  }\n\n  const absValue = Math.abs(value);\n  let formattedNumber;\n  let displayUnit = unit;\n  \n  // Special handling for calorie data\n  if (unit === \"kcal/capita/day\") {\n    formattedNumber = value.toFixed(precision ?? 0);\n    displayUnit = longForm ? \"kcal/Person/Tag\" : \"kcal\";\n  }\n  // FAO data is in \"1000 t\", so we need to consider the actual scale\n  else if (unit === \"1000 t\") {\n    if (absValue >= 1000000) {\n      // >= 1 billion tonnes actual weight\n      formattedNumber = (value / 1000000).toFixed(precision ?? 1);\n      displayUnit = longForm ? \"Mrd. t\" : \"Mrd t\";\n    } else if (absValue >= 1000) {\n      // >= 1 million tonnes actual weight  \n      formattedNumber = (value / 1000).toFixed(precision ?? 1);\n      displayUnit = longForm ? \"Mio. t\" : \"Mio t\";\n    } else if (absValue >= 100) {\n      // >= 100,000 tonnes actual weight\n      formattedNumber = value.toFixed(precision ?? 0);\n      displayUnit = longForm ? \"Tsd. t\" : \"Tsd t\";\n    } else {\n      // < 100,000 tonnes actual weight\n      formattedNumber = value.toFixed(precision ?? 1);\n      displayUnit = longForm ? \"Tsd. t\" : \"Tsd t\";\n    }\n  } else {\n    // Other units - use standard metric scaling\n    if (absValue >= 1000000000) {\n      formattedNumber = (value / 1000000000).toFixed(precision ?? 1);\n      displayUnit = longForm ? `Mrd. ${unit}` : `Mrd ${unit}`;\n    } else if (absValue >= 1000000) {\n      formattedNumber = (value / 1000000).toFixed(precision ?? 1);\n      displayUnit = longForm ? `Mio. ${unit}` : `Mio ${unit}`;\n    } else if (absValue >= 1000) {\n      formattedNumber = (value / 1000).toFixed(precision ?? 1);\n      displayUnit = longForm ? `Tsd. ${unit}` : `Tsd ${unit}`;\n    } else {\n      formattedNumber = value.toFixed(precision ?? (absValue < 10 ? 1 : 0));\n      displayUnit = unit;\n    }\n  }\n\n  return showUnit ? `${formattedNumber} ${displayUnit}` : formattedNumber;\n}\n\n/**\n * Format values for axis labels (shorter format)\n * @param {number} value - Raw value\n * @param {string} unit - Unit type (default: \"1000 t\")\n * @returns {string} Short formatted value\n */\nexport function formatAxisValue(value, unit = \"1000 t\") {\n  return formatAgricultureValue(value, { \n    unit, \n    showUnit: false, \n    precision: 0 \n  });\n}\n\n/**\n * Format values for tooltips (detailed format)  \n * @param {number} value - Raw value\n * @param {string} unit - Unit type (default: \"1000 t\")\n * @returns {string} Detailed formatted value\n */\nexport function formatTooltipValue(value, unit = \"1000 t\") {\n  return formatAgricultureValue(value, { \n    unit, \n    showUnit: true, \n    longForm: true,\n    precision: 1 \n  });\n}\n\n/**\n * Get appropriate unit label for axis\n * @param {string} baseUnit - Base unit from data (default: \"1000 t\") \n * @returns {string} Appropriate axis unit label\n */\nexport function getAxisUnitLabel(baseUnit = \"1000 t\") {\n  if (baseUnit === \"1000 t\") {\n    return \"Produktion (Mio. t)\";\n  }\n  return `Werte (${baseUnit})`;\n}\n\n/**\n * Format percentage values\n * @param {number} value - Percentage value (0-100 or 0-1)\n * @param {boolean} isDecimal - Whether input is decimal (0-1) or percentage (0-100)\n * @returns {string} Formatted percentage\n */\nexport function formatPercentage(value, isDecimal = false) {\n  if (value === null || value === undefined || isNaN(value)) {\n    return '0%';\n  }\n  \n  const percentage = isDecimal ? value * 100 : value;\n  return `${percentage.toFixed(1)}%`;\n}\n\n/**\n * Format large numbers with German locale\n * @param {number} value - Number to format\n * @param {number} precision - Decimal places\n * @returns {string} Locale formatted number\n */\nexport function formatNumber(value, precision = 0) {\n  if (value === null || value === undefined || isNaN(value)) {\n    return '0';\n  }\n  \n  return new Intl.NumberFormat('de-DE', {\n    minimumFractionDigits: precision,\n    maximumFractionDigits: precision\n  }).format(value);\n}\n\n/**\n * Create D3 format function for consistent axis formatting\n * @param {string} unit - Base unit\n * @returns {function} D3-compatible format function\n */\nexport function createD3AxisFormatter(unit = \"1000 t\") {\n  return (value) => formatAxisValue(value, unit);\n}\n\n/**\n * Create D3 format function for consistent tooltip formatting  \n * @param {string} unit - Base unit\n * @returns {function} D3-compatible format function\n */\nexport function createD3TooltipFormatter(unit = \"1000 t\") {\n  return (value) => formatTooltipValue(value, unit);\n}","<script setup lang=\"ts\">\nimport { ref, computed, watch, onMounted, onUnmounted } from 'vue'\nimport { useDataStore } from '@/stores/useDataStore'\nimport { useUIStore } from '@/stores/useUIStore'\nimport WorldMap from '@/components/visualizations/WorldMap.vue'\nimport TimeseriesChart from '@/components/visualizations/TimeseriesChart.vue'\nimport ProductSelector from '@/components/ui/ProductSelector.vue'\nimport { formatAgricultureValue } from '@/utils/formatters'\n\nconst dataStore = useDataStore()\nconst uiStore = useUIStore()\n\nconst selectedVisualization = ref('world-map')\nconst dashboardLoading = ref(false)\nconst containerWidth = ref(400)\n\nconst visualizationOptions = [\n  { value: 'world-map', label: 'Weltkarte', icon: 'globe' },\n  { value: 'timeseries', label: 'Zeitreihen', icon: 'chart' },\n  { value: 'overview', label: 'Übersicht', icon: 'grid' }\n]\n\n// Helper to get countries array from different data structures\nconst getCountriesArray = () => {\n  const currentProduct = uiStore.selectedProduct\n  const currentYear = uiStore.selectedYear\n  const currentMetric = uiStore.selectedMetric\n  const hasTimeseries = !!dataStore.timeseriesData\n  \n  // Use timeseries data for individual products when available\n  if (hasTimeseries && dataStore.timeseriesData[currentProduct]) {\n    const metricKey = currentMetric === 'production' ? 'production' :\n                      currentMetric === 'import_quantity' ? 'imports' :\n                      currentMetric === 'export_quantity' ? 'exports' :\n                      currentMetric === 'feed' ? 'feed' :\n                      currentMetric === 'food_supply_kcal' ? 'food_supply_kcal' :\n                      currentMetric === 'domestic_supply_quantity' ? 'domestic_supply' :\n                      'domestic_supply'\n    \n    const productTimeseries = dataStore.timeseriesData[currentProduct]\n    return Object.entries(productTimeseries).map(([country, countryData]) => {\n      const yearData = countryData.find(d => d.year === currentYear)\n      const value = yearData ? (yearData[metricKey] || 0) : 0\n      let unit = yearData?.unit || '1000 t'\n      \n      // Override unit for specific metrics\n      if (currentMetric === 'food_supply_kcal') {\n        unit = 'kcal/capita/day'\n      }\n      \n      return {\n        country,\n        value: value,\n        unit: unit,\n        year: currentYear\n      }\n    }).filter(item => item.value > 0)\n  }\n  \n  // Fallback to production data for grouped products\n  const rawData = dataStore.getProductionData(currentProduct, currentYear)\n  if (!rawData) return []\n  \n  if (Array.isArray(rawData)) {\n    return rawData\n  } else if (rawData.data && Array.isArray(rawData.data)) {\n    return rawData.data\n  } else if (typeof rawData === 'object') {\n    return Object.entries(rawData).map(([country, data]) => ({\n      country,\n      value: data.value || 0,\n      unit: data.unit || 't',\n      year: data.year || currentYear\n    }))\n  }\n  return []\n}\n\nconst selectedCountryData = computed(() => {\n  if (!uiStore.selectedCountry || !uiStore.selectedProduct || !uiStore.selectedYear) {\n    return null\n  }\n  \n  const countries = getCountriesArray()\n  return countries.find(item => item.country === uiStore.selectedCountry)\n})\n\n// Country ranking\nconst countryRank = computed(() => {\n  if (!uiStore.selectedCountry) return 'N/A'\n  \n  const countries = getCountriesArray()\n  const sorted = countries\n    .filter(item => item.value > 0)\n    .sort((a, b) => b.value - a.value)\n  \n  const index = sorted.findIndex(item => item.country === uiStore.selectedCountry)\n  return index >= 0 ? index + 1 : 'N/A'\n})\n\n// Top countries computed property with proper filtering\nconst topCountries = computed(() => {\n  const countries = getCountriesArray()\n  \n  // Filter out non-country entities (continents, regions, aggregates)\n  const NON_COUNTRY_ENTITIES = [\n    // Global/Continental\n    \"World\", \"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\",\n    \n    // Regional subdivisions\n    \"Northern America\", \"South America\", \"Central America\", \"Caribbean\",\n    \"Northern Africa\", \"Eastern Africa\", \"Middle Africa\", \"Southern Africa\", \"Western Africa\", \n    \"Eastern Asia\", \"South-eastern Asia\", \"Southern Asia\", \"Western Asia\", \"Central Asia\",\n    \"Eastern Europe\", \"Northern Europe\", \"Southern Europe\", \"Western Europe\",\n    \"Australia and New Zealand\", \"Melanesia\",\n    \n    // Economic/Political unions\n    \"European Union (27)\",\n    \n    // Development status groups\n    \"Small Island Developing States\", \"Least Developed Countries\", \n    \"Land Locked Developing Countries\", \"Low Income Food Deficit Countries\",\n    \"Net Food Importing Developing Countries\"\n  ]\n  \n  return countries\n    .filter(item => \n      item.value > 0 &&\n      item.country && \n      !NON_COUNTRY_ENTITIES.includes(item.country) &&\n      !item.country.toLowerCase().includes('total')\n    )\n    .sort((a, b) => b.value - a.value)\n    .slice(0, 10)\n})\n\n// Feed usage calculation - dynamically detects if product has feed data\nconst feedUsage = computed(() => {\n  const currentProduct = uiStore.selectedProduct\n  const currentYear = uiStore.selectedYear\n  \n  if (!currentProduct || !currentYear) {\n    return { percentage: 0, amount: 0, unit: '1000 t' }\n  }\n  \n  // Get timeseries data for feed metric\n  if (dataStore.timeseriesData && dataStore.timeseriesData[currentProduct]) {\n    const productData = dataStore.timeseriesData[currentProduct]\n    let totalProduction = 0\n    let totalFeed = 0\n    let hasFeedData = false\n    \n    Object.values(productData).forEach(countryData => {\n      const yearData = countryData.find(d => d.year === currentYear)\n      if (yearData) {\n        totalProduction += yearData.production || 0\n        const feedValue = yearData.feed || 0\n        totalFeed += feedValue\n        \n        // Check if this product actually has feed data\n        if (feedValue > 0) {\n          hasFeedData = true\n        }\n      }\n    })\n    \n    // Only calculate percentage if we actually found feed data for this product\n    if (hasFeedData && totalProduction > 0) {\n      const percentage = Math.round((totalFeed / totalProduction) * 100)\n      return {\n        percentage,\n        amount: totalFeed,\n        unit: '1000 t'\n      }\n    }\n  }\n  \n  return { percentage: 0, amount: 0, unit: '1000 t' }\n})\n\nconst globalStats = computed(() => {\n  // Force reactivity on these dependencies\n  const currentProduct = uiStore.selectedProduct\n  const currentYear = uiStore.selectedYear  \n  const currentMetric = uiStore.selectedMetric\n  const hasTimeseries = !!dataStore.timeseriesData\n  if (!currentProduct || !currentYear) {\n    return { total: 0, countries: 0, topProducer: null, unit: '1000 t' }\n  }\n  \n  let rawData = null\n  let dataArray = []\n  \n  // Use timeseries data for all metrics when available for individual products\n  if (hasTimeseries && dataStore.timeseriesData[currentProduct]) {\n    // Use timeseries data for individual products\n    const metricKey = currentMetric === 'production' ? 'production' :\n                      currentMetric === 'import_quantity' ? 'imports' :\n                      currentMetric === 'export_quantity' ? 'exports' :\n                      currentMetric === 'feed' ? 'feed' :\n                      currentMetric === 'food_supply_kcal' ? 'food_supply_kcal' :\n                      currentMetric === 'domestic_supply_quantity' ? 'domestic_supply' :\n                      'domestic_supply'\n    \n    console.log(`📊 DashboardPanel: Looking for timeseries data - Product: \"${currentProduct}\", Metric: \"${metricKey}\"`)\n    \n    const productTimeseries = dataStore.timeseriesData[currentProduct]\n    console.log(`📊 DashboardPanel: Processing ${metricKey} data for ${currentProduct}:`, {\n      countries: Object.keys(productTimeseries).length,\n      year: currentYear\n    })\n    \n    dataArray = Object.entries(productTimeseries).map(([country, countryData]) => {\n      const yearData = countryData.find(d => d.year === currentYear)\n      const value = yearData ? (yearData[metricKey] || 0) : 0\n      let unit = yearData?.unit || '1000 t'\n      \n      // Override unit for specific metrics\n      if (currentMetric === 'food_supply_kcal') {\n        unit = 'kcal/capita/day'\n      }\n      \n      return {\n        country,\n        value: value,\n        unit: unit,\n        year: currentYear\n      }\n    }).filter(item => item.value > 0)\n    \n    console.log(`📊 DashboardPanel: Found ${dataArray.length} countries with ${metricKey} > 0`)\n  } else if (currentMetric === 'production') {\n    // Fallback to production data for grouped products\n    console.log(`📊 DashboardPanel: Using production data fallback for grouped product: ${currentProduct}`)\n    rawData = dataStore.getProductionData(currentProduct, currentYear)\n  } else {\n    // Fallback to production data\n    rawData = dataStore.getProductionData(currentProduct, currentYear)\n  }\n  \n  if (!rawData && dataArray.length === 0) return { total: 0, countries: 0, topProducer: null, unit: '1000 t' }\n  \n  // Handle different data structures (object with country keys vs array) - only if we used production data\n  if (rawData && dataArray.length === 0) {\n    if (Array.isArray(rawData)) {\n      dataArray = rawData\n    } else if (rawData.data && Array.isArray(rawData.data)) {\n      dataArray = rawData.data\n    } else if (typeof rawData === 'object') {\n      // Convert object format to array\n      dataArray = Object.entries(rawData).map(([country, data]) => ({\n        country,\n        value: data.value || 0,\n        unit: data.unit || '1000 t',\n        year: data.year || currentYear\n      }))\n    }\n  }\n  \n  const validData = dataArray.filter(item => item && item.value > 0)\n  \n  // For per-capita metrics, calculate average instead of sum\n  const isPerCapitaMetric = uiStore.selectedMetric === 'food_supply_kcal'\n  const total = isPerCapitaMetric \n    ? validData.length > 0 ? validData.reduce((sum, item) => sum + (item.value || 0), 0) / validData.length : 0\n    : validData.reduce((sum, item) => sum + (item.value || 0), 0)\n  \n  console.log(`📊 DashboardPanel globalStats: validData count: ${validData.length}`)\n  console.log(`📊 DashboardPanel globalStats: sample data:`, validData.slice(0, 3))\n  \n  const countries = validData.length\n  \n  // Filter out non-country entities (continents, regions, aggregates) for top producer calculation\n  const NON_COUNTRY_ENTITIES = [\n    // Global/Continental\n    \"World\", \"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\",\n    \n    // Regional subdivisions\n    \"Northern America\", \"South America\", \"Central America\", \"Caribbean\",\n    \"Northern Africa\", \"Eastern Africa\", \"Middle Africa\", \"Southern Africa\", \"Western Africa\", \n    \"Eastern Asia\", \"South-eastern Asia\", \"Southern Asia\", \"Western Asia\", \"Central Asia\",\n    \"Eastern Europe\", \"Northern Europe\", \"Southern Europe\", \"Western Europe\",\n    \"Australia and New Zealand\", \"Melanesia\",\n    \n    // Economic/Political unions\n    \"European Union (27)\",\n    \n    // Development status groups\n    \"Small Island Developing States\", \"Least Developed Countries\", \n    \"Land Locked Developing Countries\", \"Low Income Food Deficit Countries\",\n    \"Net Food Importing Developing Countries\"\n  ]\n  \n  const countryData = validData.filter(item => \n    item.country && \n    !NON_COUNTRY_ENTITIES.includes(item.country) &&\n    !item.country.toLowerCase().includes('total')\n  )\n  \n  console.log(`📊 DashboardPanel globalStats: countryData count: ${countryData.length}`)\n  console.log(`📊 DashboardPanel globalStats: sample countries:`, countryData.slice(0, 3).map(c => c.country))\n  \n  const topProducer = countryData.length > 0 ? countryData.reduce((max, item) => \n    (item.value || 0) > (max?.value || 0) ? item : max, null\n  ) : null\n  \n  // Determine the correct unit based on metric\n  let unit = '1000 t'\n  if (currentMetric === 'food_supply_kcal') {\n    unit = 'kcal/capita/day'\n  } else if (validData.length > 0 && validData[0].unit) {\n    unit = validData[0].unit\n  }\n  \n  return { \n    total, \n    countries: countryData.length, // Use filtered country count instead of all data\n    topProducer: topProducer?.country,\n    unit: unit\n  }\n})\n\n\nconst onCountryClick = (countryCode: string) => {\n  console.log('🖱️ DashboardPanel: Country click received:', countryCode)\n  \n  // Guard: Validate country code\n  if (!countryCode || typeof countryCode !== 'string') {\n    console.warn('🚫 DashboardPanel: Invalid country code, ignoring click')\n    return\n  }\n  \n  // Find country name from data\n  const data = dataStore.getProductionData(uiStore.selectedProduct, uiStore.selectedYear)\n  const countryData = data?.data?.find(item => item.countryCode === countryCode)\n  \n  if (countryData) {\n    // Only set if different to prevent unnecessary updates\n    if (uiStore.selectedCountry !== countryData.country) {\n      console.log('🎯 DashboardPanel: Setting selected country:', countryData.country)\n      uiStore.setSelectedCountry(countryData.country)\n    } else {\n      console.log('🔄 DashboardPanel: Country already selected:', countryData.country)\n    }\n  } else {\n    console.warn('🚫 DashboardPanel: Country data not found for code:', countryCode)\n  }\n}\n\nonMounted(async () => {\n  // Initialize dashboard\n  if (!dataStore.hasData) {\n    await dataStore.initializeApp()\n  }\n  \n  // Check if we need to load production data or if timeseries is sufficient\n  try {\n    // Wait a bit for timeseries data to be loaded\n    await new Promise(resolve => setTimeout(resolve, 100))\n    \n    if (dataStore.timeseriesData && dataStore.timeseriesData[uiStore.selectedProduct]) {\n      console.log('📊 DashboardPanel: Using timeseries data for', uiStore.selectedProduct)\n      // Timeseries data is available, no need to load production data\n    } else {\n      console.log('📊 DashboardPanel: Loading production data for', uiStore.selectedProduct)\n      await dataStore.loadProductionData(uiStore.selectedProduct, uiStore.selectedYear)\n    }\n  } catch (error) {\n    console.error('Failed to load initial production data:', error)\n  }\n  \n  // Timeseries data is now loaded during app initialization\n  console.log('📊 DashboardPanel: Timeseries data available:', dataStore.timeseriesData ? Object.keys(dataStore.timeseriesData).length + ' products' : 'Not loaded')\n  \n  // Set up responsive width calculation\n  const updateWidth = () => {\n    containerWidth.value = Math.min(400, Math.max(300, window.innerWidth * 0.4))\n  }\n  \n  updateWidth()\n  window.addEventListener('resize', updateWidth)\n  \n  // Store handler for cleanup\n  resizeHandler = updateWidth\n})\n\nlet resizeHandler = null\nonUnmounted(() => {\n  if (resizeHandler) {\n    window.removeEventListener('resize', resizeHandler)\n  }\n})\n\n// Watch for changes in selection and reload data\nwatch([() => uiStore.selectedProduct, () => uiStore.selectedYear], async ([product, year]) => {\n  if (product && year) {\n    try {\n      // Check if timeseries data is available for this product\n      if (dataStore.timeseriesData && dataStore.timeseriesData[product]) {\n        console.log('📊 DashboardPanel watcher: Using timeseries data for', product)\n        // Timeseries data is available, no need to load production data\n      } else {\n        console.log('📊 DashboardPanel watcher: Loading production data for', product)\n        await dataStore.loadProductionData(product, year)\n      }\n    } catch (error) {\n      console.error('Failed to load production data:', error)\n    }\n  }\n})\n</script>\n\n<template>\n  <div class=\"space-y-6\">\n    <!-- Dashboard Header with Stats -->\n    <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <!-- Total Production Card -->\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <div class=\"flex items-center\">\n            <div class=\"flex-shrink-0\">\n              <div class=\"w-12 h-12 bg-primary-100 dark:bg-primary-900/20 rounded-lg flex items-center justify-center\">\n                <svg class=\"w-6 h-6 text-primary-600 dark:text-primary-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                </svg>\n              </div>\n            </div>\n            <div class=\"ml-4\">\n              <h3 class=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                {{ uiStore.selectedMetric === 'production' ? 'Gesamtproduktion' : \n                  uiStore.selectedMetric === 'import_quantity' ? 'Gesamtimport' :\n                  uiStore.selectedMetric === 'export_quantity' ? 'Gesamtexport' :\n                  uiStore.selectedMetric === 'domestic_supply_quantity' ? 'Inlandsversorgung' :\n                  uiStore.selectedMetric === 'food_supply_kcal' ? 'Kalorienversorgung' :\n                  uiStore.selectedMetric === 'feed' ? 'Tierfutterverbrauch' :\n                  'Gesamt' }} {{ uiStore.selectedYear || new Date().getFullYear() }}\n              </h3>\n              <p class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                {{ formatAgricultureValue(globalStats?.total || 0, { unit: globalStats?.unit || '1000 t', showUnit: true }) }}\n              </p>\n              <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n                {{ uiStore.selectedProduct?.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()) || 'Alle Produkte' }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Countries Count Card -->\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <div class=\"flex items-center\">\n            <div class=\"flex-shrink-0\">\n              <div class=\"w-12 h-12 bg-secondary-100 dark:bg-secondary-900/20 rounded-lg flex items-center justify-center\">\n                <svg class=\"w-6 h-6 text-secondary-600 dark:text-secondary-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </div>\n            </div>\n            <div class=\"ml-4\">\n              <h3 class=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                {{ uiStore.selectedMetric === 'production' ? 'Produzierende Länder' :\n                  uiStore.selectedMetric === 'import_quantity' ? 'Importierende Länder' :\n                  uiStore.selectedMetric === 'export_quantity' ? 'Exportierende Länder' :\n                  uiStore.selectedMetric === 'domestic_supply_quantity' ? 'Versorgte Länder' :\n                  uiStore.selectedMetric === 'food_supply_kcal' ? 'Länder mit Kaloriendaten' :\n                  uiStore.selectedMetric === 'feed' ? 'Länder mit Futterdaten' :\n                  'Länder mit Daten' }}\n              </h3>\n              <p class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                {{ globalStats?.countries || 0 }}\n              </p>\n              <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n                mit {{ uiStore.selectedMetric === 'production' ? 'Produktionsdaten' :\n                  uiStore.selectedMetric === 'import_quantity' ? 'Importdaten' :\n                  uiStore.selectedMetric === 'export_quantity' ? 'Exportdaten' :\n                  uiStore.selectedMetric === 'domestic_supply_quantity' ? 'Versorgungsdaten' :\n                  uiStore.selectedMetric === 'food_supply_kcal' ? 'Kalorienwerten' :\n                  uiStore.selectedMetric === 'feed' ? 'Futterdaten' :\n                  'Daten' }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Top Producer Card -->\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <div class=\"flex items-center\">\n            <div class=\"flex-shrink-0\">\n              <div class=\"w-12 h-12 bg-success-100 dark:bg-success-900/20 rounded-lg flex items-center justify-center\">\n                <svg class=\"w-6 h-6 text-success-600 dark:text-success-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z\" />\n                </svg>\n              </div>\n            </div>\n            <div class=\"ml-4\">\n              <h3 class=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                {{ uiStore.selectedMetric === 'production' ? 'Größter Produzent' :\n                  uiStore.selectedMetric === 'import_quantity' ? 'Größter Importeur' :\n                  uiStore.selectedMetric === 'export_quantity' ? 'Größter Exporteur' :\n                  uiStore.selectedMetric === 'domestic_supply_quantity' ? 'Größter Verbraucher' :\n                  uiStore.selectedMetric === 'food_supply_kcal' ? 'Höchste Kalorienversorgung' :\n                  uiStore.selectedMetric === 'feed' ? 'Größter Futterverbraucher' :\n                  'Spitzenreiter' }}\n              </h3>\n              <p class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                {{ globalStats.topProducer || 'N/A' }}\n              </p>\n              <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n                {{ uiStore.selectedYear }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Feed Usage Card -->\n      <div class=\"card\" data-tour=\"feed-usage\">\n        <div class=\"card-body\">\n          <div class=\"flex items-center\">\n            <div class=\"flex-shrink-0\">\n              <div class=\"w-12 h-12 bg-warning-100 dark:bg-warning-900/20 rounded-lg flex items-center justify-center\">\n                <svg class=\"w-6 h-6 text-warning-600 dark:text-warning-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3\" />\n                </svg>\n              </div>\n            </div>\n            <div class=\"ml-4\">\n              <h3 class=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                Als Tierfutter\n              </h3>\n              <p class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                {{ feedUsage.percentage > 0 ? feedUsage.percentage + '%' : \n                  feedUsage.percentage === 0 && ['Maize and products', 'Wheat and products', 'Barley and products', \n                                                 'Sorghum and products', 'Cereals - Excluding Beer', 'Grand Total'].includes(uiStore.selectedProduct) \n                    ? '0%' : 'N/A' }}\n              </p>\n              <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n                {{ feedUsage.amount > 0 \n                  ? formatAgricultureValue(feedUsage.amount, { unit: feedUsage.unit, showUnit: true })\n                  : feedUsage.percentage === 0 && ['Maize and products', 'Wheat and products', 'Barley and products', \n                                                   'Sorghum and products', 'Cereals - Excluding Beer', 'Grand Total'].includes(uiStore.selectedProduct)\n                    ? 'Keine Futternutzung'\n                    : 'Nicht als Futter genutzt' }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Selected Country Details -->\n    <div v-if=\"selectedCountryData\" class=\"card\">\n      <div class=\"card-header\">\n        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          {{ uiStore.selectedCountry }} - Detailansicht\n        </h3>\n        <button\n          class=\"btn btn-ghost btn-sm\"\n          @click=\"uiStore.setSelectedCountry('')\"\n        >\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div class=\"text-center\">\n            <p class=\"text-sm text-gray-600 dark:text-gray-400\">Produktion</p>\n            <p class=\"text-xl font-bold text-primary-600 dark:text-primary-400\">\n              {{ formatAgricultureValue(selectedCountryData.value, { unit: selectedCountryData.unit || '1000 t', showUnit: true }) }}\n            </p>\n          </div>\n          <div class=\"text-center\">\n            <p class=\"text-sm text-gray-600 dark:text-gray-400\">Weltanteil</p>\n            <p class=\"text-xl font-bold text-secondary-600 dark:text-secondary-400\">\n              {{ globalStats.total > 0 && selectedCountryData ? ((selectedCountryData.value / globalStats.total) * 100).toFixed(1) : '0' }}%\n            </p>\n            <p class=\"text-xs text-gray-500 dark:text-gray-400\">\n              der Weltproduktion\n            </p>\n          </div>\n          <div class=\"text-center\">\n            <p class=\"text-sm text-gray-600 dark:text-gray-400\">Rang</p>\n            <p class=\"text-xl font-bold text-success-600 dark:text-success-400\">\n              #{{ countryRank }}\n            </p>\n            <p class=\"text-xs text-gray-500 dark:text-gray-400\">\n              weltweit\n            </p>\n          </div>\n          <div class=\"text-center\">\n            <p class=\"text-sm text-gray-600 dark:text-gray-400\">Jahr</p>\n            <p class=\"text-xl font-bold text-gray-600 dark:text-gray-400\">\n              {{ uiStore.selectedYear }}\n            </p>\n            <p class=\"text-xs text-gray-500 dark:text-gray-400\">\n              Datenjahr\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Visualization Selection -->\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Hauptvisualisierung\n        </h3>\n        <div class=\"flex space-x-2\">\n          <button\n            v-for=\"option in visualizationOptions\"\n            :key=\"option.value\"\n            :class=\"[\n              'btn btn-sm transition-colors duration-200',\n              selectedVisualization === option.value\n                ? 'bg-primary-600 text-white border-primary-600 hover:bg-primary-700'\n                : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600'\n            ]\"\n            @click=\"selectedVisualization = option.value\"\n          >\n            {{ option.label }}\n          </button>\n        </div>\n      </div>\n      <div class=\"card-body\">\n        <!-- World Map View -->\n        <div v-if=\"selectedVisualization === 'world-map'\" class=\"h-[600px] w-full relative\" data-tour=\"world-map\">\n          <WorldMap\n            :selected-product=\"uiStore.selectedProduct\"\n            :selected-year=\"uiStore.selectedYear\"\n            :selected-metric=\"uiStore.selectedMetric\"\n            @country-click=\"onCountryClick\"\n            @country-hover=\"(country) => {}\"\n          />\n        </div>\n        \n        <!-- Timeseries View -->\n        <div v-else-if=\"selectedVisualization === 'timeseries'\" class=\"h-96 p-4\">\n          <TimeseriesChart\n            :selected-country=\"uiStore.selectedCountry\"\n            :selected-product=\"uiStore.selectedProduct\"\n            :selected-metric=\"uiStore.selectedMetric\"\n            @point-hover=\"(data) => {}\"\n            @point-click=\"(data) => {}\"\n          />\n        </div>\n        \n        <!-- Overview Grid -->\n        <div v-else-if=\"selectedVisualization === 'overview'\" class=\"p-4 overflow-hidden\">\n          <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6 max-w-full\">\n            <!-- Mini World Map -->\n            <div class=\"bg-gray-50 dark:bg-gray-900 rounded-lg overflow-hidden min-h-[700px] flex flex-col\">\n              <div class=\"px-4 pt-4 pb-2 flex-shrink-0\">\n                <h4 class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Weltweite Verteilung\n                </h4>\n              </div>\n              <div class=\"flex-1 w-full\">\n                <WorldMap\n                  :width=\"containerWidth\"\n                  :height=\"600\"\n                  :selected-product=\"uiStore.selectedProduct\"\n                  :selected-year=\"uiStore.selectedYear\"\n                  :selected-metric=\"uiStore.selectedMetric\"\n                  @country-click=\"onCountryClick\"\n                />\n              </div>\n            </div>\n            \n            <!-- Mini Timeseries -->\n            <div class=\"bg-gray-50 dark:bg-gray-900 rounded-lg overflow-hidden min-h-[700px] flex flex-col\">\n              <div class=\"px-4 pt-4 pb-2 flex-shrink-0\">\n                <h4 class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Zeitliche Entwicklung\n                </h4>\n              </div>\n              <div class=\"flex-1 w-full\">\n                <TimeseriesChart\n                  :width=\"containerWidth\"\n                  :height=\"600\"\n                  :selected-country=\"uiStore.selectedCountry\"\n                  :selected-product=\"uiStore.selectedProduct\"\n                  :selected-metric=\"uiStore.selectedMetric\"\n                />\n              </div>\n            </div>\n            \n            <!-- Top Countries List -->\n            <div class=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-4 overflow-hidden\" data-tour=\"top-countries\">\n              <h4 class=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                Top 10 Länder\n              </h4>\n              <div class=\"space-y-2 max-h-96 overflow-y-auto\">\n                <div\n                  v-for=\"(item, index) in topCountries\"\n                  :key=\"item.country\"\n                  class=\"flex items-center justify-between p-2 bg-white dark:bg-gray-800 rounded\"\n                >\n                  <div class=\"flex items-center space-x-3\">\n                    <span class=\"w-6 h-6 bg-primary-100 dark:bg-primary-900/20 rounded-full flex items-center justify-center text-xs font-medium text-primary-600 dark:text-primary-400\">\n                      {{ index + 1 }}\n                    </span>\n                    <span class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                      {{ item.country }}\n                    </span>\n                  </div>\n                  <span class=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {{ formatAgricultureValue(item.value, { unit: item.unit || '1000 t', showUnit: true }) }}\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <!-- Quick Stats -->\n            <div class=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-4 overflow-hidden\">\n              <h4 class=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                Schnellstatistiken\n              </h4>\n              <div class=\"space-y-3\">\n                <div class=\"flex justify-between\">\n                  <span class=\"text-sm text-gray-600 dark:text-gray-400\">Durchschnitt/Land:</span>\n                  <span class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                    {{ globalStats.countries > 0 ? formatAgricultureValue(Math.round(globalStats.total / globalStats.countries), { unit: globalStats.unit || '1000 t', showUnit: true }) : '0' }}\n                  </span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span class=\"text-sm text-gray-600 dark:text-gray-400\">Datenjahre:</span>\n                  <span class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                    {{ dataStore.availableYears?.length || 0 }}\n                  </span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span class=\"text-sm text-gray-600 dark:text-gray-400\">Produkte:</span>\n                  <span class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                    {{ dataStore.availableProducts?.length || 0 }}\n                  </span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span class=\"text-sm text-gray-600 dark:text-gray-400\">Gesamt Länder:</span>\n                  <span class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                    {{ dataStore.geoData?.features?.length || 0 }}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Quick Actions -->\n    <div class=\"card\" data-tour=\"quick-actions\">\n      <div class=\"card-header\">\n        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Schnellaktionen\n        </h3>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <router-link\n            to=\"/timeseries\"\n            class=\"block p-4 bg-gray-50 dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-center\"\n          >\n            <svg class=\"w-8 h-8 text-primary-600 dark:text-primary-400 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z\" />\n            </svg>\n            <p class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Zeitreihen</p>\n          </router-link>\n          \n          <router-link\n            to=\"/simulation\"\n            class=\"block p-4 bg-gray-50 dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-center\"\n          >\n            <svg class=\"w-8 h-8 text-secondary-600 dark:text-secondary-400 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4\" />\n            </svg>\n            <p class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Simulation</p>\n          </router-link>\n          \n          <router-link\n            to=\"/ml-predictions\"\n            class=\"block p-4 bg-gray-50 dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-center\"\n          >\n            <svg class=\"w-8 h-8 text-success-600 dark:text-success-400 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2z\" />\n            </svg>\n            <p class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">ML Prognosen</p>\n          </router-link>\n          \n          <router-link\n            to=\"/structural\"\n            class=\"block p-4 bg-gray-50 dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-center\"\n          >\n            <svg class=\"w-8 h-8 text-warning-600 dark:text-warning-400 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 11H5m14-7v12a2 2 0 01-2 2H7a2 2 0 01-2-2V4a2 2 0 012-2h10a2 2 0 012 2zM9 11h6\" />\n            </svg>\n            <p class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Strukturanalyse</p>\n          </router-link>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>","/**\n * Product mappings for German translations and enhanced product selection\n * Maps English FAO product names to German names and provides additional metadata\n * Updated with exact FAO metadata product names (113 products total)\n * Now includes ML forecast product name mappings\n */\n\nexport const productMappings = {\n  // Cereals & Grains\n  'Animal fats': 'Tierische Fette',\n  'Barley and products': 'Gerste und Erzeugnisse',\n  'Beer': 'Bier',\n  'Cereals - Excluding Beer': 'Getreide - Ohne Bier',\n  'Cereals, other': 'Getreide, andere',\n  'Maize and products': 'Mais und Erzeugnisse',\n  'Millet and products': 'Hirse und Erzeugnisse',\n  'Oats': 'Hafer',\n  'Rice and products': 'Reis und Erzeugnisse',\n  'Rye and products': 'Roggen und Erzeugnisse',\n  'Sorghum and products': 'Sorghum und Erzeugnisse',\n  'Wheat and products': 'Weizen und Erzeugnisse',\n\n  // Fruits\n  'Apples and products': 'Äpfel und Erzeugnisse',\n  'Bananas': 'Bananen',\n  'Citrus, Other': 'Zitrusfrüchte, andere',\n  'Dates': 'Datteln',\n  'Fruits - Excluding Wine': 'Früchte - Ohne Wein',\n  'Fruits, other': 'Früchte, andere',\n  'Grapefruit and products': 'Grapefruit und Erzeugnisse',\n  'Grapes and products (excl wine)': 'Trauben und Erzeugnisse (ohne Wein)',\n  'Lemons, Limes and products': 'Zitronen, Limetten und Erzeugnisse',\n  'Oranges, Mandarines': 'Orangen, Mandarinen',\n  'Pineapples and products': 'Ananas und Erzeugnisse',\n\n  // Vegetables & Roots\n  'Cassava and products': 'Maniok und Erzeugnisse',\n  'Onions': 'Zwiebeln',\n  'Plantains': 'Kochbananen',\n  'Potatoes and products': 'Kartoffeln und Erzeugnisse',\n  'Roots, Other': 'Wurzeln, andere',\n  'Starchy Roots': 'Stärkehaltige Wurzeln',\n  'Sweet potatoes': 'Süßkartoffeln',\n  'Tomatoes and products': 'Tomaten und Erzeugnisse',\n  'Vegetables': 'Gemüse',\n  'Vegetables, other': 'Gemüse, andere',\n  'Yams': 'Yams',\n\n  // Legumes & Nuts\n  'Beans': 'Bohnen',\n  'Groundnuts': 'Erdnüsse',\n  'Nuts and products': 'Nüsse und Erzeugnisse',\n  'Peas': 'Erbsen',\n  'Pulses': 'Hülsenfrüchte',\n  'Pulses, Other and products': 'Hülsenfrüchte, andere und Erzeugnisse',\n  'Treenuts': 'Baumnüsse',\n\n  // Meat & Animal Products\n  'Bovine Meat': 'Rindfleisch',\n  'Butter, Ghee': 'Butter, Ghee',\n  'Cream': 'Sahne',\n  'Eggs': 'Eier',\n  'Meat': 'Fleisch',\n  'Meat, Aquatic Mammals': 'Fleisch von Wassersäugetieren',\n  'Meat, Other': 'Fleisch, andere',\n  'Milk - Excluding Butter': 'Milch - Ohne Butter',\n  'Mutton & Goat Meat': 'Hammel- und Ziegenfleisch',\n  'Offals': 'Innereien',\n  'Offals, Edible': 'Innereien, essbar',\n  'Pigmeat': 'Schweinefleisch',\n  'Poultry Meat': 'Geflügelfleisch',\n\n  // Fish & Seafood\n  'Aquatic Animals, Others': 'Wassertiere, andere',\n  'Aquatic Plants': 'Wasserpflanzen',\n  'Aquatic Products, Other': 'Wasserprodukte, andere',\n  'Cephalopods': 'Kopffüßer',\n  'Crustaceans': 'Krebstiere',\n  'Demersal Fish': 'Bodenfische',\n  'Fish, Body Oil': 'Fischkörperöl',\n  'Fish, Liver Oil': 'Fischleberöl',\n  'Fish, Seafood': 'Fisch, Meeresfrüchte',\n  'Freshwater Fish': 'Süßwasserfische',\n  'Marine Fish, Other': 'Meeresfische, andere',\n  'Molluscs, Other': 'Weichtiere, andere',\n  'Pelagic Fish': 'Pelagische Fische',\n\n  // Oils & Fats\n  'Coconut Oil': 'Kokosöl',\n  'Cottonseed Oil': 'Baumwollsamenöl',\n  'Fats, Animals, Raw': 'Tierische Fette, roh',\n  'Groundnut Oil': 'Erdnussöl',\n  'Maize Germ Oil': 'Maiskeimöl',\n  'Oilcrops': 'Ölsaaten',\n  'Oilcrops Oil, Other': 'Ölsaatenöl, andere',\n  'Oilcrops, Other': 'Ölsaaten, andere',\n  'Olive Oil': 'Olivenöl',\n  'Olives (including preserved)': 'Oliven (einschließlich konservierte)',\n  'Palm Oil': 'Palmöl',\n  'Palmkernel Oil': 'Palmkernöl',\n  'Rape and Mustard Oil': 'Raps- und Senföl',\n  'Ricebran Oil': 'Reiskleieöl',\n  'Sesameseed Oil': 'Sesamöl',\n  'Soyabean Oil': 'Sojaöl',\n  'Sunflowerseed Oil': 'Sonnenblumenöl',\n  'Vegetable Oils': 'Pflanzenöle',\n\n  // Seeds & Commodities\n  'Cloves': 'Nelken',\n  'Cocoa Beans and products': 'Kakaobohnen und Erzeugnisse',\n  'Coffee and products': 'Kaffee und Erzeugnisse',\n  'Cottonseed': 'Baumwollsamen',\n  'Palm kernels': 'Palmkerne',\n  'Pepper': 'Pfeffer',\n  'Pimento': 'Piment',\n  'Rape and Mustardseed': 'Raps- und Senfsamen',\n  'Sesame seed': 'Sesamsamen',\n  'Soyabeans': 'Sojabohnen',\n  'Spices': 'Gewürze',\n  'Spices, Other': 'Gewürze, andere',\n  'Stimulants': 'Stimulanzien',\n  'Sunflower seed': 'Sonnenblumenkerne',\n  'Tea (including mate)': 'Tee (einschließlich Mate)',\n\n  // Sugar & Sweeteners\n  'Beverages, Fermented': 'Fermentierte Getränke',\n  'Honey': 'Honig',\n  'Sugar & Sweeteners': 'Zucker und Süßstoffe',\n  'Sugar (Raw Equivalent)': 'Zucker (Rohzuckeräquivalent)',\n  'Sugar Crops': 'Zuckerpflanzen',\n  'Sugar beet': 'Zuckerrüben',\n  'Sugar cane': 'Zuckerrohr',\n  'Sugar non-centrifugal': 'Zucker, nicht zentrifugiert',\n  'Sweeteners, Other': 'Süßstoffe, andere',\n  'Wine': 'Wein',\n\n  // Other Categories\n  'Coconuts - Incl Copra': 'Kokosnüsse - Inkl. Kopra',\n  'Infant food': 'Säuglingsnahrung',\n  'Miscellaneous': 'Verschiedenes',\n\n  // ML Forecast specific product mappings (using underscores as in filenames)\n  'animal_fats': 'Tierische Fette',\n  'apples_and_products': 'Äpfel und Erzeugnisse',\n  'aquatic_animals_others': 'Wassertiere, andere',\n  'aquatic_plants': 'Wasserpflanzen',\n  'aquatic_products_other': 'Wasserprodukte, andere',\n  'bananas': 'Bananen',\n  'barley_and_products': 'Gerste und Erzeugnisse',\n  'beans': 'Bohnen',\n  'beer': 'Bier',\n  'beverages_fermented': 'Fermentierte Getränke',\n  'bovine_meat': 'Rindfleisch',\n  'butter_ghee': 'Butter, Ghee',\n  'cassava_and_products': 'Maniok und Erzeugnisse',\n  'cephalopods': 'Kopffüßer',\n  'cereals___excluding_beer': 'Getreide - Ohne Bier',\n  'cereals_other': 'Getreide, andere',\n  'citrus_other': 'Zitrusfrüchte, andere',\n  'cloves': 'Nelken',\n  'cocoa_beans_and_products': 'Kakaobohnen und Erzeugnisse',\n  'coconut_oil': 'Kokosöl',\n  'coconuts___incl_copra': 'Kokosnüsse - Inkl. Kopra',\n  'coffee_and_products': 'Kaffee und Erzeugnisse',\n  'cottonseed': 'Baumwollsamen',\n  'cottonseed_oil': 'Baumwollsamenöl',\n  'cream': 'Sahne',\n  'crustaceans': 'Krebstiere',\n  'dates': 'Datteln',\n  'demersal_fish': 'Bodenfische',\n  'eggs': 'Eier',\n  'fats_animals_raw': 'Tierische Fette, roh',\n  'fish_body_oil': 'Fischkörperöl',\n  'fish_liver_oil': 'Fischleberöl',\n  'fish_seafood': 'Fisch, Meeresfrüchte',\n  'freshwater_fish': 'Süßwasserfische',\n  'fruits___excluding_wine': 'Früchte - Ohne Wein',\n  'fruits_other': 'Früchte, andere',\n  'grapefruit_and_products': 'Grapefruit und Erzeugnisse',\n  'grapes_and_products_excl_wine': 'Trauben und Erzeugnisse (ohne Wein)',\n  'groundnut_oil': 'Erdnussöl',\n  'groundnuts': 'Erdnüsse',\n  'honey': 'Honig',\n  'lemons_limes_and_products': 'Zitronen, Limetten und Erzeugnisse',\n  'maize_and_products': 'Mais und Erzeugnisse',\n  'maize_germ_oil': 'Maiskeimöl',\n  'marine_fish_other': 'Meeresfische, andere',\n  'meat': 'Fleisch',\n  'meat_other': 'Fleisch, andere',\n  'milk___excluding_butter': 'Milch - Ohne Butter',\n  'millet_and_products': 'Hirse und Erzeugnisse',\n  'miscellaneous': 'Verschiedenes',\n  'molluscs_other': 'Weichtiere, andere',\n  'mutton_&_goat_meat': 'Hammel- und Ziegenfleisch',\n  'nuts_and_products': 'Nüsse und Erzeugnisse',\n  'oats': 'Hafer',\n  'offals': 'Innereien',\n  'offals_edible': 'Innereien, essbar',\n  'oilcrops': 'Ölsaaten',\n  'oilcrops_oil_other': 'Ölsaatenöl, andere',\n  'oilcrops_other': 'Ölsaaten, andere',\n  'olive_oil': 'Olivenöl',\n  'olives_including_preserved': 'Oliven (einschließlich konservierte)',\n  'onions': 'Zwiebeln',\n  'oranges_mandarines': 'Orangen, Mandarinen',\n  'palm_kernels': 'Palmkerne',\n  'palm_oil': 'Palmöl',\n  'palmkernel_oil': 'Palmkernöl',\n  'peas': 'Erbsen',\n  'pelagic_fish': 'Pelagische Fische',\n  'pepper': 'Pfeffer',\n  'pigmeat': 'Schweinefleisch',\n  'pimento': 'Piment',\n  'pineapples_and_products': 'Ananas und Erzeugnisse',\n  'plantains': 'Kochbananen',\n  'potatoes_and_products': 'Kartoffeln und Erzeugnisse',\n  'poultry_meat': 'Geflügelfleisch',\n  'pulses': 'Hülsenfrüchte',\n  'pulses_other_and_products': 'Hülsenfrüchte, andere und Erzeugnisse',\n  'rape_and_mustard_oil': 'Raps- und Senföl',\n  'rape_and_mustardseed': 'Raps- und Senfsamen',\n  'rice_and_products': 'Reis und Erzeugnisse',\n  'ricebran_oil': 'Reiskleieöl',\n  'roots_other': 'Wurzeln, andere',\n  'rye_and_products': 'Roggen und Erzeugnisse',\n  'sesame_seed': 'Sesamsamen',\n  'sesameseed_oil': 'Sesamöl',\n  'sorghum_and_products': 'Sorghum und Erzeugnisse',\n  'soyabean_oil': 'Sojaöl',\n  'soyabeans': 'Sojabohnen',\n  'spices': 'Gewürze',\n  'spices_other': 'Gewürze, andere',\n  'starchy_roots': 'Stärkehaltige Wurzeln',\n  'stimulants': 'Stimulanzien',\n  'sugar_&_sweeteners': 'Zucker und Süßstoffe',\n  'sugar_beet': 'Zuckerrüben',\n  'sugar_cane': 'Zuckerrohr',\n  'sugar_crops': 'Zuckerpflanzen',\n  'sugar_non_centrifugal': 'Zucker, nicht zentrifugiert',\n  'sugar_raw_equivalent': 'Zucker (Rohzuckeräquivalent)',\n  'sunflower_seed': 'Sonnenblumenkerne',\n  'sunflowerseed_oil': 'Sonnenblumenöl',\n  'sweet_potatoes': 'Süßkartoffeln',\n  'sweeteners_other': 'Süßstoffe, andere',\n  'tea_including_mate': 'Tee (einschließlich Mate)',\n  'tomatoes_and_products': 'Tomaten und Erzeugnisse',\n  'treenuts': 'Baumnüsse',\n  'vegetable_oils': 'Pflanzenöle',\n  'vegetables': 'Gemüse',\n  'vegetables_other': 'Gemüse, andere',\n  'wheat_and_products': 'Weizen und Erzeugnisse',\n  'wine': 'Wein',\n  'yams': 'Yams'\n}\n\n/**\n * Product categories for grouping and filtering\n */\nexport const productCategories = {\n  'cereals': {\n    name: 'Getreide und Körner',\n    icon: '🌾',\n    products: [\n      'Barley and products', 'Beer', 'Cereals - Excluding Beer', 'Cereals, other',\n      'Maize and products', 'Millet and products', 'Oats', 'Rice and products',\n      'Rye and products', 'Sorghum and products', 'Wheat and products'\n    ]\n  },\n  'fruits': {\n    name: 'Früchte',\n    icon: '🍎',\n    products: [\n      'Apples and products', 'Bananas', 'Citrus, Other', 'Dates',\n      'Fruits - Excluding Wine', 'Fruits, other', 'Grapefruit and products',\n      'Grapes and products (excl wine)', 'Lemons, Limes and products',\n      'Oranges, Mandarines', 'Pineapples and products'\n    ]\n  },\n  'vegetables': {\n    name: 'Gemüse und Wurzeln',\n    icon: '🥕',\n    products: [\n      'Cassava and products', 'Onions', 'Plantains', 'Potatoes and products',\n      'Roots, Other', 'Starchy Roots', 'Sweet potatoes', 'Tomatoes and products',\n      'Vegetables', 'Vegetables, other', 'Yams'\n    ]\n  },\n  'legumes': {\n    name: 'Hülsenfrüchte und Nüsse',\n    icon: '🥜',\n    products: [\n      'Beans', 'Groundnuts', 'Nuts and products', 'Peas', 'Pulses',\n      'Pulses, Other and products', 'Treenuts'\n    ]\n  },\n  'meat': {\n    name: 'Fleisch und Tierprodukte',\n    icon: '🥩',\n    products: [\n      'Bovine Meat', 'Butter, Ghee', 'Cream', 'Eggs', 'Meat', 'Meat, Aquatic Mammals',\n      'Meat, Other', 'Milk - Excluding Butter', 'Mutton & Goat Meat', 'Offals',\n      'Offals, Edible', 'Pigmeat', 'Poultry Meat'\n    ]\n  },\n  'seafood': {\n    name: 'Fisch und Meeresfrüchte',\n    icon: '🐟',\n    products: [\n      'Aquatic Animals, Others', 'Aquatic Plants', 'Aquatic Products, Other',\n      'Cephalopods', 'Crustaceans', 'Demersal Fish', 'Fish, Body Oil',\n      'Fish, Liver Oil', 'Fish, Seafood', 'Freshwater Fish', 'Marine Fish, Other',\n      'Molluscs, Other', 'Pelagic Fish'\n    ]\n  },\n  'oils': {\n    name: 'Öle und Fette',\n    icon: '🫒',\n    products: [\n      'Animal fats', 'Coconut Oil', 'Cottonseed Oil', 'Fats, Animals, Raw',\n      'Groundnut Oil', 'Maize Germ Oil', 'Oilcrops', 'Oilcrops Oil, Other',\n      'Oilcrops, Other', 'Olive Oil', 'Olives (including preserved)', 'Palm Oil',\n      'Palmkernel Oil', 'Rape and Mustard Oil', 'Ricebran Oil', 'Sesameseed Oil',\n      'Soyabean Oil', 'Sunflowerseed Oil', 'Vegetable Oils'\n    ]\n  },\n  'seeds': {\n    name: 'Samen und Rohstoffe',\n    icon: '🌱',\n    products: [\n      'Cloves', 'Cocoa Beans and products', 'Coffee and products', 'Cottonseed',\n      'Palm kernels', 'Pepper', 'Pimento', 'Rape and Mustardseed', 'Sesame seed',\n      'Soyabeans', 'Spices', 'Spices, Other', 'Stimulants', 'Sunflower seed',\n      'Tea (including mate)'\n    ]\n  },\n  'sugar': {\n    name: 'Zucker und Süßstoffe',\n    icon: '🍯',\n    products: [\n      'Beverages, Fermented', 'Honey', 'Sugar & Sweeteners', 'Sugar (Raw Equivalent)',\n      'Sugar Crops', 'Sugar beet', 'Sugar cane', 'Sugar non-centrifugal',\n      'Sweeteners, Other', 'Wine'\n    ]\n  },\n  'other': {\n    name: 'Andere',\n    icon: '📦',\n    products: [\n      'Coconuts - Incl Copra', 'Infant food', 'Miscellaneous'\n    ]\n  }\n}\n\n/**\n * Get German name for a product\n * @param {string} englishName - The English product name\n * @returns {string} The German product name or English name if not found\n */\nexport const getGermanName = (englishName) => {\n  return productMappings[englishName] || englishName\n}\n\n/**\n * Get German name for ML forecast products (handles underscore format)\n * @param {string} mlProductName - The ML product name (may contain underscores)\n * @returns {string} The German product name or formatted English name if not found\n */\nexport const getMLGermanName = (mlProductName) => {\n  // First try direct mapping\n  if (productMappings[mlProductName]) {\n    return productMappings[mlProductName]\n  }\n  \n  // Try with spaces instead of underscores\n  const spaceVersion = mlProductName.replace(/_/g, ' ')\n  if (productMappings[spaceVersion]) {\n    return productMappings[spaceVersion]\n  }\n  \n  // Try title case version\n  const titleCase = spaceVersion\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ')\n  if (productMappings[titleCase]) {\n    return productMappings[titleCase]\n  }\n  \n  // Fallback: format the product name nicely\n  return mlProductName\n    .replace(/_/g, ' ')\n    .replace(/&/g, '&')\n    .replace(/___/g, ' - ')\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ')\n}\n\n/**\n * Get English name from German name\n * @param {string} germanName - The German product name\n * @returns {string} The English product name or German name if not found\n */\nexport const getEnglishName = (germanName) => {\n  const entry = Object.entries(productMappings).find(([, german]) => german === germanName)\n  return entry ? entry[0] : germanName\n}\n\n/**\n * Get category for a product\n * @param {string} productName - The product name (English)\n * @returns {string|null} The category key or null if not found\n */\nexport const getProductCategory = (productName) => {\n  for (const [categoryKey, category] of Object.entries(productCategories)) {\n    if (category.products.includes(productName)) {\n      return categoryKey\n    }\n  }\n  return 'other'\n}\n\n/**\n * Get all individual products with German names\n * @returns {Array} Array of product options with value and label\n */\nexport const getAllProductOptions = () => {\n  return Object.keys(productMappings)\n    .map(englishName => ({\n      value: englishName,\n      label: getGermanName(englishName),\n      category: getProductCategory(englishName),\n      categoryName: productCategories[getProductCategory(englishName)]?.name || 'Andere'\n    }))\n    .sort((a, b) => a.label.localeCompare(b.label, 'de'))\n}\n\n/**\n * Get products grouped by category\n * @returns {Object} Products grouped by category\n */\nexport const getProductsByCategory = () => {\n  const grouped = {}\n  \n  for (const [categoryKey, category] of Object.entries(productCategories)) {\n    grouped[categoryKey] = {\n      ...category,\n      products: category.products\n        .map(englishName => ({\n          value: englishName,\n          label: getGermanName(englishName)\n        }))\n        .sort((a, b) => a.label.localeCompare(b.label, 'de'))\n    }\n  }\n  \n  return grouped\n}\n\n/**\n * Search products by German or English name\n * @param {string} searchTerm - The search term\n * @returns {Array} Matching product options\n */\nexport const searchProducts = (searchTerm) => {\n  if (!searchTerm || searchTerm.length < 2) {\n    return getAllProductOptions()\n  }\n  \n  const term = searchTerm.toLowerCase()\n  \n  return getAllProductOptions().filter(product => \n    product.label.toLowerCase().includes(term) ||\n    product.value.toLowerCase().includes(term)\n  )\n}","<template>\n  <div class=\"timeseries-panel\">\n    <ErrorBoundary @error=\"handleError\">\n      <div class=\"panel-header\">\n        <h2 class=\"panel-title\">Zeitreihen-Analyse</h2>\n        <p class=\"panel-description\">\n          Zeitliche Entwicklung von Produktionsdaten und Trends\n        </p>\n      </div>\n\n      <div class=\"panel-controls\">\n        <div class=\"filters-grid\">\n          <div class=\"filter-group\">\n            <MultiSelect\n              v-model=\"selectedProducts\"\n              :options=\"productOptions\"\n              placeholder=\"Produkte auswählen...\"\n              label=\"Produkte\"\n              size=\"md\"\n              :max-items=\"3\"\n            />\n          </div>\n          \n          <div class=\"filter-group\">\n            <MultiSelect\n              v-model=\"selectedCountries\"\n              :options=\"countryOptions\"\n              placeholder=\"Länder auswählen...\"\n              label=\"Länder\"\n              size=\"md\"\n              :max-items=\"5\"\n            />\n          </div>\n          \n          <div class=\"filter-group\" data-tour=\"year-selector\">\n            <SearchableSelect\n              v-model=\"selectedMetric\"\n              :options=\"metricOptions\"\n              placeholder=\"Metrik auswählen...\"\n              label=\"Metrik\"\n              size=\"md\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div class=\"panel-content\">\n        <div v-if=\"hasError\" class=\"error-container\">\n          <ErrorDisplay\n            :error=\"error\"\n            title=\"Fehler beim Laden der Zeitreihendaten\"\n            :show-retry=\"true\"\n            @retry=\"ensureDataLoaded\"\n          />\n        </div>\n\n        <div v-else-if=\"chartData.length > 0\" class=\"chart-container\" data-tour=\"timeseries-chart\">\n          <TimeseriesChart\n            :width=\"800\"\n            :height=\"500\"\n            :selected-countries=\"selectedCountries\"\n            :selected-products=\"selectedProducts\"\n            :selected-metric=\"selectedMetric\"\n            :chart-data=\"chartData\"\n            @point-click=\"handlePointClick\"\n          />\n        </div>\n\n        <div v-else class=\"empty-state\">\n          <div class=\"empty-icon\">📈</div>\n          <h3>Keine Daten verfügbar</h3>\n          <p v-if=\"selectedProducts.length === 0\">\n            Wählen Sie mindestens ein Produkt aus, um Zeitreihendaten anzuzeigen.\n          </p>\n          <p v-else>\n            Die ausgewählten Produkte haben keine verfügbaren Zeitreihendaten.\n          </p>\n        </div>\n      </div>\n\n      <div v-if=\"chartData.length > 0\" class=\"panel-footer\">\n        <div class=\"stats-grid\">\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Datenpunkte</span>\n            <span class=\"stat-value\">{{ chartData.length }}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">{{ selectedProducts.length > 1 ? 'Produkte' : 'Produkt' }}</span>\n            <span class=\"stat-value\">{{ selectedProducts.length }}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">{{ selectedCountries.length > 1 ? 'Länder' : 'Land' }}</span>\n            <span class=\"stat-value\">{{ selectedCountries.length > 0 ? selectedCountries.length : 'Global' }}</span>\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted } from 'vue'\nimport { useDataStore } from '@/stores/useDataStore'\nimport { useUIStore } from '@/stores/useUIStore'\nimport ErrorBoundary from '@/components/ui/ErrorBoundary.vue'\nimport ErrorDisplay from '@/components/ui/ErrorDisplay.vue'\nimport SearchableSelect from '@/components/ui/SearchableSelect.vue'\nimport MultiSelect from '@/components/ui/MultiSelect.vue'\nimport TimeseriesChart from '@/components/visualizations/TimeseriesChart.vue'\nimport { getAllProductOptions, getGermanName } from '@/utils/productMappings'\n\n// Store and composables\nconst dataStore = useDataStore()\nconst uiStore = useUIStore()\n\n// Reactive state - use the same defaults as dashboard\nconst selectedProducts = ref([])\nconst selectedCountries = ref([])\nconst selectedMetric = ref('production')\nconst chartData = ref([])\nconst error = ref(null)\n\n// Computed properties\nconst hasError = computed(() => error.value !== null)\n\n// Get available products from metadata\nconst productOptions = computed(() => {\n  const individualItems = dataStore.faoMetadata?.data_summary?.food_items || []\n  \n  if (individualItems.length > 0) {\n    return individualItems.map(product => ({\n      value: product,\n      label: getGermanName(product)\n    })).sort((a, b) => a.label.localeCompare(b.label, 'de'))\n  } else {\n    return getAllProductOptions()\n  }\n})\n\n// Get available countries from timeseries data\nconst countryOptions = computed(() => {\n  if (!dataStore.timeseriesData || selectedProducts.value.length === 0) return []\n  \n  // Get union of all countries that exist for any selected product\n  const allCountries = new Set()\n  \n  selectedProducts.value.forEach(product => {\n    const productData = dataStore.timeseriesData[product]\n    if (productData) {\n      Object.keys(productData).forEach(country => allCountries.add(country))\n    }\n  })\n  \n  const NON_COUNTRY_ENTITIES = [\n    \"World\", \"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\",\n    \"Northern America\", \"South America\", \"Central America\", \"Caribbean\",\n    \"Northern Africa\", \"Eastern Africa\", \"Middle Africa\", \"Southern Africa\", \"Western Africa\", \n    \"Eastern Asia\", \"South-eastern Asia\", \"Southern Asia\", \"Western Asia\", \"Central Asia\",\n    \"Eastern Europe\", \"Northern Europe\", \"Southern Europe\", \"Western Europe\",\n    \"Australia and New Zealand\", \"Melanesia\",\n    \"European Union (27)\",\n    \"Small Island Developing States\", \"Least Developed Countries\", \n    \"Land Locked Developing Countries\", \"Low Income Food Deficit Countries\",\n    \"Net Food Importing Developing Countries\"\n  ]\n  \n  return [...allCountries]\n    .filter(country => !NON_COUNTRY_ENTITIES.includes(country) && !country.toLowerCase().includes('total'))\n    .map(country => ({\n      value: country,\n      label: country\n    }))\n    .sort((a, b) => a.label.localeCompare(b.label))\n})\n\n// Metric options\nconst metricOptions = [\n  { value: 'production', label: 'Produktion' },\n  { value: 'import_quantity', label: 'Import' },\n  { value: 'export_quantity', label: 'Export' },\n  { value: 'domestic_supply_quantity', label: 'Inlandsversorgung' }\n]\n\n// Update chart data when selections change\nconst updateChartData = () => {\n  if (!dataStore.timeseriesData || selectedProducts.value.length === 0) {\n    chartData.value = []\n    return\n  }\n\n  const metricKey = selectedMetric.value === 'production' ? 'production' :\n                   selectedMetric.value === 'import_quantity' ? 'imports' :\n                   selectedMetric.value === 'export_quantity' ? 'exports' :\n                   'domestic_supply'\n\n  const allData = []\n\n  // Iterate through selected products\n  selectedProducts.value.forEach(product => {\n    const productData = dataStore.timeseriesData[product]\n    if (!productData) return\n\n    if (selectedCountries.value.length > 0) {\n      // Multiple countries selected\n      selectedCountries.value.forEach(country => {\n        if (productData[country]) {\n          const countryData = productData[country]\n          countryData.forEach(yearData => {\n            const value = yearData[metricKey] || 0\n            if (value > 0) {\n              allData.push({\n                year: yearData.year,\n                value: value,\n                country: country,\n                product: product,\n                unit: yearData.unit || 't',\n                // Create a unique series identifier for each country-product combination\n                series: `${country} - ${product}`\n              })\n            }\n          })\n        }\n      })\n    } else {\n      // No countries selected - show global data for each product\n      const yearlyTotals = new Map()\n      \n      Object.entries(productData).forEach(([country, countryData]) => {\n        countryData.forEach(yearData => {\n          const value = yearData[metricKey] || 0\n          if (value > 0) {\n            const year = yearData.year\n            const currentTotal = yearlyTotals.get(year) || 0\n            yearlyTotals.set(year, currentTotal + value)\n          }\n        })\n      })\n      \n      yearlyTotals.forEach((value, year) => {\n        allData.push({\n          year: year,\n          value: value,\n          country: 'Global',\n          product: product,\n          unit: 't',\n          series: `Global - ${product}`\n        })\n      })\n    }\n  })\n  \n  chartData.value = allData.sort((a, b) => {\n    if (a.series !== b.series) return a.series.localeCompare(b.series)\n    return a.year - b.year\n  })\n}\n\n// Methods\nconst ensureDataLoaded = async () => {\n  try {\n    if (!dataStore.timeseriesData) {\n      await dataStore.initializeApp()\n    }\n  } catch (err) {\n    error.value = err\n    console.error('TimeseriesPanel data loading error:', err)\n  }\n}\n\nconst handleError = (err) => {\n  error.value = err\n  console.error('TimeseriesPanel error:', err)\n}\n\nconst handlePointClick = (point) => {\n  console.log('Point clicked:', point)\n}\n\n// Watchers\nwatch([selectedProducts, selectedCountries, selectedMetric], () => {\n  updateChartData()\n}, { immediate: true })\n\n// Lifecycle\nonMounted(async () => {\n  await ensureDataLoaded()\n  updateChartData()\n})\n</script>\n\n<style scoped>\n.timeseries-panel {\n  @apply flex flex-col h-full bg-white dark:bg-gray-800 rounded-lg shadow-lg;\n}\n\n.panel-header {\n  @apply p-6 border-b border-gray-200 dark:border-gray-700;\n}\n\n.panel-title {\n  @apply text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2;\n}\n\n.panel-description {\n  @apply text-gray-600 dark:text-gray-400;\n}\n\n.panel-controls {\n  @apply p-6 bg-gray-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700;\n}\n\n.filters-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 items-start;\n}\n\n.filter-group {\n  @apply flex flex-col;\n}\n\n.panel-content {\n  @apply flex-1 p-6 min-h-0;\n}\n\n.error-container,\n.empty-state {\n  @apply flex flex-col items-center justify-center h-full;\n}\n\n.empty-icon {\n  @apply text-6xl mb-4;\n}\n\n.empty-state h3 {\n  @apply text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2;\n}\n\n.empty-state p {\n  @apply text-gray-500 dark:text-gray-400;\n}\n\n.chart-container {\n  @apply w-full h-full min-h-[500px] bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700;\n}\n\n.panel-footer {\n  @apply p-6 bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700;\n}\n\n.stats-grid {\n  @apply grid grid-cols-3 gap-4;\n}\n\n.stat-item {\n  @apply text-center;\n}\n\n.stat-label {\n  @apply block text-sm text-gray-500 dark:text-gray-400 mb-1;\n}\n\n.stat-value {\n  @apply block text-lg font-semibold text-gray-900 dark:text-gray-100;\n}\n</style>","<template>\n  <div class=\"simulation-panel\">\n    <ErrorBoundary @error=\"handleError\">\n      <div class=\"panel-header\">\n        <h2 class=\"panel-title\">Simulationsmodelle</h2>\n        <p class=\"panel-description\">\n          Interaktive Monte-Carlo-Simulationen für landwirtschaftliche Szenarien\n        </p>\n        \n        <div class=\"simulation-info\">\n          <div class=\"info-section\">\n            <h3 class=\"info-title\">Was wird berechnet?</h3>\n            <p class=\"info-text\">\n              Diese Simulation verwendet <strong>Monte-Carlo-Verfahren</strong> mit 500 stochastischen Pfaden, um die Auswirkungen verschiedener Faktoren auf die globale Nahrungsmittelproduktion zu modellieren. Basierend auf <strong>Geometrischer Brownscher Bewegung</strong> werden realistische Produktionstrends und Volatilitäten berechnet.\n            </p>\n          </div>\n          \n          <div class=\"info-section\">\n            <h3 class=\"info-title\">Wie funktioniert es?</h3>\n            <div class=\"info-steps\">\n              <div class=\"step\">\n                <span class=\"step-number\">1</span>\n                <span class=\"step-text\"><strong>Szenario wählen:</strong> Klicken Sie auf ein vordefiniertes Szenario, um die Parameter automatisch zu setzen</span>\n              </div>\n              <div class=\"step\">\n                <span class=\"step-number\">2</span>\n                <span class=\"step-text\"><strong>Parameter anpassen:</strong> Nutzen Sie die Slider, um Faktoren wie Klimawandel, Bevölkerungswachstum, Technologiefortschritt und wirtschaftliche Stabilität zu justieren</span>\n              </div>\n              <div class=\"step\">\n                <span class=\"step-number\">3</span>\n                <span class=\"step-text\"><strong>Simulation starten:</strong> Die Berechnung erfolgt in Echtzeit und zeigt Auswirkungen auf Produktion, Ernährungssicherheit, Umwelt und Wirtschaft</span>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"info-section\">\n            <h3 class=\"info-title\">Berechnungsgrundlage</h3>\n            <p class=\"info-text\">\n              Jeder Faktor beeinflusst die Simulation mathematisch: <strong>Klimawandel</strong> reduziert Erträge, <strong>Bevölkerungswachstum</strong> erhöht die Nachfrage, <strong>Technologie</strong> steigert die Effizienz und <strong>wirtschaftliche Instabilität</strong> erhöht die Volatilität. Die Ergebnisse zeigen 10-Jahres-Projektionen mit Konfidenzintervallen.\n            </p>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"panel-content\">\n        <div v-if=\"hasError\" class=\"error-container\">\n          <ErrorDisplay\n            :error=\"error\"\n            title=\"Fehler in der Simulation\"\n            :show-retry=\"true\"\n            @retry=\"runSimulation\"\n          />\n        </div>\n\n        <div v-else-if=\"isLoading\" class=\"loading-container\">\n          <LoadingSpinner size=\"lg\" />\n          <p class=\"loading-text\">Simulation läuft...</p>\n        </div>\n\n        <div v-else class=\"simulation-content\">\n          <!-- Scenario Selection -->\n          <div class=\"scenario-section\">\n            <h3 class=\"section-title\">Szenario auswählen</h3>\n            <div class=\"scenario-grid\">\n              <div\n                v-for=\"scenario in availableScenarios\"\n                :key=\"scenario.id\"\n                class=\"scenario-card\"\n                :class=\"{\n                  'scenario-active': selectedScenario === scenario.id\n                }\"\n                @click=\"handleScenarioSelect(scenario.id)\"\n              >\n                <div class=\"scenario-icon\">{{ scenario.icon }}</div>\n                <h4 class=\"scenario-name\">{{ scenario.name }}</h4>\n                <p class=\"scenario-description\">{{ scenario.description }}</p>\n              </div>\n            </div>\n          </div>\n\n          <!-- Scenario Configuration -->\n          <div class=\"config-section\">\n            <h3 class=\"section-title\">Parameter-Konfiguration</h3>\n            <div class=\"config-grid\">\n              <div class=\"config-item\">\n                <div class=\"slider-header\">\n                  <label>Klimawandel-Intensität</label>\n                  <span class=\"slider-value\">{{ scenarioConfig.climateChange.toFixed(1) }}</span>\n                </div>\n                <div class=\"slider-description\">{{ getSliderDescription('climate', scenarioConfig.climateChange) }}</div>\n                <RangeSlider\n                  v-model=\"scenarioConfig.climateChange\"\n                  :min=\"0.5\"\n                  :max=\"1.5\"\n                  :step=\"0.1\"\n                />\n              </div>\n              \n              <div class=\"config-item\">\n                <div class=\"slider-header\">\n                  <label>Bevölkerungswachstum</label>\n                  <span class=\"slider-value\">{{ scenarioConfig.populationGrowth.toFixed(1) }}</span>\n                </div>\n                <div class=\"slider-description\">{{ getSliderDescription('population', scenarioConfig.populationGrowth) }}</div>\n                <RangeSlider\n                  v-model=\"scenarioConfig.populationGrowth\"\n                  :min=\"0.5\"\n                  :max=\"2.0\"\n                  :step=\"0.1\"\n                />\n              </div>\n              \n              <div class=\"config-item\">\n                <div class=\"slider-header\">\n                  <label>Technologiefortschritt</label>\n                  <span class=\"slider-value\">{{ scenarioConfig.techProgress.toFixed(1) }}</span>\n                </div>\n                <div class=\"slider-description\">{{ getSliderDescription('tech', scenarioConfig.techProgress) }}</div>\n                <RangeSlider\n                  v-model=\"scenarioConfig.techProgress\"\n                  :min=\"0.5\"\n                  :max=\"2.0\"\n                  :step=\"0.1\"\n                />\n              </div>\n              \n              <div class=\"config-item\">\n                <div class=\"slider-header\">\n                  <label>Wirtschaftliche Stabilität</label>\n                  <span class=\"slider-value\">{{ scenarioConfig.economicGrowth.toFixed(1) }}</span>\n                </div>\n                <div class=\"slider-description\">{{ getSliderDescription('economic', scenarioConfig.economicGrowth) }}</div>\n                <RangeSlider\n                  v-model=\"scenarioConfig.economicGrowth\"\n                  :min=\"0.5\"\n                  :max=\"1.8\"\n                  :step=\"0.1\"\n                />\n              </div>\n            </div>\n            \n            <div class=\"config-actions\">\n              <div class=\"action-buttons\">\n                <BaseButton :disabled=\"isLoading\" variant=\"primary\" @click=\"runSimulation\">\n                  <LoadingSpinner v-if=\"isLoading\" size=\"sm\" />\n                  {{ isLoading ? 'Simuliert...' : 'Simulation starten' }}\n                </BaseButton>\n                \n                <BaseButton variant=\"outline\" @click=\"resetConfig\">\n                  Zurücksetzen\n                </BaseButton>\n              </div>\n              \n              <div v-if=\"hasConfigChanged\" class=\"config-changed-indicator\">\n                ⚠️ Parameter geändert - Simulation neu starten\n              </div>\n            </div>\n          </div>\n\n          <!-- Simulation Results -->\n          <div v-if=\"simulationResults\" class=\"results-section\">\n            <div class=\"results-header\">\n              <h3 class=\"section-title\">Simulationsergebnisse</h3>\n              <div class=\"results-meta\">\n                <span class=\"meta-item\">\n                  <strong>Szenario:</strong> {{ simulationResults.scenario }}\n                </span>\n                <span class=\"meta-item\">\n                  <strong>Methode:</strong> {{ simulationResults.dataSource }}\n                </span>\n                <span v-if=\"simulationResults.simulationDetails\" class=\"meta-item\">\n                  <strong>Details:</strong> \n                  {{ simulationResults.simulationDetails.totalPaths }} Pfade, \n                  {{ simulationResults.simulationDetails.confidenceLevel }} Konfidenz, \n                  {{ simulationResults.simulationDetails.timeHorizon }}\n                </span>\n              </div>\n            </div>\n            \n            <div class=\"results-grid\">\n              <div class=\"result-card\">\n                <div class=\"result-header\">\n                  <h4>Produktionsänderung</h4>\n                  <span class=\"result-icon\">🌾</span>\n                </div>\n                <div class=\"result-value\" :class=\"getChangeClass(simulationResults.productionChange)\">\n                  {{ formatChange(simulationResults.productionChange) }}%\n                </div>\n                <p class=\"result-description\">\n                  {{ getProductionDescription(simulationResults.productionChange) }}\n                </p>\n              </div>\n              \n              <div class=\"result-card\">\n                <div class=\"result-header\">\n                  <h4>Ernährungssicherheit</h4>\n                  <span class=\"result-icon\">🍽️</span>\n                </div>\n                <div class=\"result-value\" :class=\"getFoodSecurityClass(simulationResults.foodSecurity)\">\n                  {{ simulationResults.foodSecurity }}%\n                </div>\n                <p class=\"result-description\">\n                  {{ getFoodSecurityDescription(simulationResults.foodSecurity) }}\n                </p>\n              </div>\n              \n              <div class=\"result-card\">\n                <div class=\"result-header\">\n                  <h4>Umweltauswirkung</h4>\n                  <span class=\"result-icon\">🌍</span>\n                </div>\n                <div class=\"result-value\" :class=\"getEnvironmentClass(simulationResults.environmentImpact)\">\n                  {{ formatChange(simulationResults.environmentImpact) }}%\n                </div>\n                <p class=\"result-description\">\n                  {{ getEnvironmentDescription(simulationResults.environmentImpact) }}\n                </p>\n              </div>\n              \n              <div class=\"result-card\">\n                <div class=\"result-header\">\n                  <h4>Wirtschaftlicher Effekt</h4>\n                  <span class=\"result-icon\">💰</span>\n                </div>\n                <div class=\"result-value\" :class=\"getChangeClass(simulationResults.economicImpact)\">\n                  {{ formatChange(simulationResults.economicImpact) }}%\n                </div>\n                <p class=\"result-description\">\n                  {{ getEconomicDescription(simulationResults.economicImpact) }}\n                </p>\n              </div>\n            </div>\n\n            <!-- Simulation Chart -->\n            <div class=\"chart-container\" data-tour=\"simulation-chart\">\n              <SimulationChart\n                :data=\"simulationResults.timeSeriesData\"\n                :config=\"chartConfig\"\n                @scenario-select=\"handleScenarioSelect\"\n              />\n            </div>\n          </div>\n\n          <!-- Empty State -->\n          <div v-if=\"!simulationResults && !isLoading\" class=\"empty-state\">\n            <div class=\"empty-icon\">⚙️</div>\n            <h3>Simulation bereit</h3>\n            <p>Konfigurieren Sie die Parameter und starten Sie eine Simulation.</p>\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted } from 'vue'\nimport { useErrorHandling } from '@/composables/useErrorHandling'\nimport ErrorBoundary from '@/components/ui/ErrorBoundary.vue'\nimport ErrorDisplay from '@/components/ui/ErrorDisplay.vue'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner.vue'\nimport BaseButton from '@/components/ui/BaseButton.vue'\nimport RangeSlider from '@/components/ui/RangeSlider.vue'\nimport SimulationChart from '@/components/visualizations/SimulationChart.vue'\n\n// Composables\nconst { handleError: handleErrorUtil, wrapAsync } = useErrorHandling()\n\n// Reactive state\nconst isLoading = ref(false)\nconst error = ref(null)\nconst simulationResults = ref(null)\nconst selectedScenario = ref('climate_shock')\nconst hasConfigChanged = ref(false)\nconst lastAppliedConfig = ref(null)\n\nconst scenarioConfig = ref({\n  climateChange: 1.0,\n  populationGrowth: 1.2,\n  techProgress: 1.1,\n  economicGrowth: 1.5\n})\n\n// Computed properties\nconst hasError = computed(() => error.value !== null)\n\n\nconst availableScenarios = computed(() => [\n  { \n    id: 'climate_shock', \n    name: 'Klimaschock', \n    description: 'Extreme Wetterereignisse und Klimawandel',\n    icon: '🌡️',\n    sliderPreset: {\n      climateChange: 1.4,\n      populationGrowth: 1.1,\n      techProgress: 0.9,\n      economicGrowth: 0.8\n    }\n  },\n  { \n    id: 'population_pressure', \n    name: 'Bevölkerungsdruck', \n    description: 'Schnelles Bevölkerungswachstum vs. Produktionskapazität',\n    icon: '👥',\n    sliderPreset: {\n      climateChange: 1.1,\n      populationGrowth: 1.8,\n      techProgress: 1.1,\n      economicGrowth: 1.3\n    }\n  },\n  { \n    id: 'tech_revolution', \n    name: 'Technologie-Revolution', \n    description: 'Precision Farming und Biotechnologie',\n    icon: '🔬',\n    sliderPreset: {\n      climateChange: 0.9,\n      populationGrowth: 1.2,\n      techProgress: 1.8,\n      economicGrowth: 1.6\n    }\n  },\n  { \n    id: 'trade_disruption', \n    name: 'Handelsdisruption', \n    description: 'Geopolitische Spannungen und Handelskriege',\n    icon: '📈',\n    sliderPreset: {\n      climateChange: 1.2,\n      populationGrowth: 1.1,\n      techProgress: 1.0,\n      economicGrowth: 0.7\n    }\n  },\n  { \n    id: 'custom', \n    name: 'Benutzerdefiniert', \n    description: 'Eigene Parameter-Kombination',\n    icon: '⚙️',\n    sliderPreset: {\n      climateChange: 1.0,\n      populationGrowth: 1.0,\n      techProgress: 1.0,\n      economicGrowth: 1.0\n    }\n  }\n])\n\nconst chartConfig = computed(() => ({\n  width: 800,\n  height: 400,\n  margin: { top: 20, right: 30, bottom: 40, left: 80 },\n  showConfidenceInterval: true,\n  showScenarios: true,\n  interactive: true,\n  animated: true\n}))\n\n// Simulation calculation functions\nconst calculateStochasticPath = (baseValue, trend, volatility, steps, deltaT = 1) => {\n  const path = [baseValue]\n  let currentValue = baseValue\n  \n  for (let i = 1; i <= steps; i++) {\n    // Geometric Brownian Motion with mean reversion\n    const dt = deltaT\n    const randomShock = (Math.random() - 0.5) * 2 // Normal-ish distribution\n    const meanReversion = 0.1 * (baseValue - currentValue) / baseValue\n    \n    const drift = trend + meanReversion\n    const diffusion = volatility * randomShock * Math.sqrt(dt)\n    \n    currentValue = currentValue * (1 + drift * dt + diffusion)\n    path.push(Math.max(0, currentValue)) // Prevent negative values\n  }\n  \n  return path\n}\n\nconst runMonteCarloSimulation = (config, simulations = 500) => {\n  const paths = []\n  const years = 10\n  const baseProduction = 1000000 // Base production in tons\n  \n  // Calculate trend based on slider values\n  const climateTrend = (config.climateChange - 1) * -0.03 // Negative climate impact\n  const populationTrend = (config.populationGrowth - 1) * 0.02 // Population drives demand\n  const techTrend = (config.techProgress - 1) * 0.04 // Tech improves efficiency\n  const economicTrend = (config.economicGrowth - 1) * 0.015 // Economic growth effect\n  \n  const totalTrend = climateTrend + populationTrend + techTrend + economicTrend\n  \n  // Calculate volatility based on uncertainty from factors\n  const baseVolatility = 0.1\n  const climateVolatility = Math.abs(config.climateChange - 1) * 0.08\n  const tradeVolatility = Math.abs(config.economicGrowth - 1) * 0.05\n  const totalVolatility = baseVolatility + climateVolatility + tradeVolatility\n  \n  // Run multiple simulations\n  for (let sim = 0; sim < simulations; sim++) {\n    const path = calculateStochasticPath(\n      baseProduction,\n      totalTrend,\n      totalVolatility,\n      years\n    )\n    paths.push(path)\n  }\n  \n  \n  return paths\n}\n\nconst calculateConfidenceIntervals = (paths, confidenceLevel = 0.9) => {\n  const steps = paths[0].length\n  const intervals = []\n  \n  for (let step = 0; step < steps; step++) {\n    const values = paths.map(path => path[step]).sort((a, b) => a - b)\n    const lowerIndex = Math.floor((1 - confidenceLevel) / 2 * values.length)\n    const upperIndex = Math.floor((1 + confidenceLevel) / 2 * values.length)\n    \n    intervals.push({\n      mean: values.reduce((sum, val) => sum + val, 0) / values.length,\n      lower: values[lowerIndex],\n      upper: values[upperIndex],\n      median: values[Math.floor(values.length / 2)]\n    })\n  }\n  \n  return intervals\n}\n\n// Methods\nconst runSimulation = wrapAsync(async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    // Get selected scenario for display purposes only\n    const scenario = availableScenarios.value.find(s => s.id === selectedScenario.value)\n    const scenarioName = scenario ? scenario.name : 'Benutzerdefiniert'\n    \n    // Simulate some delay for realism\n    await new Promise(resolve => setTimeout(resolve, 1500))\n    \n    const config = scenarioConfig.value\n    \n    // Run Monte Carlo simulation based on current slider values\n    const simulationPaths = runMonteCarloSimulation(config)\n    const confidenceIntervals = calculateConfidenceIntervals(simulationPaths)\n    \n    // Create baseline (neutral scenario with all sliders at 1.0)\n    const baselineConfig = {\n      climateChange: 1.0,\n      populationGrowth: 1.0,\n      techProgress: 1.0,\n      economicGrowth: 1.0\n    }\n    const baselinePaths = runMonteCarloSimulation(baselineConfig, 100)\n    const baselineIntervals = calculateConfidenceIntervals(baselinePaths)\n    const baselinePath = baselineIntervals.map(interval => interval.mean)\n    \n    // Calculate key metrics\n    const finalScenario = confidenceIntervals[confidenceIntervals.length - 1].mean\n    const finalBaseline = baselinePath[baselinePath.length - 1]\n    const productionChange = ((finalScenario - finalBaseline) / finalBaseline * 100)\n    \n    // Calculate derived metrics with more sophisticated formulas\n    const foodSecurity = Math.max(15, Math.min(100, \n      65 + productionChange * 0.3 - \n      Math.abs(config.climateChange - 1) * 20 +\n      (config.techProgress - 1) * 15\n    ))\n    \n    const environmentImpact = (\n      (config.climateChange - 1) * 30 +\n      (config.populationGrowth - 1) * 12 +\n      (config.techProgress - 1) * -15 + // Tech reduces impact\n      (config.economicGrowth - 1) * 8 +\n      (productionChange > 0 ? productionChange * 0.1 : 0) // Intensification\n    )\n    \n    const economicImpact = \n      productionChange * 0.8 + \n      (config.techProgress - 1) * 40 +\n      (config.economicGrowth - 1) * 50 -\n      Math.abs(environmentImpact) * 0.2 // Environmental costs\n    \n    // Prepare time series data\n    const currentYear = new Date().getFullYear()\n    const timeSeriesData = confidenceIntervals.map((interval, index) => ({\n      year: currentYear + index,\n      baseline: baselinePath[index],\n      scenario: interval.mean,\n      lower: interval.lower,\n      upper: interval.upper\n    }))\n    \n    simulationResults.value = {\n      productionChange: Math.round(productionChange * 10) / 10,\n      foodSecurity: Math.round(foodSecurity),\n      environmentImpact: Math.round(environmentImpact * 10) / 10,\n      economicImpact: Math.round(economicImpact * 10) / 10,\n      timeSeriesData,\n      config: { ...config },\n      scenario: scenarioName,\n      dataSource: `Monte Carlo Simulation (${simulationPaths.length} Pfade)`,\n      simulationDetails: {\n        totalPaths: simulationPaths.length,\n        confidenceLevel: '90%',\n        timeHorizon: '10 Jahre',\n        method: 'Geometrische Brownsche Bewegung'\n      }\n    }\n    \n    // Update last applied config and reset change indicator\n    lastAppliedConfig.value = { ...config }\n    hasConfigChanged.value = false\n    \n  } catch (err) {\n    error.value = err\n    console.error('Simulation error:', err)\n  } finally {\n    isLoading.value = false\n  }\n}, {\n  component: 'SimulationPanel',\n  operation: 'runSimulation'\n})\n\nconst resetConfig = () => {\n  const resetValues = {\n    climateChange: 1.0,\n    populationGrowth: 1.0,\n    techProgress: 1.0,\n    economicGrowth: 1.0\n  }\n  \n  scenarioConfig.value = { ...resetValues }\n  lastAppliedConfig.value = { ...resetValues }\n  simulationResults.value = null\n  hasConfigChanged.value = false\n  selectedScenario.value = 'custom'\n}\n\n// Watch for slider changes\nwatch(scenarioConfig, (newConfig) => {\n  // Only mark as changed if we have a reference config and values actually differ\n  if (lastAppliedConfig.value) {\n    const hasActualChanges = Object.keys(newConfig).some(key => {\n      return Math.abs(newConfig[key] - lastAppliedConfig.value[key]) > 0.05 // Allow small floating point differences\n    })\n    \n    hasConfigChanged.value = hasActualChanges\n    \n    if (hasActualChanges) {\n      simulationResults.value = null // Clear results when config actually changes\n    }\n  }\n}, { deep: true })\n\n// Load initial data\nonMounted(async () => {\n  // Pre-select first scenario and apply its preset\n  if (availableScenarios.value.length > 0) {\n    handleScenarioSelect(availableScenarios.value[0].id)\n  }\n})\n\nconst handleError = (err) => {\n  error.value = err\n  handleErrorUtil(err, {\n    component: 'SimulationPanel',\n    action: 'component_error'\n  })\n}\n\nconst handleScenarioSelect = (scenarioId) => {\n  selectedScenario.value = scenarioId\n  \n  // Apply scenario preset to sliders\n  const scenario = availableScenarios.value.find(s => s.id === scenarioId)\n  if (scenario && scenario.sliderPreset) {\n    scenarioConfig.value = { ...scenario.sliderPreset }\n    \n    // Update last applied config to track changes\n    lastAppliedConfig.value = { ...scenario.sliderPreset }\n    \n    // Clear previous results and reset change indicator\n    simulationResults.value = null\n    hasConfigChanged.value = false\n  }\n  \n  console.log('Scenario selected:', scenarioId, 'Sliders updated:', scenarioConfig.value)\n}\n\n// Helper methods\nconst formatChange = (value) => {\n  return value > 0 ? `+${value.toFixed(1)}` : value.toFixed(1)\n}\n\nconst getChangeClass = (value) => {\n  if (value > 0) return 'text-green-600 dark:text-green-400'\n  if (value < 0) return 'text-red-600 dark:text-red-400'\n  return 'text-gray-600 dark:text-gray-400'\n}\n\nconst getFoodSecurityClass = (value) => {\n  if (value >= 80) return 'text-green-600 dark:text-green-400'\n  if (value >= 60) return 'text-yellow-600 dark:text-yellow-400'\n  return 'text-red-600 dark:text-red-400'\n}\n\nconst getEnvironmentClass = (value) => {\n  if (value <= 0) return 'text-green-600 dark:text-green-400'\n  if (value <= 10) return 'text-yellow-600 dark:text-yellow-400'\n  return 'text-red-600 dark:text-red-400'\n}\n\n// Description helpers\nconst getProductionDescription = (value) => {\n  if (value > 10) return 'Starke Produktionssteigerung erwartet'\n  if (value > 0) return 'Moderate Produktionssteigerung'\n  if (value > -10) return 'Leichter Produktionsrückgang'\n  return 'Erheblicher Produktionsrückgang'\n}\n\nconst getFoodSecurityDescription = (value) => {\n  if (value >= 80) return 'Hohe Ernährungssicherheit'\n  if (value >= 60) return 'Mittlere Ernährungssicherheit'\n  if (value >= 40) return 'Niedrige Ernährungssicherheit'\n  return 'Kritische Ernährungslage'\n}\n\nconst getEnvironmentDescription = (value) => {\n  if (value <= 0) return 'Positive Umweltauswirkungen'\n  if (value <= 5) return 'Geringe Umweltbelastung'\n  if (value <= 15) return 'Mäßige Umweltbelastung'\n  return 'Hohe Umweltbelastung'\n}\n\nconst getEconomicDescription = (value) => {\n  if (value > 20) return 'Starke wirtschaftliche Vorteile'\n  if (value > 0) return 'Positive wirtschaftliche Effekte'\n  if (value > -10) return 'Geringe wirtschaftliche Verluste'\n  return 'Erhebliche wirtschaftliche Einbußen'\n}\n\nconst getSliderDescription = (type, value) => {\n  switch (type) {\n    case 'climate':\n      if (value < 0.9) return 'Milde Klimabedingungen'\n      if (value > 1.3) return 'Extreme Klimaereignisse'\n      return 'Normale Klimabedingungen'\n    \n    case 'population':\n      if (value < 0.9) return 'Schrumpfende Bevölkerung'\n      if (value > 1.5) return 'Schnelles Bevölkerungswachstum'\n      return 'Stabiles Bevölkerungswachstum'\n    \n    case 'tech':\n      if (value < 0.9) return 'Stagnierende Technologie'\n      if (value > 1.5) return 'Durchbruch-Innovationen'\n      return 'Stetiger Technologiefortschritt'\n    \n    case 'economic':\n      if (value < 0.8) return 'Wirtschaftskrise'\n      if (value > 1.4) return 'Wirtschaftsboom'\n      return 'Stabile Wirtschaftslage'\n    \n    default:\n      return ''\n  }\n}\n</script>\n\n<style scoped>\n.simulation-panel {\n  @apply flex flex-col h-full bg-white dark:bg-gray-800 rounded-lg shadow-lg;\n}\n\n.panel-header {\n  @apply p-6 border-b border-gray-200 dark:border-gray-700;\n}\n\n.panel-title {\n  @apply text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2;\n}\n\n.panel-description {\n  @apply text-gray-600 dark:text-gray-400 mb-6;\n}\n\n.simulation-info {\n  @apply grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6;\n}\n\n.info-section {\n  @apply bg-gray-50 dark:bg-gray-900 rounded-lg p-4;\n}\n\n.info-title {\n  @apply text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3;\n}\n\n.info-text {\n  @apply text-sm text-gray-700 dark:text-gray-300 leading-relaxed;\n}\n\n.info-steps {\n  @apply space-y-3;\n}\n\n.step {\n  @apply flex items-start space-x-3;\n}\n\n.step-number {\n  @apply flex-shrink-0 w-6 h-6 bg-blue-600 dark:bg-blue-500 text-white text-xs font-bold rounded-full flex items-center justify-center;\n}\n\n.step-text {\n  @apply text-sm text-gray-700 dark:text-gray-300 leading-relaxed;\n}\n\n.panel-controls {\n  @apply p-6 bg-gray-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700;\n}\n\n.panel-content {\n  @apply flex-1 p-6 overflow-auto;\n}\n\n.simulation-content {\n  @apply space-y-8;\n}\n\n.config-section,\n.results-section {\n  @apply space-y-4;\n}\n\n.section-title {\n  @apply text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4;\n}\n\n.config-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 gap-6;\n}\n\n.config-item {\n  @apply space-y-2;\n}\n\n.slider-header {\n  @apply flex justify-between items-center;\n}\n\n.config-item label {\n  @apply text-sm font-medium text-gray-700 dark:text-gray-300;\n}\n\n.slider-value {\n  @apply text-sm font-bold text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 px-2 py-1 rounded;\n}\n\n.scenario-section {\n  @apply space-y-4 mb-8;\n}\n\n.scenario-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 gap-4;\n}\n\n.scenario-card {\n  @apply p-4 border border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer transition-all;\n  @apply hover:border-gray-300 dark:hover:border-gray-600 hover:shadow-md;\n}\n\n.scenario-active {\n  @apply border-blue-500 dark:border-blue-400 bg-blue-50 dark:bg-blue-900/20 shadow-md;\n}\n\n.scenario-icon {\n  @apply text-2xl mb-2;\n}\n\n.scenario-name {\n  @apply font-semibold text-gray-900 dark:text-gray-100 mb-1;\n}\n\n.scenario-description {\n  @apply text-sm text-gray-600 dark:text-gray-400;\n}\n\n.config-actions {\n  @apply flex flex-col space-y-3 pt-4;\n}\n\n.action-buttons {\n  @apply flex space-x-4;\n}\n\n.config-changed-indicator {\n  @apply text-sm text-orange-600 dark:text-orange-400 bg-orange-50 dark:bg-orange-900/20 px-3 py-2 rounded-lg border border-orange-200 dark:border-orange-800;\n}\n\n.slider-description {\n  @apply text-xs text-gray-500 dark:text-gray-400 mb-2 font-medium;\n}\n\n.results-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6;\n}\n\n.results-header {\n  @apply mb-6;\n}\n\n.results-meta {\n  @apply flex flex-wrap gap-4 mt-2 text-sm text-gray-600 dark:text-gray-400;\n}\n\n.meta-item {\n  @apply flex items-center gap-1;\n}\n\n.result-card {\n  @apply bg-gray-50 dark:bg-gray-900 rounded-lg p-4;\n}\n\n.result-header {\n  @apply flex items-center justify-between mb-3;\n}\n\n.result-card h4 {\n  @apply text-sm font-medium text-gray-700 dark:text-gray-300;\n}\n\n.result-icon {\n  @apply text-lg;\n}\n\n.result-value {\n  @apply text-2xl font-bold mb-2;\n}\n\n.result-description {\n  @apply text-xs text-gray-500 dark:text-gray-400;\n}\n\n.chart-container {\n  @apply w-full h-96 bg-gray-50 dark:bg-gray-900 rounded-lg p-4;\n}\n\n.error-container,\n.loading-container,\n.empty-state {\n  @apply flex flex-col items-center justify-center h-64;\n}\n\n.loading-text {\n  @apply mt-4 text-gray-600 dark:text-gray-400;\n}\n\n.empty-icon {\n  @apply text-6xl mb-4;\n}\n\n.empty-state h3 {\n  @apply text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2;\n}\n\n.empty-state p {\n  @apply text-gray-500 dark:text-gray-400;\n}\n</style>","<template>\n  <div class=\"ml-panel\">\n    <ErrorBoundary @error=\"handleError\">\n      <div class=\"panel-header\">\n        <h2 class=\"panel-title\">ML Prognosen</h2>\n        <p class=\"panel-description\">\n          Machine Learning Vorhersagen für landwirtschaftliche Produktion\n        </p>\n      </div>\n\n      <div class=\"panel-controls\">\n        <div class=\"filters-grid\">\n          <div class=\"filter-group\">\n            <label>Prognosentyp</label>\n            <SearchableSelect\n              v-model=\"selectedForecastType\"\n              :options=\"forecastTypeOptions\"\n              placeholder=\"Prognosentyp auswählen...\"\n              @update:model-value=\"loadAvailableForecasts\"\n            />\n          </div>\n          \n          <div class=\"filter-group\">\n            <label>Prognose</label>\n            <SearchableSelect\n              v-model=\"selectedForecast\"\n              :options=\"forecastOptions\"\n              placeholder=\"Prognose auswählen...\"\n              :disabled=\"availableForecasts.length === 0\"\n            />\n          </div>\n          \n          <div class=\"filter-group\">\n            <label>Modell</label>\n            <SearchableSelect\n              v-model=\"selectedModel\"\n              :options=\"modelOptions\"\n              placeholder=\"Modell auswählen...\"\n            />\n          </div>\n\n          <div class=\"filter-group\">\n            <label class=\"invisible\">Aktion</label>\n            <BaseButton :disabled=\"isLoading || !selectedForecast\" class=\"w-full\" @click=\"loadPredictions\">\n              <LoadingSpinner v-if=\"isLoading\" size=\"sm\" />\n              {{ isLoading ? 'Lädt...' : 'Prognosen laden' }}\n            </BaseButton>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"panel-content\">\n        <div v-if=\"hasError\" class=\"error-container\">\n          <ErrorDisplay\n            :error=\"error\"\n            title=\"Fehler beim Laden der ML-Prognosen\"\n            :show-retry=\"true\"\n            @retry=\"loadPredictions\"\n          />\n        </div>\n\n        <div v-else-if=\"isLoading\" class=\"loading-container\">\n          <LoadingSpinner size=\"lg\" />\n          <p class=\"loading-text\">Lade ML-Prognosen...</p>\n        </div>\n\n        <div v-else-if=\"predictions.length > 0\" class=\"predictions-content\">\n          <!-- Forecast Info -->\n          <div v-if=\"forecastData\" class=\"forecast-info\">\n            <h3 class=\"info-title\">{{ getFormattedForecastTitle() }}</h3>\n            <div class=\"info-grid\">\n              <div class=\"info-item\">\n                <span class=\"info-label\">Einheit:</span>\n                <span class=\"info-value\">{{ forecastData.unit || '1000 t' }}</span>\n              </div>\n              <div class=\"info-item\">\n                <span class=\"info-label\">Prognosezeitraum:</span>\n                <span class=\"info-value\">2023 - 2035</span>\n              </div>\n              <div class=\"info-item\">\n                <span class=\"info-label\">Modelltyp:</span>\n                <span class=\"info-value\">{{ getModelLabel(selectedModel) }}</span>\n              </div>\n              <div class=\"info-item\">\n                <span class=\"info-label\">Konfidenzintervall:</span>\n                <span class=\"info-value\">95%</span>\n              </div>\n            </div>\n          </div>\n\n          <!-- Model Performance -->\n          <div class=\"model-stats\">\n            <h3 class=\"stats-title\">Modell-Performance</h3>\n            <div v-if=\"modelStats.r2 && parseFloat(modelStats.r2) < 0\" class=\"model-warning\">\n              <p class=\"warning-title\">⚠️ Warnung: Schlechte Modellperformance</p>\n              <p class=\"warning-text\">\n                Das lineare Modell ist für diese Daten ungeeignet. Bitte wechseln Sie zum polynomialen oder Ensemble-Modell für bessere Vorhersagen.\n              </p>\n            </div>\n            <!-- Ensemble Info -->\n            <div v-if=\"selectedModel === 'ensemble'\" class=\"ensemble-info\">\n              <p class=\"text-sm text-blue-600 dark:text-blue-400 mb-3\">\n                ℹ️ Ensemble-Modell kombiniert Linear- und Polynomialregressionen für robustere Vorhersagen.\n              </p>\n            </div>\n            \n            <div class=\"stats-grid\">\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">R² Score</div>\n                <div class=\"stat-value\" :class=\"getR2Class(modelStats.r2)\">{{ modelStats.r2 }}</div>\n                <div v-if=\"selectedModel === 'ensemble'\" class=\"stat-help text-xs text-gray-500 mt-1\">\n                  Durchschnitt der Einzelmodelle\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">RMSE</div>\n                <div class=\"stat-value\">{{ modelStats.rmse }}</div>\n                <div v-if=\"selectedModel === 'ensemble'\" class=\"stat-help text-xs text-gray-500 mt-1\">\n                  Gemittelte Wurzel der mittleren Quadratfehler\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">MAE</div>\n                <div class=\"stat-value\">{{ modelStats.mae }}</div>\n                <div v-if=\"selectedModel === 'ensemble'\" class=\"stat-help text-xs text-gray-500 mt-1\">\n                  Gemittelter mittlerer absoluter Fehler\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">{{ selectedModel === 'ensemble' ? 'Übereinstimmung' : 'Genauigkeit' }}</div>\n                <div class=\"stat-value text-green-600\">{{ modelStats.accuracy }}%</div>\n                <div v-if=\"selectedModel === 'ensemble'\" class=\"stat-help text-xs text-gray-500 mt-1\">\n                  Modellübereinstimmung zwischen Linear- und Polynomialregression\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Predictions Chart -->\n          <div class=\"chart-container\" data-tour=\"ml-chart\">\n            <MLChart\n              :data=\"chartData\"\n              :config=\"chartConfig\"\n              @prediction-select=\"handlePredictionSelect\"\n              @confidence-toggle=\"handleConfidenceToggle\"\n            />\n          </div>\n\n          <!-- Insights Section -->\n          <div v-if=\"forecastData\" class=\"insights-section\">\n            <h3 class=\"insights-title\">Prognose-Einblicke</h3>\n            <div class=\"insights-grid\">\n              <div class=\"insight-card\">\n                <div class=\"insight-icon\">📈</div>\n                <div class=\"insight-content\">\n                  <h4>Wachstumstrend</h4>\n                  <p>{{ getGrowthInsight() }}</p>\n                </div>\n              </div>\n              <div class=\"insight-card\">\n                <div class=\"insight-icon\">🎯</div>\n                <div class=\"insight-content\">\n                  <h4>Prognosegenauigkeit</h4>\n                  <p>{{ getAccuracyInsight() }}</p>\n                </div>\n              </div>\n              <div class=\"insight-card\">\n                <div class=\"insight-icon\">⚠️</div>\n                <div class=\"insight-content\">\n                  <h4>Unsicherheitsfaktoren</h4>\n                  <p>{{ getUncertaintyInsight() }}</p>\n                </div>\n              </div>\n              <div class=\"insight-card\">\n                <div class=\"insight-icon\">🌍</div>\n                <div class=\"insight-content\">\n                  <h4>Globale Bedeutung</h4>\n                  <p>{{ getGlobalInsight() }}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Predictions Table -->\n          <div class=\"predictions-table\">\n            <h3 class=\"table-title\">Detaillierte Prognosen</h3>\n            <div class=\"table-container\">\n              <table class=\"predictions-table-element\">\n                <thead>\n                  <tr>\n                    <th>Jahr</th>\n                    <th>Prognose</th>\n                    <th>Konfidenzintervall</th>\n                    <th>Trend</th>\n                    <th>Zuverlässigkeit</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr v-for=\"prediction in predictions\" :key=\"prediction.year\">\n                    <td>{{ prediction.year }}</td>\n                    <td>{{ formatValue(prediction.predicted_value) }}</td>\n                    <td>\n                      {{ formatValue(prediction.confidence_lower) }} - \n                      {{ formatValue(prediction.confidence_upper) }}\n                    </td>\n                    <td>\n                      <span :class=\"getTrendClass(prediction.trend)\">\n                        {{ formatTrend(prediction.trend) }}\n                      </span>\n                    </td>\n                    <td>\n                      <div class=\"reliability-bar\">\n                        <div \n                          class=\"reliability-fill\"\n                          :style=\"{ width: `${prediction.reliability}%` }\"\n                          :class=\"getReliabilityClass(prediction.reliability)\"\n                        ></div>\n                        <span class=\"reliability-text\">{{ prediction.reliability }}%</span>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n        <div v-else class=\"empty-state\">\n          <div class=\"empty-icon\">🤖</div>\n          <h3>Keine Prognosen geladen</h3>\n          <p>Wählen Sie einen Prognosentyp und eine spezifische Prognose aus, dann klicken Sie auf \"Prognosen laden\".</p>\n        </div>\n      </div>\n    </ErrorBoundary>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted } from 'vue'\nimport { useDataStore } from '@/stores/useDataStore'\nimport { useErrorHandling } from '@/composables/useErrorHandling'\nimport { getMLGermanName, productMappings } from '@/utils/productMappings'\nimport { formatAgricultureValue } from '@/utils/formatters'\nimport ErrorBoundary from '@/components/ui/ErrorBoundary.vue'\nimport ErrorDisplay from '@/components/ui/ErrorDisplay.vue'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner.vue'\nimport BaseButton from '@/components/ui/BaseButton.vue'\nimport SearchableSelect from '@/components/ui/SearchableSelect.vue'\nimport MLChart from '@/components/visualizations/MLChart.vue'\n\n// Store and composables\nconst dataStore = useDataStore()\nconst { handleError: handleErrorUtil, wrapAsync } = useErrorHandling()\n\n// Reactive state\nconst selectedForecastType = ref('global')\nconst selectedForecast = ref('') // Will be set after loading forecasts\nconst selectedModel = ref('linear') // Will be updated based on model performance\nconst predictions = ref([])\nconst modelStats = ref({})\nconst isLoading = ref(false)\nconst error = ref(null)\nconst forecastData = ref(null)\nconst availableForecasts = ref([])\n\n// Computed properties\nconst hasError = computed(() => error.value !== null)\n\nconst forecastTypeOptions = computed(() => [\n  { value: 'global', label: 'Globale Prognosen' },\n  { value: 'regional', label: 'Regionale Prognosen' },\n  { value: 'country', label: 'Länder-spezifische Prognosen' }\n])\n\nconst forecastOptions = computed(() => {\n  console.log('Available forecasts:', availableForecasts.value)\n  return availableForecasts.value.map(forecast => {\n    const value = forecast.file.replace('.json', '')\n    let label = forecast.title || forecast.scenario || forecast.file\n    \n    // Extract product name from the filename and get German translation\n    if (typeof label === 'string') {\n      // Extract product part from filename (remove prefix and suffix)\n      // Handle patterns like: global_maize_and_products_forecast, world_cereals___excluding_beer_forecast, etc.\n      const cleanValue = value.replace(/_forecast$/, '')\n      let productName = ''\n      let regionPrefix = ''\n      \n      if (cleanValue.startsWith('global_')) {\n        productName = cleanValue.replace('global_', '')\n        regionPrefix = 'Globale'\n      } else if (cleanValue.startsWith('world_')) {\n        productName = cleanValue.replace('world_', '')\n        regionPrefix = 'Welt'\n      } else {\n        // Regional or country forecasts - find the last part that matches a product\n        const parts = cleanValue.split('_')\n        // Try to find product pattern from the end\n        for (let i = parts.length - 1; i >= 1; i--) {\n          const potentialProduct = parts.slice(i).join('_')\n          if (productMappings[potentialProduct] || potentialProduct.includes('and') || potentialProduct.includes('&')) {\n            productName = potentialProduct\n            regionPrefix = parts.slice(0, i).join('_').replace(/_/g, ' ')\n              .split(' ')\n              .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n              .join(' ')\n            break\n          }\n        }\n        \n        // Fallback: assume last part is product\n        if (!productName && parts.length > 1) {\n          productName = parts[parts.length - 1]\n          regionPrefix = parts.slice(0, -1).join('_').replace(/_/g, ' ')\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ')\n        }\n      }\n      \n      if (productName) {\n        const germanProductName = getMLGermanName(productName)\n        label = `${regionPrefix} ${germanProductName} Prognose`\n      }\n    }\n    \n    return {\n      value,\n      label\n    }\n  })\n})\n\nconst modelOptions = computed(() => [\n  { value: 'linear', label: 'Lineare Regression' },\n  { value: 'polynomial', label: 'Polynomiale Regression' },\n  { value: 'ensemble', label: 'Ensemble (Linear + Polynomial)' }\n])\n\nconst chartConfig = computed(() => ({\n  width: '100%',\n  height: 500,\n  margin: { top: 20, right: 30, bottom: 40, left: 80 },\n  showConfidenceInterval: true,\n  showHistorical: true,\n  showTrend: true,\n  interactive: true,\n  animated: true\n}))\n\n// Methods\nconst loadPredictions = wrapAsync(async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    console.log('Loading forecast:', selectedForecast.value)\n    // Load ML forecast data\n    const data = await dataStore.loadMLForecast(selectedForecast.value)\n    console.log('ML Forecast data loaded:', data)\n    \n    if (data) {\n      forecastData.value = data\n      \n      // Log model performance for user information (no automatic switching)\n      if (data.model_performance) {\n        const linearR2 = data.model_performance.linear?.r2_score || -999\n        const polyR2 = data.model_performance.polynomial?.r2_score || -999\n        \n        console.log('📊 MLPanel: Model performance:', {\n          linear: linearR2,\n          polynomial: polyR2,\n          currentModel: selectedModel.value\n        })\n      }\n      \n      // Extract predictions based on selected model\n      let forecastArray = []\n      if (selectedModel.value === 'ensemble' && data.ensemble_forecasts) {\n        console.log('Using ensemble forecasts')\n        forecastArray = data.ensemble_forecasts\n      } else if (data.forecasts && data.forecasts[selectedModel.value]) {\n        console.log(`Using ${selectedModel.value} forecasts`)\n        forecastArray = data.forecasts[selectedModel.value]\n      } else {\n        console.warn('No forecast data found for model:', selectedModel.value)\n        console.log('Available forecast keys:', data.forecasts ? Object.keys(data.forecasts) : 'No forecasts object')\n      }\n      \n      // Combine with historical data if available\n      const historicalData = data.historical_data || []\n      const lastHistoricalYear = historicalData.length > 0 \n        ? historicalData[historicalData.length - 1].year \n        : new Date().getFullYear() - 1\n      \n      // Transform forecast data\n      predictions.value = forecastArray.map(pred => {\n        const isEnsemble = selectedModel.value === 'ensemble'\n        const predictedValue = isEnsemble ? pred.ensemble_mean : pred.value\n        \n        console.log(`🔍 MLPanel: Processing prediction for ${pred.year}:`, {\n          isEnsemble,\n          originalValue: pred.value,\n          ensembleMean: pred.ensemble_mean,\n          predictedValue,\n          confidenceLower: pred.confidence_lower,\n          confidenceUpper: pred.confidence_upper\n        })\n        \n        return {\n          year: pred.year,\n          predicted_value: predictedValue,\n          confidence_lower: isEnsemble ? pred.model_min : pred.confidence_lower,\n          confidence_upper: isEnsemble ? pred.model_max : pred.confidence_upper,\n          trend: calculateTrend(pred, lastHistoricalYear),\n          reliability: isEnsemble \n            ? (pred.model_agreement * 100) \n            : (100 - pred.uncertainty_percent),\n          uncertainty_level: pred.uncertainty_level || getUncertaintyLevel(pred.uncertainty_percent),\n          model: selectedModel.value\n        }\n      })\n      \n      // Extract model performance stats\n      if (data.model_performance && data.model_performance[selectedModel.value]) {\n        const perf = data.model_performance[selectedModel.value]\n        modelStats.value = {\n          accuracy: ((perf.r2_score || 0) * 100).toFixed(1),\n          rmse: Math.sqrt(perf.mse || 0).toFixed(0),\n          mae: (perf.mae || 0).toFixed(0),\n          r2: (perf.r2_score || 0).toFixed(3)\n        }\n      } else if (selectedModel.value === 'ensemble' && data.model_performance) {\n        // For ensemble: calculate average performance from individual models\n        const models = Object.values(data.model_performance)\n        if (models.length > 0) {\n          const avgR2 = models.reduce((sum, m) => sum + (m.r2_score || 0), 0) / models.length\n          const avgMSE = models.reduce((sum, m) => sum + (m.mse || 0), 0) / models.length\n          const avgMAE = models.reduce((sum, m) => sum + (m.mae || 0), 0) / models.length\n          \n          modelStats.value = {\n            accuracy: (avgR2 * 100).toFixed(1),\n            rmse: Math.sqrt(avgMSE).toFixed(0),\n            mae: avgMAE.toFixed(0),\n            r2: avgR2.toFixed(3)\n          }\n        } else {\n          // Fallback for ensemble without individual model performance\n          const avgAgreement = predictions.value.reduce((sum, p) => sum + (p.reliability || 0), 0) / predictions.value.length\n          modelStats.value = {\n            accuracy: avgAgreement.toFixed(1),\n            rmse: 'Ensemble',\n            mae: 'Kombination',\n            r2: 'Gemittelt'\n          }\n        }\n      } else {\n        // Unknown model or missing data\n        modelStats.value = {\n          accuracy: 'N/A',\n          rmse: 'N/A',\n          mae: 'N/A',\n          r2: 'N/A'\n        }\n      }\n    }\n    \n  } catch (err) {\n    error.value = err\n    predictions.value = []\n    modelStats.value = {}\n  } finally {\n    isLoading.value = false\n  }\n}, {\n  component: 'MLPanel',\n  operation: 'loadPredictions'\n})\n\n// Helper functions\nconst calculateTrend = (prediction, baseYear) => {\n  if (!prediction.years_ahead || prediction.years_ahead === 0) return 0\n  // Simple trend calculation - could be enhanced\n  return ((prediction.value || prediction.ensemble_mean || 0) / 100000 - 1) * 10\n}\n\nconst getUncertaintyLevel = (uncertaintyPercent) => {\n  if (uncertaintyPercent < 30) return 'low'\n  if (uncertaintyPercent < 60) return 'medium'\n  return 'high'\n}\n\nconst handleError = (err) => {\n  error.value = err\n  handleErrorUtil(err, {\n    component: 'MLPanel',\n    action: 'component_error'\n  })\n}\n\nconst handlePredictionSelect = (prediction) => {\n  console.log('Prediction selected:', prediction)\n  // TODO: Show prediction details\n}\n\nconst handleConfidenceToggle = (showConfidence) => {\n  console.log('Confidence toggle:', showConfidence)\n  // TODO: Update chart visibility\n}\n\n// Helper methods\nconst getFormattedForecastTitle = () => {\n  if (!forecastData.value || !selectedForecast.value) {\n    return 'Produktionsprognose'\n  }\n  \n  // Extract product name from selected forecast\n  const productMatch = selectedForecast.value.match(/(?:global_|world_|[a-z_]+_)?([a-z_&]+)(?:_forecast)?$/i)\n  if (productMatch) {\n    const productName = productMatch[1]\n    const germanProductName = getMLGermanName(productName)\n    \n    if (selectedForecast.value.startsWith('global_')) {\n      return `Globale ${germanProductName} Produktionsprognose`\n    } else if (selectedForecast.value.startsWith('world_')) {\n      return `Welt ${germanProductName} Produktionsprognose`\n    } else {\n      // Regional or country forecasts\n      const regionPart = selectedForecast.value.replace(`_${productName}_forecast`, '').replace(`_${productName}`, '').replace(/_/g, ' ')\n      const formattedRegion = regionPart\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ')\n      return `${formattedRegion} ${germanProductName} Produktionsprognose`\n    }\n  }\n  \n  return forecastData.value.title || 'Produktionsprognose'\n}\n\nconst formatValue = (value) => {\n  return formatAgricultureValue(value, { unit: '1000 t', showUnit: false })\n}\n\nconst formatTrend = (trend) => {\n  const sign = trend > 0 ? '+' : ''\n  return `${sign}${trend.toFixed(1)}%`\n}\n\nconst getTrendClass = (trend) => {\n  if (trend > 0) return 'text-green-600'\n  if (trend < 0) return 'text-red-600'\n  return 'text-gray-600'\n}\n\nconst getReliabilityClass = (reliability) => {\n  if (reliability >= 90) return 'bg-green-500'\n  if (reliability >= 75) return 'bg-yellow-500'\n  return 'bg-red-500'\n}\n\nconst getModelLabel = (model) => {\n  const labels = {\n    linear: 'Lineare Regression',\n    polynomial: 'Polynomiale Regression',\n    ensemble: 'Ensemble-Modell'\n  }\n  return labels[model] || model\n}\n\nconst getStatsExplanation = (model) => {\n  if (model === 'ensemble') {\n    return {\n      r2: 'Durchschnittlicher R² Score der Einzelmodelle',\n      rmse: 'Durchschnittliche Wurzel der mittleren Quadratfehler',\n      mae: 'Durchschnittlicher mittlerer absoluter Fehler',\n      accuracy: 'Durchschnittliche Modellübereinstimmung (%)'\n    }\n  } else {\n    return {\n      r2: 'Bestimmtheitsmaß (R²) - Erklärt Varianz',\n      rmse: 'Wurzel der mittleren Quadratfehler',\n      mae: 'Mittlerer absoluter Fehler',\n      accuracy: 'Modellgenauigkeit basierend auf R²'\n    }\n  }\n}\n\nconst getR2Class = (r2) => {\n  const value = parseFloat(r2)\n  if (isNaN(value)) return ''\n  if (value < 0) return 'text-red-800 font-bold' // Negative R² is very bad\n  if (value >= 0.8) return 'text-green-600'\n  if (value >= 0.6) return 'text-yellow-600'\n  if (value >= 0.3) return 'text-orange-600'\n  return 'text-red-600'\n}\n\n// Insight functions\nconst getGrowthInsight = () => {\n  if (!predictions.value.length || !forecastData.value) return 'Keine Daten verfügbar'\n  \n  const firstPred = predictions.value[0].predicted_value\n  const lastPred = predictions.value[predictions.value.length - 1].predicted_value\n  const growthPercent = ((lastPred - firstPred) / firstPred * 100).toFixed(1)\n  \n  if (growthPercent > 0) {\n    return `Die Produktion wird voraussichtlich um ${growthPercent}% bis 2035 steigen.`\n  } else {\n    return `Die Produktion wird voraussichtlich um ${Math.abs(growthPercent)}% bis 2035 sinken.`\n  }\n}\n\nconst getAccuracyInsight = () => {\n  if (!modelStats.value.r2) return 'Keine Genauigkeitsdaten verfügbar'\n  \n  const r2 = parseFloat(modelStats.value.r2)\n  if (r2 < 0) {\n    return `WARNUNG: Das ${selectedModel.value === 'linear' ? 'lineare' : 'polynomiale'} Modell ist ungeeignet für diese Daten (R² = ${r2.toFixed(3)}). Die Vorhersagen sind sehr unzuverlässig. Versuchen Sie ein anderes Modell.`\n  } else if (r2 >= 0.8) {\n    return 'Das Modell zeigt eine sehr hohe Prognosegenauigkeit mit starker Korrelation zu historischen Daten.'\n  } else if (r2 >= 0.6) {\n    return 'Das Modell zeigt eine gute Prognosegenauigkeit mit moderater Korrelation zu historischen Daten.'\n  } else if (r2 >= 0.3) {\n    return 'Das Modell zeigt moderate Genauigkeit. Die Prognosen sollten als grobe Schätzungen betrachtet werden.'\n  } else {\n    return 'Das Modell zeigt begrenzte Genauigkeit. Die Prognosen sollten mit großer Vorsicht interpretiert werden.'\n  }\n}\n\nconst getUncertaintyInsight = () => {\n  if (!predictions.value.length) return 'Keine Unsicherheitsdaten verfügbar'\n  \n  const avgUncertainty = predictions.value\n    .filter(p => p.uncertainty_level)\n    .reduce((sum, p) => {\n      const level = p.uncertainty_level === 'low' ? 1 : p.uncertainty_level === 'medium' ? 2 : 3\n      return sum + level\n    }, 0) / predictions.value.length\n  \n  if (avgUncertainty < 1.5) {\n    return 'Die Prognosen haben eine niedrige Unsicherheit und sind relativ zuverlässig.'\n  } else if (avgUncertainty < 2.5) {\n    return 'Die Prognosen haben eine moderate Unsicherheit. Langfristige Vorhersagen sollten regelmäßig aktualisiert werden.'\n  } else {\n    return 'Die Prognosen haben eine hohe Unsicherheit, besonders für spätere Jahre. Externe Faktoren können die Ergebnisse stark beeinflussen.'\n  }\n}\n\nconst getGlobalInsight = () => {\n  if (!selectedForecast.value) return 'Keine globalen Kontextdaten verfügbar'\n  \n  // Extract product name and get insights based on product type\n  const productMatch = selectedForecast.value.match(/(?:global_|world_|[a-z_]+_)?([a-z_&]+)(?:_forecast)?$/i)\n  if (productMatch) {\n    const productName = productMatch[1].toLowerCase()\n    \n    if (productName.includes('wheat')) {\n      return 'Weizen ist eines der wichtigsten Grundnahrungsmittel weltweit und ernährt Milliarden von Menschen.'\n    } else if (productName.includes('maize')) {\n      return 'Mais ist sowohl für die menschliche Ernährung als auch als Tierfutter von entscheidender Bedeutung.'\n    } else if (productName.includes('rice')) {\n      return 'Reis ist das Hauptnahrungsmittel für mehr als die Hälfte der Weltbevölkerung.'\n    } else if (productName.includes('milk')) {\n      return 'Milchprodukte sind eine wichtige Proteinquelle und unterstützen die Ernährungssicherheit weltweit.'\n    } else if (productName.includes('soyabeans') || productName.includes('soyabean')) {\n      return 'Sojabohnen sind eine wichtige Protein- und Ölquelle und werden weltweit als Viehfutter verwendet.'\n    } else if (productName.includes('sugar')) {\n      return 'Zucker und Süßstoffe sind wichtige Energielieferanten und haben großen Einfluss auf die globale Ernährung.'\n    } else if (productName.includes('vegetable') || productName.includes('fruits')) {\n      return 'Obst und Gemüse sind essentiell für eine ausgewogene Ernährung und liefern wichtige Vitamine und Mineralstoffe.'\n    } else if (productName.includes('meat') || productName.includes('bovine') || productName.includes('pigmeat') || productName.includes('poultry')) {\n      return 'Fleischprodukte sind wichtige Protein- und Nährstoffquellen, deren Produktion erhebliche Umweltauswirkungen hat.'\n    } else if (productName.includes('cassava')) {\n      return 'Maniok ist ein wichtiges Grundnahrungsmittel in tropischen Regionen und eine wichtige Kohlenhydratquelle.'\n    } else if (productName.includes('potatoes')) {\n      return 'Kartoffeln sind weltweit ein wichtiges Grundnahrungsmittel und eine bedeutende Quelle für Kohlenhydrate.'\n    } else if (productName.includes('fish') || productName.includes('seafood')) {\n      return 'Fisch und Meeresfrüchte sind wichtige Protein- und Omega-3-Quellen für Milliarden von Menschen.'\n    } else {\n      return 'Diese Produktkategorie spielt eine wichtige Rolle für die globale Ernährungssicherheit und nachhaltige Landwirtschaft.'\n    }\n  }\n  \n  return 'Diese Produktkategorie spielt eine wichtige Rolle für die globale Ernährungssicherheit.'\n}\n\n// Combined data for chart\nconst chartData = computed(() => {\n  if (!forecastData.value) return []\n  \n  // Filter out historical data with invalid values\n  const historical = forecastData.value.historical_data?.map(d => ({\n    year: d.year,\n    value: d.value,\n    predicted_value: d.value, // Add for consistency with chart expectations\n    type: 'historical'\n  })).filter(d => d.value != null && d.value > 0) || []\n  \n  // Filter out predictions with invalid values\n  const validPredictions = predictions.value.filter(d => \n    d.predicted_value != null && d.predicted_value > 0\n  ).map(d => ({\n    ...d,\n    value: d.predicted_value, // Add for consistency\n    type: 'prediction'\n  }))\n  \n  const combined = [...historical, ...validPredictions]\n  console.log('🎯 MLPanel: Chart data:', { \n    historical: historical.length, \n    predictions: validPredictions.length,\n    sample: combined.slice(0, 3)\n  })\n  return combined\n})\n\n// Watchers\nwatch([selectedForecast, selectedModel], () => {\n  if (selectedForecast.value && selectedModel.value) {\n    loadPredictions()\n  }\n}, { deep: true })\n\n// Load available forecasts based on type\nconst loadAvailableForecasts = wrapAsync(async () => {\n  console.log('🔍 MLPanel: Loading forecasts for type:', selectedForecastType.value)\n  try {\n    let index\n    switch (selectedForecastType.value) {\n      case 'global':\n        index = await dataStore.loadMLGlobalIndex()\n        break\n      case 'regional':\n        index = await dataStore.loadMLRegionalIndex()\n        break\n      case 'country':\n        index = await dataStore.loadMLCountryIndex()\n        break\n    }\n    \n    console.log('📋 MLPanel: ML Index loaded:', index)\n    \n    // Handle both 'forecasts' and 'files' formats\n    if (index && (index.forecasts || index.files)) {\n      const forecasts = index.forecasts || index.files\n      \n      // Transform files array to expected format if needed\n      if (Array.isArray(forecasts) && typeof forecasts[0] === 'string') {\n        availableForecasts.value = forecasts.map(file => ({\n          file: file,\n          title: file\n            .replace('.json', '')\n            .replace(/_/g, ' ')\n            .replace(/global /i, '')\n            .replace(/forecast/i, '')\n            .trim()\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ')\n        }))\n      } else {\n        availableForecasts.value = forecasts\n      }\n      \n      // Select first forecast if available\n      if (availableForecasts.value.length > 0 && !selectedForecast.value) {\n        selectedForecast.value = availableForecasts.value[0].file.replace('.json', '')\n        console.log('✅ MLPanel: Auto-selected forecast:', selectedForecast.value)\n      }\n      console.log('📊 MLPanel: Available forecasts:', availableForecasts.value.length)\n    } else {\n      console.warn('⚠️ MLPanel: No forecasts found in index')\n      availableForecasts.value = []\n    }\n  } catch (err) {\n    console.error('❌ MLPanel: Error loading forecast index:', err)\n    availableForecasts.value = []\n  }\n}, {\n  component: 'MLPanel',\n  operation: 'loadAvailableForecasts'\n})\n\n// Lifecycle\nonMounted(async () => {\n  try {\n    // Load comprehensive index on mount\n    const comprehensiveIndex = await dataStore.loadMLComprehensiveIndex()\n    console.log('Comprehensive index loaded:', comprehensiveIndex)\n  } catch (err) {\n    console.error('Failed to load comprehensive index:', err)\n  }\n  \n  await loadAvailableForecasts()\n  if (selectedForecast.value) {\n    await loadPredictions()\n  }\n})\n</script>\n\n<style scoped>\n.ml-panel {\n  @apply flex flex-col h-full bg-white dark:bg-gray-800 rounded-lg shadow-lg;\n}\n\n.panel-header {\n  @apply p-6 border-b border-gray-200 dark:border-gray-700;\n}\n\n.panel-title {\n  @apply text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2;\n}\n\n.panel-description {\n  @apply text-gray-600 dark:text-gray-300;\n}\n\n.panel-controls {\n  @apply p-6 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600;\n}\n\n.filters-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4;\n}\n\n.filter-group {\n  @apply flex flex-col;\n}\n\n.filter-group label {\n  @apply text-sm font-medium text-gray-700 dark:text-gray-300 mb-2;\n}\n\n.panel-content {\n  @apply flex-1 p-6 overflow-auto;\n}\n\n.predictions-content {\n  @apply space-y-8;\n}\n\n.forecast-info {\n  @apply bg-blue-50 dark:bg-blue-900/30 rounded-lg p-6 mb-6;\n}\n\n.info-title {\n  @apply text-xl font-bold text-gray-900 dark:text-gray-100 mb-4;\n}\n\n.info-grid {\n  @apply grid grid-cols-2 md:grid-cols-4 gap-4;\n}\n\n.info-item {\n  @apply flex flex-col;\n}\n\n.info-label {\n  @apply text-sm text-gray-600 dark:text-gray-400 mb-1;\n}\n\n.info-value {\n  @apply text-base font-semibold text-gray-900 dark:text-gray-100;\n}\n\n.model-stats {\n  @apply mb-6;\n}\n\n.stats-title {\n  @apply text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4;\n}\n\n.stats-grid {\n  @apply grid grid-cols-2 md:grid-cols-4 gap-4;\n}\n\n.stat-card {\n  @apply bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center;\n}\n\n.stat-label {\n  @apply text-sm text-gray-600 dark:text-gray-400 mb-1;\n}\n\n.stat-value {\n  @apply text-lg font-bold text-gray-900 dark:text-gray-100;\n}\n\n.chart-container {\n  @apply w-full mb-6;\n  min-height: 500px;\n}\n\n.insights-section {\n  @apply mb-8;\n}\n\n.insights-title {\n  @apply text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4;\n}\n\n.insights-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 gap-4;\n}\n\n.insight-card {\n  @apply flex items-start space-x-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg;\n}\n\n.insight-icon {\n  @apply text-2xl;\n}\n\n.insight-content h4 {\n  @apply font-semibold text-gray-900 dark:text-gray-100 mb-1;\n}\n\n.insight-content p {\n  @apply text-sm text-gray-600 dark:text-gray-300;\n}\n\n.predictions-table {\n  @apply space-y-4;\n}\n\n.table-title {\n  @apply text-lg font-semibold text-gray-900 dark:text-gray-100;\n}\n\n.table-container {\n  @apply overflow-x-auto;\n}\n\n.predictions-table-element {\n  @apply w-full border-collapse bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow;\n}\n\n.predictions-table-element th {\n  @apply bg-gray-50 dark:bg-gray-700 px-4 py-3 text-left text-sm font-medium text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600;\n}\n\n.predictions-table-element td {\n  @apply px-4 py-3 text-sm text-gray-900 dark:text-gray-100 border-b border-gray-200 dark:border-gray-600;\n}\n\n.reliability-bar {\n  @apply relative w-full h-4 bg-gray-200 dark:bg-gray-600 rounded-full overflow-hidden;\n}\n\n.reliability-fill {\n  @apply absolute top-0 left-0 h-full transition-all duration-300;\n}\n\n.reliability-text {\n  @apply absolute inset-0 flex items-center justify-center text-xs font-medium text-white;\n}\n\n.error-container,\n.loading-container,\n.empty-state {\n  @apply flex flex-col items-center justify-center h-64;\n}\n\n.loading-text {\n  @apply mt-4 text-gray-600 dark:text-gray-400;\n}\n\n.empty-icon {\n  @apply text-6xl mb-4;\n}\n\n.empty-state h3 {\n  @apply text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2;\n}\n\n.empty-state p {\n  @apply text-gray-500 dark:text-gray-400;\n}\n\n/* Warning box for poor model performance */\n.model-warning {\n  @apply mb-4 p-4 bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-600 rounded-lg;\n}\n\n.model-warning p.warning-title {\n  @apply text-red-700 dark:text-red-300 font-semibold;\n}\n\n.model-warning p.warning-text {\n  @apply text-red-600 dark:text-red-400 text-sm mt-1;\n}\n</style>"],"names":["formatAgricultureValue","value","options","unit","precision","showUnit","longForm","isNaN","absValue","Math","abs","formattedNumber","displayUnit","toFixed","createD3AxisFormatter","formatAxisValue","createD3TooltipFormatter","formatTooltipValue","_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_47","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_57","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","_hoisted_64","_hoisted_65","_hoisted_66","_hoisted_67","_hoisted_68","_hoisted_69","_hoisted_70","_hoisted_71","_hoisted_73","_hoisted_74","dataStore","useDataStore","uiStore","useUIStore","selectedVisualization","ref","dashboardLoading","containerWidth","getCountriesArray","currentProduct","selectedProduct","currentYear","selectedYear","currentMetric","selectedMetric","timeseriesData","metricKey","productTimeseries","Object","entries","map","country","countryData","yearData","find","d","year","filter","item","rawData","getProductionData","Array","isArray","data","selectedCountryData","computed","selectedCountry","countryRank","index","sort","a","b","findIndex","topCountries","countries","NON_COUNTRY_ENTITIES","includes","toLowerCase","slice","feedUsage","percentage","amount","productData","totalProduction","totalFeed","hasFeedData","values","forEach","production","feedValue","feed","round","globalStats","hasTimeseries","total","topProducer","dataArray","unit2","length","validData","reduce","sum","max","onMounted","async","hasData","initializeApp","Promise","resolve","setTimeout","loadProductionData","error","updateWidth","min","window","innerWidth","addEventListener","resizeHandler","onUnmounted","removeEventListener","watch","product","label","icon","countryCode","_a","setSelectedCountry","_openBlock","_createElementBlock","_createElementVNode","_cache","fill","stroke","viewBox","_toDisplayString","$setup","Date","getFullYear","_b","_c","replace","l","toUpperCase","_d","_hoisted_24","_hoisted_30","onClick","$event","_Fragment","_renderList","visualizationOptions","option","key","_normalizeClass","_hoisted_46","_hoisted_48","_createVNode","onCountryClick","onCountryHover","_hoisted_49","onPointHover","onPointClick","_hoisted_50","width","height","_hoisted_56","_e","availableYears","_f","availableProducts","_h","_g","geoData","features","_hoisted_72","_component_router_link","to","productMappings","Beer","Oats","Bananas","Dates","Onions","Plantains","Vegetables","Yams","Beans","Groundnuts","Peas","Pulses","Treenuts","Cream","Eggs","Meat","Offals","Pigmeat","Cephalopods","Crustaceans","Oilcrops","Cloves","Cottonseed","Pepper","Pimento","Soyabeans","Spices","Stimulants","Honey","Wine","Miscellaneous","animal_fats","apples_and_products","aquatic_animals_others","aquatic_plants","aquatic_products_other","bananas","barley_and_products","beans","beer","beverages_fermented","bovine_meat","butter_ghee","cassava_and_products","cephalopods","cereals___excluding_beer","cereals_other","citrus_other","cloves","cocoa_beans_and_products","coconut_oil","coconuts___incl_copra","coffee_and_products","cottonseed","cottonseed_oil","cream","crustaceans","dates","demersal_fish","eggs","fats_animals_raw","fish_body_oil","fish_liver_oil","fish_seafood","freshwater_fish","fruits___excluding_wine","fruits_other","grapefruit_and_products","grapes_and_products_excl_wine","groundnut_oil","groundnuts","honey","lemons_limes_and_products","maize_and_products","maize_germ_oil","marine_fish_other","meat","meat_other","milk___excluding_butter","millet_and_products","miscellaneous","molluscs_other","nuts_and_products","oats","offals","offals_edible","oilcrops","oilcrops_oil_other","oilcrops_other","olive_oil","olives_including_preserved","onions","oranges_mandarines","palm_kernels","palm_oil","palmkernel_oil","peas","pelagic_fish","pepper","pigmeat","pimento","pineapples_and_products","plantains","potatoes_and_products","poultry_meat","pulses","pulses_other_and_products","rape_and_mustard_oil","rape_and_mustardseed","rice_and_products","ricebran_oil","roots_other","rye_and_products","sesame_seed","sesameseed_oil","sorghum_and_products","soyabean_oil","soyabeans","spices","spices_other","starchy_roots","stimulants","sugar_beet","sugar_cane","sugar_crops","sugar_non_centrifugal","sugar_raw_equivalent","sunflower_seed","sunflowerseed_oil","sweet_potatoes","sweeteners_other","tea_including_mate","tomatoes_and_products","treenuts","vegetable_oils","vegetables","vegetables_other","wheat_and_products","wine","yams","productCategories","cereals","name","products","fruits","legumes","seafood","oils","seeds","sugar","other","getGermanName","englishName","getMLGermanName","mlProductName","spaceVersion","titleCase","split","word","charAt","join","getProductCategory","productName","categoryKey","category","getAllProductOptions","keys","categoryName","localeCompare","selectedProducts","selectedCountries","chartData","hasError","productOptions","individualItems","faoMetadata","data_summary","food_items","countryOptions","allCountries","Set","add","updateChartData","allData","push","series","yearlyTotals","Map","currentTotal","get","set","ensureDataLoaded","err","immediate","point","onError","handleError","placeholder","size","metricOptions","title","onRetry","handlePointClick","handleErrorUtil","wrapAsync","useErrorHandling","isLoading","simulationResults","selectedScenario","hasConfigChanged","lastAppliedConfig","scenarioConfig","climateChange","populationGrowth","techProgress","economicGrowth","availableScenarios","id","description","sliderPreset","chartConfig","margin","top","right","bottom","left","showConfidenceInterval","showScenarios","interactive","animated","calculateStochasticPath","baseValue","trend","volatility","steps","deltaT","path","currentValue","i","dt","random","sqrt","runMonteCarloSimulation","config","simulations","paths","totalTrend","totalVolatility","sim","calculateConfidenceIntervals","confidenceLevel","intervals","step","lowerIndex","floor","upperIndex","mean","val","lower","upper","median","runSimulation","scenario","s","scenarioName","simulationPaths","confidenceIntervals","baselinePaths","baselinePath","interval","finalScenario","finalBaseline","productionChange","foodSecurity","environmentImpact","economicImpact","timeSeriesData","baseline","dataSource","simulationDetails","totalPaths","timeHorizon","method","component","operation","newConfig","hasActualChanges","some","deep","handleScenarioSelect","scenarioId","resetValues","action","type","modelValue","disabled","variant","_createBlock","_createTextVNode","resetConfig","formatChange","onScenarioSelect","selectedForecastType","selectedForecast","selectedModel","predictions","modelStats","forecastData","availableForecasts","forecastTypeOptions","forecastOptions","forecast","file","cleanValue","regionPrefix","startsWith","parts","potentialProduct","modelOptions","showHistorical","showTrend","loadPredictions","loadMLForecast","model_performance","linear","r2_score","polynomial","forecastArray","ensemble_forecasts","forecasts","historicalData","historical_data","lastHistoricalYear","pred","isEnsemble","predictedValue","ensemble_mean","predicted_value","confidence_lower","model_min","confidence_upper","model_max","calculateTrend","reliability","model_agreement","uncertainty_percent","uncertainty_level","getUncertaintyLevel","model","perf","accuracy","rmse","mse","mae","r2","models","avgR2","m","avgMSE","avgMAE","avgAgreement","p","prediction","baseYear","years_ahead","uncertaintyPercent","loadAvailableForecasts","loadMLGlobalIndex","loadMLRegionalIndex","loadMLCountryIndex","files","trim","loadMLComprehensiveIndex","showConfidence","productMatch","match","germanProductName","ensemble","parseFloat","firstPred","growthPercent","avgUncertainty","getFormattedForecastTitle","getModelLabel","onPredictionSelect","handlePredictionSelect","onConfidenceToggle","handleConfidenceToggle","getGrowthInsight","getAccuracyInsight","getUncertaintyInsight","getGlobalInsight","formatValue","getTrendClass","formatTrend","style","_normalizeStyle"],"mappings":"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"}
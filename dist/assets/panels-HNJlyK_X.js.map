{"version":3,"file":"panels-HNJlyK_X.js","sources":["../../src/components/panels/DashboardPanel.vue","../../src/utils/productMappings.js","../../src/components/panels/TimeseriesPanel.vue","../../src/components/panels/SimulationPanel.vue","../../src/components/panels/MLPanel.vue","../../src/components/panels/StructuralPanel.vue","../../src/components/panels/ProcessPanel.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref, computed, watch, onMounted, onUnmounted } from 'vue'\nimport { useDataStore } from '@/stores/useDataStore'\nimport { useUIStore } from '@/stores/useUIStore'\nimport WorldMap from '@/components/visualizations/WorldMap.vue'\nimport WorldMapSimple from '@/components/visualizations/WorldMapSimple.vue'\nimport TimeseriesChart from '@/components/visualizations/TimeseriesChart.vue'\nimport ProductSelector from '@/components/ui/ProductSelector.vue'\n\nconst dataStore = useDataStore()\nconst uiStore = useUIStore()\n\nconst selectedVisualization = ref('world-map')\nconst dashboardLoading = ref(false)\nconst containerWidth = ref(400)\n\nconst visualizationOptions = [\n  { value: 'world-map', label: 'Weltkarte', icon: 'globe' },\n  { value: 'timeseries', label: 'Zeitreihen', icon: 'chart' },\n  { value: 'overview', label: 'Übersicht', icon: 'grid' }\n]\n\n// Helper to get countries array from different data structures\nconst getCountriesArray = () => {\n  const currentProduct = uiStore.selectedProduct\n  const currentYear = uiStore.selectedYear\n  const currentMetric = uiStore.selectedMetric\n  const hasTimeseries = !!dataStore.timeseriesData\n  \n  // Use timeseries data for individual products when available\n  if (hasTimeseries && dataStore.timeseriesData[currentProduct]) {\n    const metricKey = currentMetric === 'production' ? 'production' :\n                      currentMetric === 'import_quantity' ? 'imports' :\n                      currentMetric === 'export_quantity' ? 'exports' :\n                      'domestic_supply'\n    \n    const productTimeseries = dataStore.timeseriesData[currentProduct]\n    return Object.entries(productTimeseries).map(([country, countryData]) => {\n      const yearData = countryData.find(d => d.year === currentYear)\n      return {\n        country,\n        value: yearData ? (yearData[metricKey] || 0) : 0,\n        unit: yearData?.unit || 't',\n        year: currentYear\n      }\n    }).filter(item => item.value > 0)\n  }\n  \n  // Fallback to production data for grouped products\n  const rawData = dataStore.getProductionData(currentProduct, currentYear)\n  if (!rawData) return []\n  \n  if (Array.isArray(rawData)) {\n    return rawData\n  } else if (rawData.data && Array.isArray(rawData.data)) {\n    return rawData.data\n  } else if (typeof rawData === 'object') {\n    return Object.entries(rawData).map(([country, data]) => ({\n      country,\n      value: data.value || 0,\n      unit: data.unit || 't',\n      year: data.year || currentYear\n    }))\n  }\n  return []\n}\n\nconst selectedCountryData = computed(() => {\n  if (!uiStore.selectedCountry || !uiStore.selectedProduct || !uiStore.selectedYear) {\n    return null\n  }\n  \n  const countries = getCountriesArray()\n  return countries.find(item => item.country === uiStore.selectedCountry)\n})\n\n// Country ranking\nconst countryRank = computed(() => {\n  if (!uiStore.selectedCountry) return 'N/A'\n  \n  const countries = getCountriesArray()\n  const sorted = countries\n    .filter(item => item.value > 0)\n    .sort((a, b) => b.value - a.value)\n  \n  const index = sorted.findIndex(item => item.country === uiStore.selectedCountry)\n  return index >= 0 ? index + 1 : 'N/A'\n})\n\n// Top countries computed property with proper filtering\nconst topCountries = computed(() => {\n  const countries = getCountriesArray()\n  \n  // Filter out non-country entities (continents, regions, aggregates)\n  const NON_COUNTRY_ENTITIES = [\n    // Global/Continental\n    \"World\", \"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\",\n    \n    // Regional subdivisions\n    \"Northern America\", \"South America\", \"Central America\", \"Caribbean\",\n    \"Northern Africa\", \"Eastern Africa\", \"Middle Africa\", \"Southern Africa\", \"Western Africa\", \n    \"Eastern Asia\", \"South-eastern Asia\", \"Southern Asia\", \"Western Asia\", \"Central Asia\",\n    \"Eastern Europe\", \"Northern Europe\", \"Southern Europe\", \"Western Europe\",\n    \"Australia and New Zealand\", \"Melanesia\",\n    \n    // Economic/Political unions\n    \"European Union (27)\",\n    \n    // Development status groups\n    \"Small Island Developing States\", \"Least Developed Countries\", \n    \"Land Locked Developing Countries\", \"Low Income Food Deficit Countries\",\n    \"Net Food Importing Developing Countries\"\n  ]\n  \n  return countries\n    .filter(item => \n      item.value > 0 &&\n      item.country && \n      !NON_COUNTRY_ENTITIES.includes(item.country) &&\n      !item.country.toLowerCase().includes('total')\n    )\n    .sort((a, b) => b.value - a.value)\n    .slice(0, 10)\n})\n\nconst globalStats = computed(() => {\n  // Force reactivity on these dependencies\n  const currentProduct = uiStore.selectedProduct\n  const currentYear = uiStore.selectedYear  \n  const currentMetric = uiStore.selectedMetric\n  const hasTimeseries = !!dataStore.timeseriesData\n  if (!currentProduct || !currentYear) {\n    return { total: 0, countries: 0, topProducer: null, unit: 't' }\n  }\n  \n  let rawData = null\n  let dataArray = []\n  \n  // Use timeseries data for all metrics when available for individual products\n  if (hasTimeseries && dataStore.timeseriesData[currentProduct]) {\n    // Use timeseries data for individual products\n    const metricKey = currentMetric === 'production' ? 'production' :\n                      currentMetric === 'import_quantity' ? 'imports' :\n                      currentMetric === 'export_quantity' ? 'exports' :\n                      'domestic_supply'\n    \n    console.log(`📊 DashboardPanel: Looking for timeseries data - Product: \"${currentProduct}\", Metric: \"${metricKey}\"`)\n    \n    const productTimeseries = dataStore.timeseriesData[currentProduct]\n    console.log(`📊 DashboardPanel: Processing ${metricKey} data for ${currentProduct}:`, {\n      countries: Object.keys(productTimeseries).length,\n      year: currentYear\n    })\n    \n    dataArray = Object.entries(productTimeseries).map(([country, countryData]) => {\n      const yearData = countryData.find(d => d.year === currentYear)\n      return {\n        country,\n        value: yearData ? (yearData[metricKey] || 0) : 0,\n        unit: yearData?.unit || 't',\n        year: currentYear\n      }\n    }).filter(item => item.value > 0)\n    \n    console.log(`📊 DashboardPanel: Found ${dataArray.length} countries with ${metricKey} > 0`)\n  } else if (currentMetric === 'production') {\n    // Fallback to production data for grouped products\n    console.log(`📊 DashboardPanel: Using production data fallback for grouped product: ${currentProduct}`)\n    rawData = dataStore.getProductionData(currentProduct, currentYear)\n  } else {\n    // Fallback to production data\n    rawData = dataStore.getProductionData(currentProduct, currentYear)\n  }\n  \n  if (!rawData && dataArray.length === 0) return { total: 0, countries: 0, topProducer: null, unit: 't' }\n  \n  // Handle different data structures (object with country keys vs array) - only if we used production data\n  if (rawData && dataArray.length === 0) {\n    if (Array.isArray(rawData)) {\n      dataArray = rawData\n    } else if (rawData.data && Array.isArray(rawData.data)) {\n      dataArray = rawData.data\n    } else if (typeof rawData === 'object') {\n      // Convert object format to array\n      dataArray = Object.entries(rawData).map(([country, data]) => ({\n        country,\n        value: data.value || 0,\n        unit: data.unit || 't',\n        year: data.year || currentYear\n      }))\n    }\n  }\n  \n  const validData = dataArray.filter(item => item && item.value > 0)\n  const total = validData.reduce((sum, item) => sum + (item.value || 0), 0)\n  \n  console.log(`📊 DashboardPanel globalStats: validData count: ${validData.length}`)\n  console.log(`📊 DashboardPanel globalStats: sample data:`, validData.slice(0, 3))\n  \n  const countries = validData.length\n  \n  // Filter out non-country entities (continents, regions, aggregates) for top producer calculation\n  const NON_COUNTRY_ENTITIES = [\n    // Global/Continental\n    \"World\", \"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\",\n    \n    // Regional subdivisions\n    \"Northern America\", \"South America\", \"Central America\", \"Caribbean\",\n    \"Northern Africa\", \"Eastern Africa\", \"Middle Africa\", \"Southern Africa\", \"Western Africa\", \n    \"Eastern Asia\", \"South-eastern Asia\", \"Southern Asia\", \"Western Asia\", \"Central Asia\",\n    \"Eastern Europe\", \"Northern Europe\", \"Southern Europe\", \"Western Europe\",\n    \"Australia and New Zealand\", \"Melanesia\",\n    \n    // Economic/Political unions\n    \"European Union (27)\",\n    \n    // Development status groups\n    \"Small Island Developing States\", \"Least Developed Countries\", \n    \"Land Locked Developing Countries\", \"Low Income Food Deficit Countries\",\n    \"Net Food Importing Developing Countries\"\n  ]\n  \n  const countryData = validData.filter(item => \n    item.country && \n    !NON_COUNTRY_ENTITIES.includes(item.country) &&\n    !item.country.toLowerCase().includes('total')\n  )\n  \n  console.log(`📊 DashboardPanel globalStats: countryData count: ${countryData.length}`)\n  console.log(`📊 DashboardPanel globalStats: sample countries:`, countryData.slice(0, 3).map(c => c.country))\n  \n  const topProducer = countryData.length > 0 ? countryData.reduce((max, item) => \n    (item.value || 0) > (max?.value || 0) ? item : max, null\n  ) : null\n  \n  return { \n    total, \n    countries: countryData.length, // Use filtered country count instead of all data\n    topProducer: topProducer?.country,\n    unit: topProducer?.unit || 't'\n  }\n})\n\n\nconst onCountryClick = (countryCode: string) => {\n  // Find country name from data\n  const data = dataStore.getProductionData(uiStore.selectedProduct, uiStore.selectedYear)\n  const countryData = data?.data?.find(item => item.countryCode === countryCode)\n  \n  if (countryData) {\n    uiStore.setSelectedCountry(countryData.country)\n    uiStore.addNotification({\n      type: 'info',\n      title: 'Land ausgewählt',\n      message: `${countryData.country} wurde ausgewählt`\n    })\n  }\n}\n\nonMounted(async () => {\n  // Initialize dashboard\n  if (!dataStore.hasData) {\n    await dataStore.initializeApp()\n  }\n  \n  // Load initial production data\n  try {\n    await dataStore.loadProductionData(uiStore.selectedProduct, uiStore.selectedYear)\n  } catch (error) {\n    console.error('Failed to load initial production data:', error)\n  }\n  \n  // Timeseries data is now loaded during app initialization\n  console.log('📊 DashboardPanel: Timeseries data available:', dataStore.timeseriesData ? Object.keys(dataStore.timeseriesData).length + ' products' : 'Not loaded')\n  \n  // Set up responsive width calculation\n  const updateWidth = () => {\n    containerWidth.value = Math.min(400, Math.max(300, window.innerWidth * 0.4))\n  }\n  \n  updateWidth()\n  window.addEventListener('resize', updateWidth)\n  \n  // Store handler for cleanup\n  resizeHandler = updateWidth\n})\n\nlet resizeHandler = null\nonUnmounted(() => {\n  if (resizeHandler) {\n    window.removeEventListener('resize', resizeHandler)\n  }\n})\n\n// Watch for changes in selection and reload data\nwatch([() => uiStore.selectedProduct, () => uiStore.selectedYear], async ([product, year]) => {\n  if (product && year) {\n    try {\n      await dataStore.loadProductionData(product, year)\n    } catch (error) {\n      console.error('Failed to load production data:', error)\n    }\n  }\n})\n</script>\n\n<template>\n  <div class=\"space-y-6\">\n    <!-- Dashboard Header with Stats -->\n    <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n      <!-- Total Production Card -->\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <div class=\"flex items-center\">\n            <div class=\"flex-shrink-0\">\n              <div class=\"w-12 h-12 bg-primary-100 dark:bg-primary-900/20 rounded-lg flex items-center justify-center\">\n                <svg class=\"w-6 h-6 text-primary-600 dark:text-primary-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                </svg>\n              </div>\n            </div>\n            <div class=\"ml-4\">\n              <h3 class=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                {{ uiStore.selectedMetric === 'production' ? 'Gesamtproduktion' : \n                   uiStore.selectedMetric === 'import_quantity' ? 'Gesamtimport' :\n                   uiStore.selectedMetric === 'export_quantity' ? 'Gesamtexport' :\n                   'Inlandsversorgung' }} {{ uiStore.selectedYear || new Date().getFullYear() }}\n              </h3>\n              <p class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                {{ (globalStats?.total || 0).toLocaleString('de-DE') }}\n              </p>\n              <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n                {{ globalStats.unit }} - {{ uiStore.selectedProduct?.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()) || 'Alle Produkte' }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Countries Count Card -->\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <div class=\"flex items-center\">\n            <div class=\"flex-shrink-0\">\n              <div class=\"w-12 h-12 bg-secondary-100 dark:bg-secondary-900/20 rounded-lg flex items-center justify-center\">\n                <svg class=\"w-6 h-6 text-secondary-600 dark:text-secondary-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </div>\n            </div>\n            <div class=\"ml-4\">\n              <h3 class=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                {{ uiStore.selectedMetric === 'production' ? 'Produzierende Länder' :\n                   uiStore.selectedMetric === 'import_quantity' ? 'Importierende Länder' :\n                   uiStore.selectedMetric === 'export_quantity' ? 'Exportierende Länder' :\n                   'Länder mit Daten' }}\n              </h3>\n              <p class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                {{ globalStats?.countries || 0 }}\n              </p>\n              <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n                mit {{ uiStore.selectedMetric === 'production' ? 'Produktionsdaten' :\n                       uiStore.selectedMetric === 'import_quantity' ? 'Importdaten' :\n                       uiStore.selectedMetric === 'export_quantity' ? 'Exportdaten' :\n                       'Versorgungsdaten' }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Top Producer Card -->\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <div class=\"flex items-center\">\n            <div class=\"flex-shrink-0\">\n              <div class=\"w-12 h-12 bg-success-100 dark:bg-success-900/20 rounded-lg flex items-center justify-center\">\n                <svg class=\"w-6 h-6 text-success-600 dark:text-success-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z\" />\n                </svg>\n              </div>\n            </div>\n            <div class=\"ml-4\">\n              <h3 class=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                {{ uiStore.selectedMetric === 'production' ? 'Größter Produzent' :\n                   uiStore.selectedMetric === 'import_quantity' ? 'Größter Importeur' :\n                   uiStore.selectedMetric === 'export_quantity' ? 'Größter Exporteur' :\n                   'Größter Verbraucher' }}\n              </h3>\n              <p class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                {{ globalStats.topProducer || 'N/A' }}\n              </p>\n              <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n                {{ uiStore.selectedYear }}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Selected Country Details -->\n    <div v-if=\"selectedCountryData\" class=\"card\">\n      <div class=\"card-header\">\n        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          {{ uiStore.selectedCountry }} - Detailansicht\n        </h3>\n        <button\n          @click=\"uiStore.setSelectedCountry('')\"\n          class=\"btn btn-ghost btn-sm\"\n        >\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div class=\"text-center\">\n            <p class=\"text-sm text-gray-600 dark:text-gray-400\">Produktion</p>\n            <p class=\"text-xl font-bold text-primary-600 dark:text-primary-400\">\n              {{ selectedCountryData.value.toLocaleString('de-DE') }}\n            </p>\n            <p class=\"text-xs text-gray-500 dark:text-gray-400\">\n              {{ selectedCountryData.unit || 'Tonnen' }}\n            </p>\n          </div>\n          <div class=\"text-center\">\n            <p class=\"text-sm text-gray-600 dark:text-gray-400\">Weltanteil</p>\n            <p class=\"text-xl font-bold text-secondary-600 dark:text-secondary-400\">\n              {{ globalStats.total > 0 && selectedCountryData ? ((selectedCountryData.value / globalStats.total) * 100).toFixed(1) : '0' }}%\n            </p>\n            <p class=\"text-xs text-gray-500 dark:text-gray-400\">\n              der Weltproduktion\n            </p>\n          </div>\n          <div class=\"text-center\">\n            <p class=\"text-sm text-gray-600 dark:text-gray-400\">Rang</p>\n            <p class=\"text-xl font-bold text-success-600 dark:text-success-400\">\n              #{{ countryRank }}\n            </p>\n            <p class=\"text-xs text-gray-500 dark:text-gray-400\">\n              weltweit\n            </p>\n          </div>\n          <div class=\"text-center\">\n            <p class=\"text-sm text-gray-600 dark:text-gray-400\">Jahr</p>\n            <p class=\"text-xl font-bold text-gray-600 dark:text-gray-400\">\n              {{ uiStore.selectedYear }}\n            </p>\n            <p class=\"text-xs text-gray-500 dark:text-gray-400\">\n              Datenjahr\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Visualization Selection -->\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Hauptvisualisierung\n        </h3>\n        <div class=\"flex space-x-2\">\n          <button\n            v-for=\"option in visualizationOptions\"\n            :key=\"option.value\"\n            @click=\"selectedVisualization = option.value\"\n            :class=\"[\n              'btn btn-sm transition-colors duration-200',\n              selectedVisualization === option.value\n                ? 'bg-primary-600 text-white border-primary-600 hover:bg-primary-700'\n                : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600'\n            ]\"\n          >\n            {{ option.label }}\n          </button>\n        </div>\n      </div>\n      <div class=\"card-body\">\n        <!-- World Map View -->\n        <div v-if=\"selectedVisualization === 'world-map'\" class=\"h-[600px] w-full relative\">\n          <WorldMap\n            :selected-product=\"uiStore.selectedProduct\"\n            :selected-year=\"uiStore.selectedYear\"\n            :selected-metric=\"uiStore.selectedMetric\"\n            @country-click=\"onCountryClick\"\n            @country-hover=\"(country) => {}\"\n          />\n        </div>\n        \n        <!-- Timeseries View -->\n        <div v-else-if=\"selectedVisualization === 'timeseries'\" class=\"h-96 p-4\">\n          <TimeseriesChart\n            :selected-country=\"uiStore.selectedCountry\"\n            :selected-product=\"uiStore.selectedProduct\"\n            :selected-metric=\"uiStore.selectedMetric\"\n            @point-hover=\"(data) => {}\"\n            @point-click=\"(data) => {}\"\n          />\n        </div>\n        \n        <!-- Overview Grid -->\n        <div v-else-if=\"selectedVisualization === 'overview'\" class=\"p-4 overflow-hidden\">\n          <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6 max-w-full\">\n            <!-- Mini World Map -->\n            <div class=\"bg-gray-50 dark:bg-gray-900 rounded-lg overflow-hidden min-h-[700px] flex flex-col\">\n              <div class=\"px-4 pt-4 pb-2 flex-shrink-0\">\n                <h4 class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Weltweite Verteilung\n                </h4>\n              </div>\n              <div class=\"flex-1 w-full\">\n                <WorldMap\n                  :width=\"containerWidth\"\n                  :height=\"600\"\n                  :selected-product=\"uiStore.selectedProduct\"\n                  :selected-year=\"uiStore.selectedYear\"\n                  :selected-metric=\"uiStore.selectedMetric\"\n                  @country-click=\"onCountryClick\"\n                />\n              </div>\n            </div>\n            \n            <!-- Mini Timeseries -->\n            <div class=\"bg-gray-50 dark:bg-gray-900 rounded-lg overflow-hidden min-h-[700px] flex flex-col\">\n              <div class=\"px-4 pt-4 pb-2 flex-shrink-0\">\n                <h4 class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Zeitliche Entwicklung\n                </h4>\n              </div>\n              <div class=\"flex-1 w-full\">\n                <TimeseriesChart\n                  :width=\"containerWidth\"\n                  :height=\"600\"\n                  :selected-country=\"uiStore.selectedCountry\"\n                  :selected-product=\"uiStore.selectedProduct\"\n                  :selected-metric=\"uiStore.selectedMetric\"\n                />\n              </div>\n            </div>\n            \n            <!-- Top Countries List -->\n            <div class=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-4 overflow-hidden\">\n              <h4 class=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                Top 10 Länder\n              </h4>\n              <div class=\"space-y-2 max-h-96 overflow-y-auto\">\n                <div\n                  v-for=\"(item, index) in topCountries\"\n                  :key=\"item.country\"\n                  class=\"flex items-center justify-between p-2 bg-white dark:bg-gray-800 rounded\"\n                >\n                  <div class=\"flex items-center space-x-3\">\n                    <span class=\"w-6 h-6 bg-primary-100 dark:bg-primary-900/20 rounded-full flex items-center justify-center text-xs font-medium text-primary-600 dark:text-primary-400\">\n                      {{ index + 1 }}\n                    </span>\n                    <span class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                      {{ item.country }}\n                    </span>\n                  </div>\n                  <span class=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {{ item.value.toLocaleString('de-DE') }}\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <!-- Quick Stats -->\n            <div class=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-4 overflow-hidden\">\n              <h4 class=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                Schnellstatistiken\n              </h4>\n              <div class=\"space-y-3\">\n                <div class=\"flex justify-between\">\n                  <span class=\"text-sm text-gray-600 dark:text-gray-400\">Durchschnitt/Land:</span>\n                  <span class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                    {{ globalStats.countries > 0 ? Math.round(globalStats.total / globalStats.countries).toLocaleString('de-DE') : '0' }}\n                  </span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span class=\"text-sm text-gray-600 dark:text-gray-400\">Datenjahre:</span>\n                  <span class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                    {{ dataStore.availableYears?.length || 0 }}\n                  </span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span class=\"text-sm text-gray-600 dark:text-gray-400\">Produkte:</span>\n                  <span class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                    {{ dataStore.availableProducts?.length || 0 }}\n                  </span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span class=\"text-sm text-gray-600 dark:text-gray-400\">Gesamt Länder:</span>\n                  <span class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                    {{ dataStore.geoData?.features?.length || 0 }}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Quick Actions -->\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n          Schnellaktionen\n        </h3>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <router-link\n            to=\"/timeseries\"\n            class=\"block p-4 bg-gray-50 dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-center\"\n          >\n            <svg class=\"w-8 h-8 text-primary-600 dark:text-primary-400 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z\" />\n            </svg>\n            <p class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Zeitreihen</p>\n          </router-link>\n          \n          <router-link\n            to=\"/simulation\"\n            class=\"block p-4 bg-gray-50 dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-center\"\n          >\n            <svg class=\"w-8 h-8 text-secondary-600 dark:text-secondary-400 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4\" />\n            </svg>\n            <p class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Simulation</p>\n          </router-link>\n          \n          <router-link\n            to=\"/ml-predictions\"\n            class=\"block p-4 bg-gray-50 dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-center\"\n          >\n            <svg class=\"w-8 h-8 text-success-600 dark:text-success-400 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2z\" />\n            </svg>\n            <p class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">ML Prognosen</p>\n          </router-link>\n          \n          <router-link\n            to=\"/structural\"\n            class=\"block p-4 bg-gray-50 dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-center\"\n          >\n            <svg class=\"w-8 h-8 text-warning-600 dark:text-warning-400 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 11H5m14-7v12a2 2 0 01-2 2H7a2 2 0 01-2-2V4a2 2 0 012-2h10a2 2 0 012 2zM9 11h6\" />\n            </svg>\n            <p class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Strukturanalyse</p>\n          </router-link>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>","/**\n * Product mappings for German translations and enhanced product selection\n * Maps English FAO product names to German names and provides additional metadata\n * Updated with exact FAO metadata product names (113 products total)\n * Now includes ML forecast product name mappings\n */\n\nexport const productMappings = {\n  // Cereals & Grains\n  'Animal fats': 'Tierische Fette',\n  'Barley and products': 'Gerste und Erzeugnisse',\n  'Beer': 'Bier',\n  'Cereals - Excluding Beer': 'Getreide - Ohne Bier',\n  'Cereals, other': 'Getreide, andere',\n  'Maize and products': 'Mais und Erzeugnisse',\n  'Millet and products': 'Hirse und Erzeugnisse',\n  'Oats': 'Hafer',\n  'Rice and products': 'Reis und Erzeugnisse',\n  'Rye and products': 'Roggen und Erzeugnisse',\n  'Sorghum and products': 'Sorghum und Erzeugnisse',\n  'Wheat and products': 'Weizen und Erzeugnisse',\n\n  // Fruits\n  'Apples and products': 'Äpfel und Erzeugnisse',\n  'Bananas': 'Bananen',\n  'Citrus, Other': 'Zitrusfrüchte, andere',\n  'Dates': 'Datteln',\n  'Fruits - Excluding Wine': 'Früchte - Ohne Wein',\n  'Fruits, other': 'Früchte, andere',\n  'Grapefruit and products': 'Grapefruit und Erzeugnisse',\n  'Grapes and products (excl wine)': 'Trauben und Erzeugnisse (ohne Wein)',\n  'Lemons, Limes and products': 'Zitronen, Limetten und Erzeugnisse',\n  'Oranges, Mandarines': 'Orangen, Mandarinen',\n  'Pineapples and products': 'Ananas und Erzeugnisse',\n\n  // Vegetables & Roots\n  'Cassava and products': 'Maniok und Erzeugnisse',\n  'Onions': 'Zwiebeln',\n  'Plantains': 'Kochbananen',\n  'Potatoes and products': 'Kartoffeln und Erzeugnisse',\n  'Roots, Other': 'Wurzeln, andere',\n  'Starchy Roots': 'Stärkehaltige Wurzeln',\n  'Sweet potatoes': 'Süßkartoffeln',\n  'Tomatoes and products': 'Tomaten und Erzeugnisse',\n  'Vegetables': 'Gemüse',\n  'Vegetables, other': 'Gemüse, andere',\n  'Yams': 'Yams',\n\n  // Legumes & Nuts\n  'Beans': 'Bohnen',\n  'Groundnuts': 'Erdnüsse',\n  'Nuts and products': 'Nüsse und Erzeugnisse',\n  'Peas': 'Erbsen',\n  'Pulses': 'Hülsenfrüchte',\n  'Pulses, Other and products': 'Hülsenfrüchte, andere und Erzeugnisse',\n  'Treenuts': 'Baumnüsse',\n\n  // Meat & Animal Products\n  'Bovine Meat': 'Rindfleisch',\n  'Butter, Ghee': 'Butter, Ghee',\n  'Cream': 'Sahne',\n  'Eggs': 'Eier',\n  'Meat': 'Fleisch',\n  'Meat, Aquatic Mammals': 'Fleisch von Wassersäugetieren',\n  'Meat, Other': 'Fleisch, andere',\n  'Milk - Excluding Butter': 'Milch - Ohne Butter',\n  'Mutton & Goat Meat': 'Hammel- und Ziegenfleisch',\n  'Offals': 'Innereien',\n  'Offals, Edible': 'Innereien, essbar',\n  'Pigmeat': 'Schweinefleisch',\n  'Poultry Meat': 'Geflügelfleisch',\n\n  // Fish & Seafood\n  'Aquatic Animals, Others': 'Wassertiere, andere',\n  'Aquatic Plants': 'Wasserpflanzen',\n  'Aquatic Products, Other': 'Wasserprodukte, andere',\n  'Cephalopods': 'Kopffüßer',\n  'Crustaceans': 'Krebstiere',\n  'Demersal Fish': 'Bodenfische',\n  'Fish, Body Oil': 'Fischkörperöl',\n  'Fish, Liver Oil': 'Fischleberöl',\n  'Fish, Seafood': 'Fisch, Meeresfrüchte',\n  'Freshwater Fish': 'Süßwasserfische',\n  'Marine Fish, Other': 'Meeresfische, andere',\n  'Molluscs, Other': 'Weichtiere, andere',\n  'Pelagic Fish': 'Pelagische Fische',\n\n  // Oils & Fats\n  'Coconut Oil': 'Kokosöl',\n  'Cottonseed Oil': 'Baumwollsamenöl',\n  'Fats, Animals, Raw': 'Tierische Fette, roh',\n  'Groundnut Oil': 'Erdnussöl',\n  'Maize Germ Oil': 'Maiskeimöl',\n  'Oilcrops': 'Ölsaaten',\n  'Oilcrops Oil, Other': 'Ölsaatenöl, andere',\n  'Oilcrops, Other': 'Ölsaaten, andere',\n  'Olive Oil': 'Olivenöl',\n  'Olives (including preserved)': 'Oliven (einschließlich konservierte)',\n  'Palm Oil': 'Palmöl',\n  'Palmkernel Oil': 'Palmkernöl',\n  'Rape and Mustard Oil': 'Raps- und Senföl',\n  'Ricebran Oil': 'Reiskleieöl',\n  'Sesameseed Oil': 'Sesamöl',\n  'Soyabean Oil': 'Sojaöl',\n  'Sunflowerseed Oil': 'Sonnenblumenöl',\n  'Vegetable Oils': 'Pflanzenöle',\n\n  // Seeds & Commodities\n  'Cloves': 'Nelken',\n  'Cocoa Beans and products': 'Kakaobohnen und Erzeugnisse',\n  'Coffee and products': 'Kaffee und Erzeugnisse',\n  'Cottonseed': 'Baumwollsamen',\n  'Palm kernels': 'Palmkerne',\n  'Pepper': 'Pfeffer',\n  'Pimento': 'Piment',\n  'Rape and Mustardseed': 'Raps- und Senfsamen',\n  'Sesame seed': 'Sesamsamen',\n  'Soyabeans': 'Sojabohnen',\n  'Spices': 'Gewürze',\n  'Spices, Other': 'Gewürze, andere',\n  'Stimulants': 'Stimulanzien',\n  'Sunflower seed': 'Sonnenblumenkerne',\n  'Tea (including mate)': 'Tee (einschließlich Mate)',\n\n  // Sugar & Sweeteners\n  'Beverages, Fermented': 'Fermentierte Getränke',\n  'Honey': 'Honig',\n  'Sugar & Sweeteners': 'Zucker und Süßstoffe',\n  'Sugar (Raw Equivalent)': 'Zucker (Rohzuckeräquivalent)',\n  'Sugar Crops': 'Zuckerpflanzen',\n  'Sugar beet': 'Zuckerrüben',\n  'Sugar cane': 'Zuckerrohr',\n  'Sugar non-centrifugal': 'Zucker, nicht zentrifugiert',\n  'Sweeteners, Other': 'Süßstoffe, andere',\n  'Wine': 'Wein',\n\n  // Other Categories\n  'Coconuts - Incl Copra': 'Kokosnüsse - Inkl. Kopra',\n  'Infant food': 'Säuglingsnahrung',\n  'Miscellaneous': 'Verschiedenes',\n\n  // ML Forecast specific product mappings (using underscores as in filenames)\n  'animal_fats': 'Tierische Fette',\n  'apples_and_products': 'Äpfel und Erzeugnisse',\n  'aquatic_animals_others': 'Wassertiere, andere',\n  'aquatic_plants': 'Wasserpflanzen',\n  'aquatic_products_other': 'Wasserprodukte, andere',\n  'bananas': 'Bananen',\n  'barley_and_products': 'Gerste und Erzeugnisse',\n  'beans': 'Bohnen',\n  'beer': 'Bier',\n  'beverages_fermented': 'Fermentierte Getränke',\n  'bovine_meat': 'Rindfleisch',\n  'butter_ghee': 'Butter, Ghee',\n  'cassava_and_products': 'Maniok und Erzeugnisse',\n  'cephalopods': 'Kopffüßer',\n  'cereals___excluding_beer': 'Getreide - Ohne Bier',\n  'cereals_other': 'Getreide, andere',\n  'citrus_other': 'Zitrusfrüchte, andere',\n  'cloves': 'Nelken',\n  'cocoa_beans_and_products': 'Kakaobohnen und Erzeugnisse',\n  'coconut_oil': 'Kokosöl',\n  'coconuts___incl_copra': 'Kokosnüsse - Inkl. Kopra',\n  'coffee_and_products': 'Kaffee und Erzeugnisse',\n  'cottonseed': 'Baumwollsamen',\n  'cottonseed_oil': 'Baumwollsamenöl',\n  'cream': 'Sahne',\n  'crustaceans': 'Krebstiere',\n  'dates': 'Datteln',\n  'demersal_fish': 'Bodenfische',\n  'eggs': 'Eier',\n  'fats_animals_raw': 'Tierische Fette, roh',\n  'fish_body_oil': 'Fischkörperöl',\n  'fish_liver_oil': 'Fischleberöl',\n  'fish_seafood': 'Fisch, Meeresfrüchte',\n  'freshwater_fish': 'Süßwasserfische',\n  'fruits___excluding_wine': 'Früchte - Ohne Wein',\n  'fruits_other': 'Früchte, andere',\n  'grapefruit_and_products': 'Grapefruit und Erzeugnisse',\n  'grapes_and_products_excl_wine': 'Trauben und Erzeugnisse (ohne Wein)',\n  'groundnut_oil': 'Erdnussöl',\n  'groundnuts': 'Erdnüsse',\n  'honey': 'Honig',\n  'lemons_limes_and_products': 'Zitronen, Limetten und Erzeugnisse',\n  'maize_and_products': 'Mais und Erzeugnisse',\n  'maize_germ_oil': 'Maiskeimöl',\n  'marine_fish_other': 'Meeresfische, andere',\n  'meat': 'Fleisch',\n  'meat_other': 'Fleisch, andere',\n  'milk___excluding_butter': 'Milch - Ohne Butter',\n  'millet_and_products': 'Hirse und Erzeugnisse',\n  'miscellaneous': 'Verschiedenes',\n  'molluscs_other': 'Weichtiere, andere',\n  'mutton_&_goat_meat': 'Hammel- und Ziegenfleisch',\n  'nuts_and_products': 'Nüsse und Erzeugnisse',\n  'oats': 'Hafer',\n  'offals': 'Innereien',\n  'offals_edible': 'Innereien, essbar',\n  'oilcrops': 'Ölsaaten',\n  'oilcrops_oil_other': 'Ölsaatenöl, andere',\n  'oilcrops_other': 'Ölsaaten, andere',\n  'olive_oil': 'Olivenöl',\n  'olives_including_preserved': 'Oliven (einschließlich konservierte)',\n  'onions': 'Zwiebeln',\n  'oranges_mandarines': 'Orangen, Mandarinen',\n  'palm_kernels': 'Palmkerne',\n  'palm_oil': 'Palmöl',\n  'palmkernel_oil': 'Palmkernöl',\n  'peas': 'Erbsen',\n  'pelagic_fish': 'Pelagische Fische',\n  'pepper': 'Pfeffer',\n  'pigmeat': 'Schweinefleisch',\n  'pimento': 'Piment',\n  'pineapples_and_products': 'Ananas und Erzeugnisse',\n  'plantains': 'Kochbananen',\n  'potatoes_and_products': 'Kartoffeln und Erzeugnisse',\n  'poultry_meat': 'Geflügelfleisch',\n  'pulses': 'Hülsenfrüchte',\n  'pulses_other_and_products': 'Hülsenfrüchte, andere und Erzeugnisse',\n  'rape_and_mustard_oil': 'Raps- und Senföl',\n  'rape_and_mustardseed': 'Raps- und Senfsamen',\n  'rice_and_products': 'Reis und Erzeugnisse',\n  'ricebran_oil': 'Reiskleieöl',\n  'roots_other': 'Wurzeln, andere',\n  'rye_and_products': 'Roggen und Erzeugnisse',\n  'sesame_seed': 'Sesamsamen',\n  'sesameseed_oil': 'Sesamöl',\n  'sorghum_and_products': 'Sorghum und Erzeugnisse',\n  'soyabean_oil': 'Sojaöl',\n  'soyabeans': 'Sojabohnen',\n  'spices': 'Gewürze',\n  'spices_other': 'Gewürze, andere',\n  'starchy_roots': 'Stärkehaltige Wurzeln',\n  'stimulants': 'Stimulanzien',\n  'sugar_&_sweeteners': 'Zucker und Süßstoffe',\n  'sugar_beet': 'Zuckerrüben',\n  'sugar_cane': 'Zuckerrohr',\n  'sugar_crops': 'Zuckerpflanzen',\n  'sugar_non_centrifugal': 'Zucker, nicht zentrifugiert',\n  'sugar_raw_equivalent': 'Zucker (Rohzuckeräquivalent)',\n  'sunflower_seed': 'Sonnenblumenkerne',\n  'sunflowerseed_oil': 'Sonnenblumenöl',\n  'sweet_potatoes': 'Süßkartoffeln',\n  'sweeteners_other': 'Süßstoffe, andere',\n  'tea_including_mate': 'Tee (einschließlich Mate)',\n  'tomatoes_and_products': 'Tomaten und Erzeugnisse',\n  'treenuts': 'Baumnüsse',\n  'vegetable_oils': 'Pflanzenöle',\n  'vegetables': 'Gemüse',\n  'vegetables_other': 'Gemüse, andere',\n  'wheat_and_products': 'Weizen und Erzeugnisse',\n  'wine': 'Wein',\n  'yams': 'Yams'\n}\n\n/**\n * Product categories for grouping and filtering\n */\nexport const productCategories = {\n  'cereals': {\n    name: 'Getreide und Körner',\n    icon: '🌾',\n    products: [\n      'Barley and products', 'Beer', 'Cereals - Excluding Beer', 'Cereals, other',\n      'Maize and products', 'Millet and products', 'Oats', 'Rice and products',\n      'Rye and products', 'Sorghum and products', 'Wheat and products'\n    ]\n  },\n  'fruits': {\n    name: 'Früchte',\n    icon: '🍎',\n    products: [\n      'Apples and products', 'Bananas', 'Citrus, Other', 'Dates',\n      'Fruits - Excluding Wine', 'Fruits, other', 'Grapefruit and products',\n      'Grapes and products (excl wine)', 'Lemons, Limes and products',\n      'Oranges, Mandarines', 'Pineapples and products'\n    ]\n  },\n  'vegetables': {\n    name: 'Gemüse und Wurzeln',\n    icon: '🥕',\n    products: [\n      'Cassava and products', 'Onions', 'Plantains', 'Potatoes and products',\n      'Roots, Other', 'Starchy Roots', 'Sweet potatoes', 'Tomatoes and products',\n      'Vegetables', 'Vegetables, other', 'Yams'\n    ]\n  },\n  'legumes': {\n    name: 'Hülsenfrüchte und Nüsse',\n    icon: '🥜',\n    products: [\n      'Beans', 'Groundnuts', 'Nuts and products', 'Peas', 'Pulses',\n      'Pulses, Other and products', 'Treenuts'\n    ]\n  },\n  'meat': {\n    name: 'Fleisch und Tierprodukte',\n    icon: '🥩',\n    products: [\n      'Bovine Meat', 'Butter, Ghee', 'Cream', 'Eggs', 'Meat', 'Meat, Aquatic Mammals',\n      'Meat, Other', 'Milk - Excluding Butter', 'Mutton & Goat Meat', 'Offals',\n      'Offals, Edible', 'Pigmeat', 'Poultry Meat'\n    ]\n  },\n  'seafood': {\n    name: 'Fisch und Meeresfrüchte',\n    icon: '🐟',\n    products: [\n      'Aquatic Animals, Others', 'Aquatic Plants', 'Aquatic Products, Other',\n      'Cephalopods', 'Crustaceans', 'Demersal Fish', 'Fish, Body Oil',\n      'Fish, Liver Oil', 'Fish, Seafood', 'Freshwater Fish', 'Marine Fish, Other',\n      'Molluscs, Other', 'Pelagic Fish'\n    ]\n  },\n  'oils': {\n    name: 'Öle und Fette',\n    icon: '🫒',\n    products: [\n      'Animal fats', 'Coconut Oil', 'Cottonseed Oil', 'Fats, Animals, Raw',\n      'Groundnut Oil', 'Maize Germ Oil', 'Oilcrops', 'Oilcrops Oil, Other',\n      'Oilcrops, Other', 'Olive Oil', 'Olives (including preserved)', 'Palm Oil',\n      'Palmkernel Oil', 'Rape and Mustard Oil', 'Ricebran Oil', 'Sesameseed Oil',\n      'Soyabean Oil', 'Sunflowerseed Oil', 'Vegetable Oils'\n    ]\n  },\n  'seeds': {\n    name: 'Samen und Rohstoffe',\n    icon: '🌱',\n    products: [\n      'Cloves', 'Cocoa Beans and products', 'Coffee and products', 'Cottonseed',\n      'Palm kernels', 'Pepper', 'Pimento', 'Rape and Mustardseed', 'Sesame seed',\n      'Soyabeans', 'Spices', 'Spices, Other', 'Stimulants', 'Sunflower seed',\n      'Tea (including mate)'\n    ]\n  },\n  'sugar': {\n    name: 'Zucker und Süßstoffe',\n    icon: '🍯',\n    products: [\n      'Beverages, Fermented', 'Honey', 'Sugar & Sweeteners', 'Sugar (Raw Equivalent)',\n      'Sugar Crops', 'Sugar beet', 'Sugar cane', 'Sugar non-centrifugal',\n      'Sweeteners, Other', 'Wine'\n    ]\n  },\n  'other': {\n    name: 'Andere',\n    icon: '📦',\n    products: [\n      'Coconuts - Incl Copra', 'Infant food', 'Miscellaneous'\n    ]\n  }\n}\n\n/**\n * Get German name for a product\n * @param {string} englishName - The English product name\n * @returns {string} The German product name or English name if not found\n */\nexport const getGermanName = (englishName) => {\n  return productMappings[englishName] || englishName\n}\n\n/**\n * Get German name for ML forecast products (handles underscore format)\n * @param {string} mlProductName - The ML product name (may contain underscores)\n * @returns {string} The German product name or formatted English name if not found\n */\nexport const getMLGermanName = (mlProductName) => {\n  // First try direct mapping\n  if (productMappings[mlProductName]) {\n    return productMappings[mlProductName]\n  }\n  \n  // Try with spaces instead of underscores\n  const spaceVersion = mlProductName.replace(/_/g, ' ')\n  if (productMappings[spaceVersion]) {\n    return productMappings[spaceVersion]\n  }\n  \n  // Try title case version\n  const titleCase = spaceVersion\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ')\n  if (productMappings[titleCase]) {\n    return productMappings[titleCase]\n  }\n  \n  // Fallback: format the product name nicely\n  return mlProductName\n    .replace(/_/g, ' ')\n    .replace(/&/g, '&')\n    .replace(/___/g, ' - ')\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ')\n}\n\n/**\n * Get English name from German name\n * @param {string} germanName - The German product name\n * @returns {string} The English product name or German name if not found\n */\nexport const getEnglishName = (germanName) => {\n  const entry = Object.entries(productMappings).find(([, german]) => german === germanName)\n  return entry ? entry[0] : germanName\n}\n\n/**\n * Get category for a product\n * @param {string} productName - The product name (English)\n * @returns {string|null} The category key or null if not found\n */\nexport const getProductCategory = (productName) => {\n  for (const [categoryKey, category] of Object.entries(productCategories)) {\n    if (category.products.includes(productName)) {\n      return categoryKey\n    }\n  }\n  return 'other'\n}\n\n/**\n * Get all individual products with German names\n * @returns {Array} Array of product options with value and label\n */\nexport const getAllProductOptions = () => {\n  return Object.keys(productMappings)\n    .map(englishName => ({\n      value: englishName,\n      label: getGermanName(englishName),\n      category: getProductCategory(englishName),\n      categoryName: productCategories[getProductCategory(englishName)]?.name || 'Andere'\n    }))\n    .sort((a, b) => a.label.localeCompare(b.label, 'de'))\n}\n\n/**\n * Get products grouped by category\n * @returns {Object} Products grouped by category\n */\nexport const getProductsByCategory = () => {\n  const grouped = {}\n  \n  for (const [categoryKey, category] of Object.entries(productCategories)) {\n    grouped[categoryKey] = {\n      ...category,\n      products: category.products\n        .map(englishName => ({\n          value: englishName,\n          label: getGermanName(englishName)\n        }))\n        .sort((a, b) => a.label.localeCompare(b.label, 'de'))\n    }\n  }\n  \n  return grouped\n}\n\n/**\n * Search products by German or English name\n * @param {string} searchTerm - The search term\n * @returns {Array} Matching product options\n */\nexport const searchProducts = (searchTerm) => {\n  if (!searchTerm || searchTerm.length < 2) {\n    return getAllProductOptions()\n  }\n  \n  const term = searchTerm.toLowerCase()\n  \n  return getAllProductOptions().filter(product => \n    product.label.toLowerCase().includes(term) ||\n    product.value.toLowerCase().includes(term)\n  )\n}","<template>\n  <div class=\"timeseries-panel\">\n    <ErrorBoundary @error=\"handleError\">\n      <div class=\"panel-header\">\n        <h2 class=\"panel-title\">Zeitreihen-Analyse</h2>\n        <p class=\"panel-description\">\n          Zeitliche Entwicklung von Produktionsdaten und Trends\n        </p>\n      </div>\n\n      <div class=\"panel-controls\">\n        <div class=\"filters-grid\">\n          <div class=\"filter-group\">\n            <SearchableSelect\n              v-model=\"selectedProduct\"\n              :options=\"productOptions\"\n              placeholder=\"Produkt auswählen...\"\n              label=\"Produkt\"\n              size=\"md\"\n            />\n          </div>\n          \n          <div class=\"filter-group\">\n            <SearchableSelect\n              v-model=\"selectedCountry\"\n              :options=\"countryOptions\"\n              placeholder=\"Land auswählen...\"\n              label=\"Land\"\n              size=\"md\"\n            />\n          </div>\n          \n          <div class=\"filter-group\">\n            <SearchableSelect\n              v-model=\"selectedMetric\"\n              :options=\"metricOptions\"\n              placeholder=\"Metrik auswählen...\"\n              label=\"Metrik\"\n              size=\"md\"\n            />\n          </div>\n\n          <div class=\"filter-group\">\n            <BaseButton \n              @click=\"loadData\" \n              :disabled=\"isLoading\"\n              variant=\"primary\"\n              size=\"md\"\n              class=\"mt-6\"\n            >\n              <LoadingSpinner v-if=\"isLoading\" size=\"sm\" />\n              {{ isLoading ? 'Lädt...' : 'Daten laden' }}\n            </BaseButton>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"panel-content\">\n        <div v-if=\"hasError\" class=\"error-container\">\n          <ErrorDisplay\n            :error=\"error\"\n            title=\"Fehler beim Laden der Zeitreihendaten\"\n            :showRetry=\"true\"\n            @retry=\"loadData\"\n          />\n        </div>\n\n        <div v-else-if=\"isLoading\" class=\"loading-container\">\n          <LoadingSpinner size=\"lg\" />\n          <p class=\"loading-text\">Lade Zeitreihendaten...</p>\n        </div>\n\n        <div v-else-if=\"chartData.length > 0\" class=\"chart-container\">\n          <TimeseriesChart\n            :width=\"800\"\n            :height=\"500\"\n            :selected-country=\"selectedCountry\"\n            :selected-product=\"selectedProduct\"\n            :selected-metric=\"selectedMetric\"\n            @point-click=\"handlePointClick\"\n          />\n        </div>\n\n        <div v-else class=\"empty-state\">\n          <div class=\"empty-icon\">📈</div>\n          <h3>Keine Daten verfügbar</h3>\n          <p>Wählen Sie Produkt und Land aus, um Zeitreihendaten anzuzeigen.</p>\n        </div>\n      </div>\n\n      <div v-if=\"chartData.length > 0\" class=\"panel-footer\">\n        <div class=\"stats-grid\">\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Datenpunkte</span>\n            <span class=\"stat-value\">{{ chartData.length }}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Produkt</span>\n            <span class=\"stat-value\">{{ getGermanName(selectedProduct) }}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Land</span>\n            <span class=\"stat-value\">{{ selectedCountry || 'Global' }}</span>\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted } from 'vue'\nimport { useDataStore } from '@/stores/useDataStore'\nimport { useUIStore } from '@/stores/useUIStore'\nimport ErrorBoundary from '@/components/ui/ErrorBoundary.vue'\nimport ErrorDisplay from '@/components/ui/ErrorDisplay.vue'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner.vue'\nimport BaseButton from '@/components/ui/BaseButton.vue'\nimport SearchableSelect from '@/components/ui/SearchableSelect.vue'\nimport TimeseriesChart from '@/components/visualizations/TimeseriesChart.vue'\nimport { getAllProductOptions, getGermanName } from '@/utils/productMappings'\n\n// Store and composables\nconst dataStore = useDataStore()\nconst uiStore = useUIStore()\n\n// Reactive state - use the same defaults as dashboard\nconst selectedProduct = ref('Wheat and products')\nconst selectedCountry = ref('')\nconst selectedMetric = ref('production')\nconst chartData = ref([])\nconst isLoading = ref(false)\nconst error = ref(null)\n\n// Computed properties\nconst hasError = computed(() => error.value !== null)\n\n// Get available products from metadata\nconst productOptions = computed(() => {\n  const individualItems = dataStore.faoMetadata?.data_summary?.food_items || []\n  \n  if (individualItems.length > 0) {\n    return individualItems.map(product => ({\n      value: product,\n      label: getGermanName(product)\n    })).sort((a, b) => a.label.localeCompare(b.label, 'de'))\n  } else {\n    return getAllProductOptions()\n  }\n})\n\n// Get available countries from timeseries data\nconst countryOptions = computed(() => {\n  if (!dataStore.timeseriesData || !selectedProduct.value) return []\n  \n  const productData = dataStore.timeseriesData[selectedProduct.value]\n  if (!productData) return []\n  \n  const countries = Object.keys(productData)\n  const NON_COUNTRY_ENTITIES = [\n    \"World\", \"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\",\n    \"Northern America\", \"South America\", \"Central America\", \"Caribbean\",\n    \"Northern Africa\", \"Eastern Africa\", \"Middle Africa\", \"Southern Africa\", \"Western Africa\", \n    \"Eastern Asia\", \"South-eastern Asia\", \"Southern Asia\", \"Western Asia\", \"Central Asia\",\n    \"Eastern Europe\", \"Northern Europe\", \"Southern Europe\", \"Western Europe\",\n    \"Australia and New Zealand\", \"Melanesia\",\n    \"European Union (27)\",\n    \"Small Island Developing States\", \"Least Developed Countries\", \n    \"Land Locked Developing Countries\", \"Low Income Food Deficit Countries\",\n    \"Net Food Importing Developing Countries\"\n  ]\n  \n  return countries\n    .filter(country => !NON_COUNTRY_ENTITIES.includes(country) && !country.toLowerCase().includes('total'))\n    .map(country => ({\n      value: country,\n      label: country\n    }))\n    .sort((a, b) => a.label.localeCompare(b.label))\n})\n\n// Metric options\nconst metricOptions = [\n  { value: 'production', label: 'Produktion' },\n  { value: 'import_quantity', label: 'Import' },\n  { value: 'export_quantity', label: 'Export' },\n  { value: 'domestic_supply_quantity', label: 'Inlandsversorgung' }\n]\n\n// Update chart data when selections change\nconst updateChartData = () => {\n  if (!dataStore.timeseriesData || !selectedProduct.value) {\n    chartData.value = []\n    return\n  }\n\n  const productData = dataStore.timeseriesData[selectedProduct.value]\n  if (!productData) {\n    chartData.value = []\n    return\n  }\n\n  if (selectedCountry.value && productData[selectedCountry.value]) {\n    // Single country data\n    const countryData = productData[selectedCountry.value]\n    const metricKey = selectedMetric.value === 'production' ? 'production' :\n                     selectedMetric.value === 'import_quantity' ? 'imports' :\n                     selectedMetric.value === 'export_quantity' ? 'exports' :\n                     'domestic_supply'\n    \n    chartData.value = countryData\n      .map(yearData => ({\n        year: yearData.year,\n        value: yearData[metricKey] || 0,\n        country: selectedCountry.value,\n        product: selectedProduct.value,\n        unit: yearData.unit || 't'\n      }))\n      .filter(item => item.value > 0)\n      .sort((a, b) => a.year - b.year)\n  } else {\n    // Global aggregated data\n    const yearlyTotals = new Map()\n    const metricKey = selectedMetric.value === 'production' ? 'production' :\n                     selectedMetric.value === 'import_quantity' ? 'imports' :\n                     selectedMetric.value === 'export_quantity' ? 'exports' :\n                     'domestic_supply'\n    \n    Object.entries(productData).forEach(([country, countryData]) => {\n      countryData.forEach(yearData => {\n        const value = yearData[metricKey] || 0\n        if (value > 0) {\n          const year = yearData.year\n          const currentTotal = yearlyTotals.get(year) || 0\n          yearlyTotals.set(year, currentTotal + value)\n        }\n      })\n    })\n    \n    chartData.value = Array.from(yearlyTotals.entries())\n      .map(([year, value]) => ({\n        year: year,\n        value: value,\n        country: 'Global',\n        product: selectedProduct.value,\n        unit: 't'\n      }))\n      .sort((a, b) => a.year - b.year)\n  }\n}\n\n// Methods\nconst loadData = async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    // Ensure timeseries data is loaded\n    if (!dataStore.timeseriesData) {\n      await dataStore.initializeApp()\n    }\n    \n    updateChartData()\n    \n  } catch (err) {\n    error.value = err\n    chartData.value = []\n  } finally {\n    isLoading.value = false\n  }\n}\n\nconst handleError = (err) => {\n  error.value = err\n  console.error('TimeseriesPanel error:', err)\n}\n\nconst handlePointClick = (point) => {\n  console.log('Point clicked:', point)\n}\n\n// Watchers\nwatch([selectedProduct, selectedCountry, selectedMetric], () => {\n  updateChartData()\n})\n\n// Lifecycle\nonMounted(async () => {\n  await loadData()\n})\n</script>\n\n<style scoped>\n.timeseries-panel {\n  @apply flex flex-col h-full bg-white dark:bg-gray-800 rounded-lg shadow-lg;\n}\n\n.panel-header {\n  @apply p-6 border-b border-gray-200 dark:border-gray-700;\n}\n\n.panel-title {\n  @apply text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2;\n}\n\n.panel-description {\n  @apply text-gray-600 dark:text-gray-400;\n}\n\n.panel-controls {\n  @apply p-6 bg-gray-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700;\n}\n\n.filters-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 items-end;\n}\n\n.filter-group {\n  @apply flex flex-col;\n}\n\n.panel-content {\n  @apply flex-1 p-6 min-h-0;\n}\n\n.error-container,\n.loading-container,\n.empty-state {\n  @apply flex flex-col items-center justify-center h-full;\n}\n\n.loading-text {\n  @apply mt-4 text-gray-600 dark:text-gray-400;\n}\n\n.empty-icon {\n  @apply text-6xl mb-4;\n}\n\n.empty-state h3 {\n  @apply text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2;\n}\n\n.empty-state p {\n  @apply text-gray-500 dark:text-gray-400;\n}\n\n.chart-container {\n  @apply w-full h-full min-h-[500px] bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700;\n}\n\n.panel-footer {\n  @apply p-6 bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700;\n}\n\n.stats-grid {\n  @apply grid grid-cols-3 gap-4;\n}\n\n.stat-item {\n  @apply text-center;\n}\n\n.stat-label {\n  @apply block text-sm text-gray-500 dark:text-gray-400 mb-1;\n}\n\n.stat-value {\n  @apply block text-lg font-semibold text-gray-900 dark:text-gray-100;\n}\n</style>","<template>\n  <div class=\"simulation-panel\">\n    <ErrorBoundary @error=\"handleError\">\n      <div class=\"panel-header\">\n        <h2 class=\"panel-title\">Simulationsmodelle</h2>\n        <p class=\"panel-description\">\n          Interaktive Monte-Carlo-Simulationen für landwirtschaftliche Szenarien\n        </p>\n        \n        <div class=\"simulation-info\">\n          <div class=\"info-section\">\n            <h3 class=\"info-title\">Was wird berechnet?</h3>\n            <p class=\"info-text\">\n              Diese Simulation verwendet <strong>Monte-Carlo-Verfahren</strong> mit 500 stochastischen Pfaden, um die Auswirkungen verschiedener Faktoren auf die globale Nahrungsmittelproduktion zu modellieren. Basierend auf <strong>Geometrischer Brownscher Bewegung</strong> werden realistische Produktionstrends und Volatilitäten berechnet.\n            </p>\n          </div>\n          \n          <div class=\"info-section\">\n            <h3 class=\"info-title\">Wie funktioniert es?</h3>\n            <div class=\"info-steps\">\n              <div class=\"step\">\n                <span class=\"step-number\">1</span>\n                <span class=\"step-text\"><strong>Szenario wählen:</strong> Klicken Sie auf ein vordefiniertes Szenario, um die Parameter automatisch zu setzen</span>\n              </div>\n              <div class=\"step\">\n                <span class=\"step-number\">2</span>\n                <span class=\"step-text\"><strong>Parameter anpassen:</strong> Nutzen Sie die Slider, um Faktoren wie Klimawandel, Bevölkerungswachstum, Technologiefortschritt und wirtschaftliche Stabilität zu justieren</span>\n              </div>\n              <div class=\"step\">\n                <span class=\"step-number\">3</span>\n                <span class=\"step-text\"><strong>Simulation starten:</strong> Die Berechnung erfolgt in Echtzeit und zeigt Auswirkungen auf Produktion, Ernährungssicherheit, Umwelt und Wirtschaft</span>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"info-section\">\n            <h3 class=\"info-title\">Berechnungsgrundlage</h3>\n            <p class=\"info-text\">\n              Jeder Faktor beeinflusst die Simulation mathematisch: <strong>Klimawandel</strong> reduziert Erträge, <strong>Bevölkerungswachstum</strong> erhöht die Nachfrage, <strong>Technologie</strong> steigert die Effizienz und <strong>wirtschaftliche Instabilität</strong> erhöht die Volatilität. Die Ergebnisse zeigen 10-Jahres-Projektionen mit Konfidenzintervallen.\n            </p>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"panel-content\">\n        <div v-if=\"hasError\" class=\"error-container\">\n          <ErrorDisplay\n            :error=\"error\"\n            title=\"Fehler in der Simulation\"\n            :showRetry=\"true\"\n            @retry=\"runSimulation\"\n          />\n        </div>\n\n        <div v-else-if=\"isLoading\" class=\"loading-container\">\n          <LoadingSpinner size=\"lg\" />\n          <p class=\"loading-text\">Simulation läuft...</p>\n        </div>\n\n        <div v-else class=\"simulation-content\">\n          <!-- Scenario Selection -->\n          <div class=\"scenario-section\">\n            <h3 class=\"section-title\">Szenario auswählen</h3>\n            <div class=\"scenario-grid\">\n              <div\n                v-for=\"scenario in availableScenarios\"\n                :key=\"scenario.id\"\n                class=\"scenario-card\"\n                :class=\"{\n                  'scenario-active': selectedScenario === scenario.id\n                }\"\n                @click=\"handleScenarioSelect(scenario.id)\"\n              >\n                <div class=\"scenario-icon\">{{ scenario.icon }}</div>\n                <h4 class=\"scenario-name\">{{ scenario.name }}</h4>\n                <p class=\"scenario-description\">{{ scenario.description }}</p>\n              </div>\n            </div>\n          </div>\n\n          <!-- Scenario Configuration -->\n          <div class=\"config-section\">\n            <h3 class=\"section-title\">Parameter-Konfiguration</h3>\n            <div class=\"config-grid\">\n              <div class=\"config-item\">\n                <div class=\"slider-header\">\n                  <label>Klimawandel-Intensität</label>\n                  <span class=\"slider-value\">{{ scenarioConfig.climateChange.toFixed(1) }}</span>\n                </div>\n                <div class=\"slider-description\">{{ getSliderDescription('climate', scenarioConfig.climateChange) }}</div>\n                <RangeSlider\n                  v-model=\"scenarioConfig.climateChange\"\n                  :min=\"0.5\"\n                  :max=\"1.5\"\n                  :step=\"0.1\"\n                />\n              </div>\n              \n              <div class=\"config-item\">\n                <div class=\"slider-header\">\n                  <label>Bevölkerungswachstum</label>\n                  <span class=\"slider-value\">{{ scenarioConfig.populationGrowth.toFixed(1) }}</span>\n                </div>\n                <div class=\"slider-description\">{{ getSliderDescription('population', scenarioConfig.populationGrowth) }}</div>\n                <RangeSlider\n                  v-model=\"scenarioConfig.populationGrowth\"\n                  :min=\"0.5\"\n                  :max=\"2.0\"\n                  :step=\"0.1\"\n                />\n              </div>\n              \n              <div class=\"config-item\">\n                <div class=\"slider-header\">\n                  <label>Technologiefortschritt</label>\n                  <span class=\"slider-value\">{{ scenarioConfig.techProgress.toFixed(1) }}</span>\n                </div>\n                <div class=\"slider-description\">{{ getSliderDescription('tech', scenarioConfig.techProgress) }}</div>\n                <RangeSlider\n                  v-model=\"scenarioConfig.techProgress\"\n                  :min=\"0.5\"\n                  :max=\"2.0\"\n                  :step=\"0.1\"\n                />\n              </div>\n              \n              <div class=\"config-item\">\n                <div class=\"slider-header\">\n                  <label>Wirtschaftliche Stabilität</label>\n                  <span class=\"slider-value\">{{ scenarioConfig.economicGrowth.toFixed(1) }}</span>\n                </div>\n                <div class=\"slider-description\">{{ getSliderDescription('economic', scenarioConfig.economicGrowth) }}</div>\n                <RangeSlider\n                  v-model=\"scenarioConfig.economicGrowth\"\n                  :min=\"0.5\"\n                  :max=\"1.8\"\n                  :step=\"0.1\"\n                />\n              </div>\n            </div>\n            \n            <div class=\"config-actions\">\n              <div class=\"action-buttons\">\n                <BaseButton @click=\"runSimulation\" :disabled=\"isLoading\" variant=\"primary\">\n                  <LoadingSpinner v-if=\"isLoading\" size=\"sm\" />\n                  {{ isLoading ? 'Simuliert...' : 'Simulation starten' }}\n                </BaseButton>\n                \n                <BaseButton @click=\"resetConfig\" variant=\"outline\">\n                  Zurücksetzen\n                </BaseButton>\n              </div>\n              \n              <div v-if=\"hasConfigChanged\" class=\"config-changed-indicator\">\n                ⚠️ Parameter geändert - Simulation neu starten\n              </div>\n            </div>\n          </div>\n\n          <!-- Simulation Results -->\n          <div v-if=\"simulationResults\" class=\"results-section\">\n            <div class=\"results-header\">\n              <h3 class=\"section-title\">Simulationsergebnisse</h3>\n              <div class=\"results-meta\">\n                <span class=\"meta-item\">\n                  <strong>Szenario:</strong> {{ simulationResults.scenario }}\n                </span>\n                <span class=\"meta-item\">\n                  <strong>Methode:</strong> {{ simulationResults.dataSource }}\n                </span>\n                <span class=\"meta-item\" v-if=\"simulationResults.simulationDetails\">\n                  <strong>Details:</strong> \n                  {{ simulationResults.simulationDetails.totalPaths }} Pfade, \n                  {{ simulationResults.simulationDetails.confidenceLevel }} Konfidenz, \n                  {{ simulationResults.simulationDetails.timeHorizon }}\n                </span>\n              </div>\n            </div>\n            \n            <div class=\"results-grid\">\n              <div class=\"result-card\">\n                <div class=\"result-header\">\n                  <h4>Produktionsänderung</h4>\n                  <span class=\"result-icon\">🌾</span>\n                </div>\n                <div class=\"result-value\" :class=\"getChangeClass(simulationResults.productionChange)\">\n                  {{ formatChange(simulationResults.productionChange) }}%\n                </div>\n                <p class=\"result-description\">\n                  {{ getProductionDescription(simulationResults.productionChange) }}\n                </p>\n              </div>\n              \n              <div class=\"result-card\">\n                <div class=\"result-header\">\n                  <h4>Ernährungssicherheit</h4>\n                  <span class=\"result-icon\">🍽️</span>\n                </div>\n                <div class=\"result-value\" :class=\"getFoodSecurityClass(simulationResults.foodSecurity)\">\n                  {{ simulationResults.foodSecurity }}%\n                </div>\n                <p class=\"result-description\">\n                  {{ getFoodSecurityDescription(simulationResults.foodSecurity) }}\n                </p>\n              </div>\n              \n              <div class=\"result-card\">\n                <div class=\"result-header\">\n                  <h4>Umweltauswirkung</h4>\n                  <span class=\"result-icon\">🌍</span>\n                </div>\n                <div class=\"result-value\" :class=\"getEnvironmentClass(simulationResults.environmentImpact)\">\n                  {{ formatChange(simulationResults.environmentImpact) }}%\n                </div>\n                <p class=\"result-description\">\n                  {{ getEnvironmentDescription(simulationResults.environmentImpact) }}\n                </p>\n              </div>\n              \n              <div class=\"result-card\">\n                <div class=\"result-header\">\n                  <h4>Wirtschaftlicher Effekt</h4>\n                  <span class=\"result-icon\">💰</span>\n                </div>\n                <div class=\"result-value\" :class=\"getChangeClass(simulationResults.economicImpact)\">\n                  {{ formatChange(simulationResults.economicImpact) }}%\n                </div>\n                <p class=\"result-description\">\n                  {{ getEconomicDescription(simulationResults.economicImpact) }}\n                </p>\n              </div>\n            </div>\n\n            <!-- Simulation Chart -->\n            <div class=\"chart-container\">\n              <SimulationChart\n                :data=\"simulationResults.timeSeriesData\"\n                :config=\"chartConfig\"\n                @scenario-select=\"handleScenarioSelect\"\n              />\n            </div>\n          </div>\n\n          <!-- Empty State -->\n          <div v-if=\"!simulationResults && !isLoading\" class=\"empty-state\">\n            <div class=\"empty-icon\">⚙️</div>\n            <h3>Simulation bereit</h3>\n            <p>Konfigurieren Sie die Parameter und starten Sie eine Simulation.</p>\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted } from 'vue'\nimport { useErrorHandling } from '@/composables/useErrorHandling'\nimport ErrorBoundary from '@/components/ui/ErrorBoundary.vue'\nimport ErrorDisplay from '@/components/ui/ErrorDisplay.vue'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner.vue'\nimport BaseButton from '@/components/ui/BaseButton.vue'\nimport RangeSlider from '@/components/ui/RangeSlider.vue'\nimport SimulationChart from '@/components/visualizations/SimulationChart.vue'\n\n// Composables\nconst { handleError: handleErrorUtil, wrapAsync } = useErrorHandling()\n\n// Reactive state\nconst isLoading = ref(false)\nconst error = ref(null)\nconst simulationResults = ref(null)\nconst selectedScenario = ref('climate_shock')\nconst hasConfigChanged = ref(false)\nconst lastAppliedConfig = ref(null)\n\nconst scenarioConfig = ref({\n  climateChange: 1.0,\n  populationGrowth: 1.2,\n  techProgress: 1.1,\n  economicGrowth: 1.5\n})\n\n// Computed properties\nconst hasError = computed(() => error.value !== null)\n\n\nconst availableScenarios = computed(() => [\n  { \n    id: 'climate_shock', \n    name: 'Klimaschock', \n    description: 'Extreme Wetterereignisse und Klimawandel',\n    icon: '🌡️',\n    sliderPreset: {\n      climateChange: 1.4,\n      populationGrowth: 1.1,\n      techProgress: 0.9,\n      economicGrowth: 0.8\n    }\n  },\n  { \n    id: 'population_pressure', \n    name: 'Bevölkerungsdruck', \n    description: 'Schnelles Bevölkerungswachstum vs. Produktionskapazität',\n    icon: '👥',\n    sliderPreset: {\n      climateChange: 1.1,\n      populationGrowth: 1.8,\n      techProgress: 1.1,\n      economicGrowth: 1.3\n    }\n  },\n  { \n    id: 'tech_revolution', \n    name: 'Technologie-Revolution', \n    description: 'Precision Farming und Biotechnologie',\n    icon: '🔬',\n    sliderPreset: {\n      climateChange: 0.9,\n      populationGrowth: 1.2,\n      techProgress: 1.8,\n      economicGrowth: 1.6\n    }\n  },\n  { \n    id: 'trade_disruption', \n    name: 'Handelsdisruption', \n    description: 'Geopolitische Spannungen und Handelskriege',\n    icon: '📈',\n    sliderPreset: {\n      climateChange: 1.2,\n      populationGrowth: 1.1,\n      techProgress: 1.0,\n      economicGrowth: 0.7\n    }\n  },\n  { \n    id: 'custom', \n    name: 'Benutzerdefiniert', \n    description: 'Eigene Parameter-Kombination',\n    icon: '⚙️',\n    sliderPreset: {\n      climateChange: 1.0,\n      populationGrowth: 1.0,\n      techProgress: 1.0,\n      economicGrowth: 1.0\n    }\n  }\n])\n\nconst chartConfig = computed(() => ({\n  width: 800,\n  height: 400,\n  margin: { top: 20, right: 30, bottom: 40, left: 80 },\n  showConfidenceInterval: true,\n  showScenarios: true,\n  interactive: true,\n  animated: true\n}))\n\n// Simulation calculation functions\nconst calculateStochasticPath = (baseValue, trend, volatility, steps, deltaT = 1) => {\n  const path = [baseValue]\n  let currentValue = baseValue\n  \n  for (let i = 1; i <= steps; i++) {\n    // Geometric Brownian Motion with mean reversion\n    const dt = deltaT\n    const randomShock = (Math.random() - 0.5) * 2 // Normal-ish distribution\n    const meanReversion = 0.1 * (baseValue - currentValue) / baseValue\n    \n    const drift = trend + meanReversion\n    const diffusion = volatility * randomShock * Math.sqrt(dt)\n    \n    currentValue = currentValue * (1 + drift * dt + diffusion)\n    path.push(Math.max(0, currentValue)) // Prevent negative values\n  }\n  \n  return path\n}\n\nconst runMonteCarloSimulation = (config, simulations = 500) => {\n  const paths = []\n  const years = 10\n  const baseProduction = 1000000 // Base production in tons\n  \n  // Calculate trend based on slider values\n  const climateTrend = (config.climateChange - 1) * -0.03 // Negative climate impact\n  const populationTrend = (config.populationGrowth - 1) * 0.02 // Population drives demand\n  const techTrend = (config.techProgress - 1) * 0.04 // Tech improves efficiency\n  const economicTrend = (config.economicGrowth - 1) * 0.015 // Economic growth effect\n  \n  const totalTrend = climateTrend + populationTrend + techTrend + economicTrend\n  \n  // Calculate volatility based on uncertainty from factors\n  const baseVolatility = 0.1\n  const climateVolatility = Math.abs(config.climateChange - 1) * 0.08\n  const tradeVolatility = Math.abs(config.economicGrowth - 1) * 0.05\n  const totalVolatility = baseVolatility + climateVolatility + tradeVolatility\n  \n  // Run multiple simulations\n  for (let sim = 0; sim < simulations; sim++) {\n    const path = calculateStochasticPath(\n      baseProduction,\n      totalTrend,\n      totalVolatility,\n      years\n    )\n    paths.push(path)\n  }\n  \n  \n  return paths\n}\n\nconst calculateConfidenceIntervals = (paths, confidenceLevel = 0.9) => {\n  const steps = paths[0].length\n  const intervals = []\n  \n  for (let step = 0; step < steps; step++) {\n    const values = paths.map(path => path[step]).sort((a, b) => a - b)\n    const lowerIndex = Math.floor((1 - confidenceLevel) / 2 * values.length)\n    const upperIndex = Math.floor((1 + confidenceLevel) / 2 * values.length)\n    \n    intervals.push({\n      mean: values.reduce((sum, val) => sum + val, 0) / values.length,\n      lower: values[lowerIndex],\n      upper: values[upperIndex],\n      median: values[Math.floor(values.length / 2)]\n    })\n  }\n  \n  return intervals\n}\n\n// Methods\nconst runSimulation = wrapAsync(async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    // Get selected scenario for display purposes only\n    const scenario = availableScenarios.value.find(s => s.id === selectedScenario.value)\n    const scenarioName = scenario ? scenario.name : 'Benutzerdefiniert'\n    \n    // Simulate some delay for realism\n    await new Promise(resolve => setTimeout(resolve, 1500))\n    \n    const config = scenarioConfig.value\n    \n    // Run Monte Carlo simulation based on current slider values\n    const simulationPaths = runMonteCarloSimulation(config)\n    const confidenceIntervals = calculateConfidenceIntervals(simulationPaths)\n    \n    // Create baseline (neutral scenario with all sliders at 1.0)\n    const baselineConfig = {\n      climateChange: 1.0,\n      populationGrowth: 1.0,\n      techProgress: 1.0,\n      economicGrowth: 1.0\n    }\n    const baselinePaths = runMonteCarloSimulation(baselineConfig, 100)\n    const baselineIntervals = calculateConfidenceIntervals(baselinePaths)\n    const baselinePath = baselineIntervals.map(interval => interval.mean)\n    \n    // Calculate key metrics\n    const finalScenario = confidenceIntervals[confidenceIntervals.length - 1].mean\n    const finalBaseline = baselinePath[baselinePath.length - 1]\n    const productionChange = ((finalScenario - finalBaseline) / finalBaseline * 100)\n    \n    // Calculate derived metrics with more sophisticated formulas\n    const foodSecurity = Math.max(15, Math.min(100, \n      65 + productionChange * 0.3 - \n      Math.abs(config.climateChange - 1) * 20 +\n      (config.techProgress - 1) * 15\n    ))\n    \n    const environmentImpact = (\n      (config.climateChange - 1) * 30 +\n      (config.populationGrowth - 1) * 12 +\n      (config.techProgress - 1) * -15 + // Tech reduces impact\n      (config.economicGrowth - 1) * 8 +\n      (productionChange > 0 ? productionChange * 0.1 : 0) // Intensification\n    )\n    \n    const economicImpact = \n      productionChange * 0.8 + \n      (config.techProgress - 1) * 40 +\n      (config.economicGrowth - 1) * 50 -\n      Math.abs(environmentImpact) * 0.2 // Environmental costs\n    \n    // Prepare time series data\n    const currentYear = new Date().getFullYear()\n    const timeSeriesData = confidenceIntervals.map((interval, index) => ({\n      year: currentYear + index,\n      baseline: baselinePath[index],\n      scenario: interval.mean,\n      lower: interval.lower,\n      upper: interval.upper\n    }))\n    \n    simulationResults.value = {\n      productionChange: Math.round(productionChange * 10) / 10,\n      foodSecurity: Math.round(foodSecurity),\n      environmentImpact: Math.round(environmentImpact * 10) / 10,\n      economicImpact: Math.round(economicImpact * 10) / 10,\n      timeSeriesData,\n      config: { ...config },\n      scenario: scenarioName,\n      dataSource: `Monte Carlo Simulation (${simulationPaths.length} Pfade)`,\n      simulationDetails: {\n        totalPaths: simulationPaths.length,\n        confidenceLevel: '90%',\n        timeHorizon: '10 Jahre',\n        method: 'Geometrische Brownsche Bewegung'\n      }\n    }\n    \n    // Update last applied config and reset change indicator\n    lastAppliedConfig.value = { ...config }\n    hasConfigChanged.value = false\n    \n  } catch (err) {\n    error.value = err\n    console.error('Simulation error:', err)\n  } finally {\n    isLoading.value = false\n  }\n}, {\n  component: 'SimulationPanel',\n  operation: 'runSimulation'\n})\n\nconst resetConfig = () => {\n  const resetValues = {\n    climateChange: 1.0,\n    populationGrowth: 1.0,\n    techProgress: 1.0,\n    economicGrowth: 1.0\n  }\n  \n  scenarioConfig.value = { ...resetValues }\n  lastAppliedConfig.value = { ...resetValues }\n  simulationResults.value = null\n  hasConfigChanged.value = false\n  selectedScenario.value = 'custom'\n}\n\n// Watch for slider changes\nwatch(scenarioConfig, (newConfig) => {\n  // Only mark as changed if we have a reference config and values actually differ\n  if (lastAppliedConfig.value) {\n    const hasActualChanges = Object.keys(newConfig).some(key => {\n      return Math.abs(newConfig[key] - lastAppliedConfig.value[key]) > 0.05 // Allow small floating point differences\n    })\n    \n    hasConfigChanged.value = hasActualChanges\n    \n    if (hasActualChanges) {\n      simulationResults.value = null // Clear results when config actually changes\n    }\n  }\n}, { deep: true })\n\n// Load initial data\nonMounted(async () => {\n  // Pre-select first scenario and apply its preset\n  if (availableScenarios.value.length > 0) {\n    handleScenarioSelect(availableScenarios.value[0].id)\n  }\n})\n\nconst handleError = (err) => {\n  error.value = err\n  handleErrorUtil(err, {\n    component: 'SimulationPanel',\n    action: 'component_error'\n  })\n}\n\nconst handleScenarioSelect = (scenarioId) => {\n  selectedScenario.value = scenarioId\n  \n  // Apply scenario preset to sliders\n  const scenario = availableScenarios.value.find(s => s.id === scenarioId)\n  if (scenario && scenario.sliderPreset) {\n    scenarioConfig.value = { ...scenario.sliderPreset }\n    \n    // Update last applied config to track changes\n    lastAppliedConfig.value = { ...scenario.sliderPreset }\n    \n    // Clear previous results and reset change indicator\n    simulationResults.value = null\n    hasConfigChanged.value = false\n  }\n  \n  console.log('Scenario selected:', scenarioId, 'Sliders updated:', scenarioConfig.value)\n}\n\n// Helper methods\nconst formatChange = (value) => {\n  return value > 0 ? `+${value.toFixed(1)}` : value.toFixed(1)\n}\n\nconst getChangeClass = (value) => {\n  if (value > 0) return 'text-green-600 dark:text-green-400'\n  if (value < 0) return 'text-red-600 dark:text-red-400'\n  return 'text-gray-600 dark:text-gray-400'\n}\n\nconst getFoodSecurityClass = (value) => {\n  if (value >= 80) return 'text-green-600 dark:text-green-400'\n  if (value >= 60) return 'text-yellow-600 dark:text-yellow-400'\n  return 'text-red-600 dark:text-red-400'\n}\n\nconst getEnvironmentClass = (value) => {\n  if (value <= 0) return 'text-green-600 dark:text-green-400'\n  if (value <= 10) return 'text-yellow-600 dark:text-yellow-400'\n  return 'text-red-600 dark:text-red-400'\n}\n\n// Description helpers\nconst getProductionDescription = (value) => {\n  if (value > 10) return 'Starke Produktionssteigerung erwartet'\n  if (value > 0) return 'Moderate Produktionssteigerung'\n  if (value > -10) return 'Leichter Produktionsrückgang'\n  return 'Erheblicher Produktionsrückgang'\n}\n\nconst getFoodSecurityDescription = (value) => {\n  if (value >= 80) return 'Hohe Ernährungssicherheit'\n  if (value >= 60) return 'Mittlere Ernährungssicherheit'\n  if (value >= 40) return 'Niedrige Ernährungssicherheit'\n  return 'Kritische Ernährungslage'\n}\n\nconst getEnvironmentDescription = (value) => {\n  if (value <= 0) return 'Positive Umweltauswirkungen'\n  if (value <= 5) return 'Geringe Umweltbelastung'\n  if (value <= 15) return 'Mäßige Umweltbelastung'\n  return 'Hohe Umweltbelastung'\n}\n\nconst getEconomicDescription = (value) => {\n  if (value > 20) return 'Starke wirtschaftliche Vorteile'\n  if (value > 0) return 'Positive wirtschaftliche Effekte'\n  if (value > -10) return 'Geringe wirtschaftliche Verluste'\n  return 'Erhebliche wirtschaftliche Einbußen'\n}\n\nconst getSliderDescription = (type, value) => {\n  switch (type) {\n    case 'climate':\n      if (value < 0.9) return 'Milde Klimabedingungen'\n      if (value > 1.3) return 'Extreme Klimaereignisse'\n      return 'Normale Klimabedingungen'\n    \n    case 'population':\n      if (value < 0.9) return 'Schrumpfende Bevölkerung'\n      if (value > 1.5) return 'Schnelles Bevölkerungswachstum'\n      return 'Stabiles Bevölkerungswachstum'\n    \n    case 'tech':\n      if (value < 0.9) return 'Stagnierende Technologie'\n      if (value > 1.5) return 'Durchbruch-Innovationen'\n      return 'Stetiger Technologiefortschritt'\n    \n    case 'economic':\n      if (value < 0.8) return 'Wirtschaftskrise'\n      if (value > 1.4) return 'Wirtschaftsboom'\n      return 'Stabile Wirtschaftslage'\n    \n    default:\n      return ''\n  }\n}\n</script>\n\n<style scoped>\n.simulation-panel {\n  @apply flex flex-col h-full bg-white dark:bg-gray-800 rounded-lg shadow-lg;\n}\n\n.panel-header {\n  @apply p-6 border-b border-gray-200 dark:border-gray-700;\n}\n\n.panel-title {\n  @apply text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2;\n}\n\n.panel-description {\n  @apply text-gray-600 dark:text-gray-400 mb-6;\n}\n\n.simulation-info {\n  @apply grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6;\n}\n\n.info-section {\n  @apply bg-gray-50 dark:bg-gray-900 rounded-lg p-4;\n}\n\n.info-title {\n  @apply text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3;\n}\n\n.info-text {\n  @apply text-sm text-gray-700 dark:text-gray-300 leading-relaxed;\n}\n\n.info-steps {\n  @apply space-y-3;\n}\n\n.step {\n  @apply flex items-start space-x-3;\n}\n\n.step-number {\n  @apply flex-shrink-0 w-6 h-6 bg-blue-600 dark:bg-blue-500 text-white text-xs font-bold rounded-full flex items-center justify-center;\n}\n\n.step-text {\n  @apply text-sm text-gray-700 dark:text-gray-300 leading-relaxed;\n}\n\n.panel-controls {\n  @apply p-6 bg-gray-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700;\n}\n\n.panel-content {\n  @apply flex-1 p-6 overflow-auto;\n}\n\n.simulation-content {\n  @apply space-y-8;\n}\n\n.config-section,\n.results-section {\n  @apply space-y-4;\n}\n\n.section-title {\n  @apply text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4;\n}\n\n.config-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 gap-6;\n}\n\n.config-item {\n  @apply space-y-2;\n}\n\n.slider-header {\n  @apply flex justify-between items-center;\n}\n\n.config-item label {\n  @apply text-sm font-medium text-gray-700 dark:text-gray-300;\n}\n\n.slider-value {\n  @apply text-sm font-bold text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 px-2 py-1 rounded;\n}\n\n.scenario-section {\n  @apply space-y-4 mb-8;\n}\n\n.scenario-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 gap-4;\n}\n\n.scenario-card {\n  @apply p-4 border border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer transition-all;\n  @apply hover:border-gray-300 dark:hover:border-gray-600 hover:shadow-md;\n}\n\n.scenario-active {\n  @apply border-blue-500 dark:border-blue-400 bg-blue-50 dark:bg-blue-900/20 shadow-md;\n}\n\n.scenario-icon {\n  @apply text-2xl mb-2;\n}\n\n.scenario-name {\n  @apply font-semibold text-gray-900 dark:text-gray-100 mb-1;\n}\n\n.scenario-description {\n  @apply text-sm text-gray-600 dark:text-gray-400;\n}\n\n.config-actions {\n  @apply flex flex-col space-y-3 pt-4;\n}\n\n.action-buttons {\n  @apply flex space-x-4;\n}\n\n.config-changed-indicator {\n  @apply text-sm text-orange-600 dark:text-orange-400 bg-orange-50 dark:bg-orange-900/20 px-3 py-2 rounded-lg border border-orange-200 dark:border-orange-800;\n}\n\n.slider-description {\n  @apply text-xs text-gray-500 dark:text-gray-400 mb-2 font-medium;\n}\n\n.results-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6;\n}\n\n.results-header {\n  @apply mb-6;\n}\n\n.results-meta {\n  @apply flex flex-wrap gap-4 mt-2 text-sm text-gray-600 dark:text-gray-400;\n}\n\n.meta-item {\n  @apply flex items-center gap-1;\n}\n\n.result-card {\n  @apply bg-gray-50 dark:bg-gray-900 rounded-lg p-4;\n}\n\n.result-header {\n  @apply flex items-center justify-between mb-3;\n}\n\n.result-card h4 {\n  @apply text-sm font-medium text-gray-700 dark:text-gray-300;\n}\n\n.result-icon {\n  @apply text-lg;\n}\n\n.result-value {\n  @apply text-2xl font-bold mb-2;\n}\n\n.result-description {\n  @apply text-xs text-gray-500 dark:text-gray-400;\n}\n\n.chart-container {\n  @apply w-full h-96 bg-gray-50 dark:bg-gray-900 rounded-lg p-4;\n}\n\n.error-container,\n.loading-container,\n.empty-state {\n  @apply flex flex-col items-center justify-center h-64;\n}\n\n.loading-text {\n  @apply mt-4 text-gray-600 dark:text-gray-400;\n}\n\n.empty-icon {\n  @apply text-6xl mb-4;\n}\n\n.empty-state h3 {\n  @apply text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2;\n}\n\n.empty-state p {\n  @apply text-gray-500 dark:text-gray-400;\n}\n</style>","<template>\n  <div class=\"ml-panel\">\n    <ErrorBoundary @error=\"handleError\">\n      <div class=\"panel-header\">\n        <h2 class=\"panel-title\">ML Prognosen</h2>\n        <p class=\"panel-description\">\n          Machine Learning Vorhersagen für landwirtschaftliche Produktion\n        </p>\n      </div>\n\n      <div class=\"panel-controls\">\n        <div class=\"filters-grid\">\n          <div class=\"filter-group\">\n            <label>Prognosentyp</label>\n            <SearchableSelect\n              v-model=\"selectedForecastType\"\n              :options=\"forecastTypeOptions\"\n              placeholder=\"Prognosentyp auswählen...\"\n              @update:modelValue=\"loadAvailableForecasts\"\n            />\n          </div>\n          \n          <div class=\"filter-group\">\n            <label>Prognose</label>\n            <SearchableSelect\n              v-model=\"selectedForecast\"\n              :options=\"forecastOptions\"\n              placeholder=\"Prognose auswählen...\"\n              :disabled=\"availableForecasts.length === 0\"\n            />\n          </div>\n          \n          <div class=\"filter-group\">\n            <label>Modell</label>\n            <SearchableSelect\n              v-model=\"selectedModel\"\n              :options=\"modelOptions\"\n              placeholder=\"Modell auswählen...\"\n            />\n          </div>\n\n          <div class=\"filter-group\">\n            <label class=\"invisible\">Aktion</label>\n            <BaseButton @click=\"loadPredictions\" :disabled=\"isLoading || !selectedForecast\" class=\"w-full\">\n              <LoadingSpinner v-if=\"isLoading\" size=\"sm\" />\n              {{ isLoading ? 'Lädt...' : 'Prognosen laden' }}\n            </BaseButton>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"panel-content\">\n        <div v-if=\"hasError\" class=\"error-container\">\n          <ErrorDisplay\n            :error=\"error\"\n            title=\"Fehler beim Laden der ML-Prognosen\"\n            :showRetry=\"true\"\n            @retry=\"loadPredictions\"\n          />\n        </div>\n\n        <div v-else-if=\"isLoading\" class=\"loading-container\">\n          <LoadingSpinner size=\"lg\" />\n          <p class=\"loading-text\">Lade ML-Prognosen...</p>\n        </div>\n\n        <div v-else-if=\"predictions.length > 0\" class=\"predictions-content\">\n          <!-- Forecast Info -->\n          <div v-if=\"forecastData\" class=\"forecast-info\">\n            <h3 class=\"info-title\">{{ getFormattedForecastTitle() }}</h3>\n            <div class=\"info-grid\">\n              <div class=\"info-item\">\n                <span class=\"info-label\">Einheit:</span>\n                <span class=\"info-value\">{{ forecastData.unit || '1000 t' }}</span>\n              </div>\n              <div class=\"info-item\">\n                <span class=\"info-label\">Prognosezeitraum:</span>\n                <span class=\"info-value\">2023 - 2035</span>\n              </div>\n              <div class=\"info-item\">\n                <span class=\"info-label\">Modelltyp:</span>\n                <span class=\"info-value\">{{ getModelLabel(selectedModel) }}</span>\n              </div>\n              <div class=\"info-item\">\n                <span class=\"info-label\">Konfidenzintervall:</span>\n                <span class=\"info-value\">95%</span>\n              </div>\n            </div>\n          </div>\n\n          <!-- Model Performance -->\n          <div class=\"model-stats\">\n            <h3 class=\"stats-title\">Modell-Performance</h3>\n            <div v-if=\"modelStats.r2 && parseFloat(modelStats.r2) < 0\" class=\"model-warning\">\n              <p class=\"warning-title\">⚠️ Warnung: Schlechte Modellperformance</p>\n              <p class=\"warning-text\">\n                Das lineare Modell ist für diese Daten ungeeignet. Bitte wechseln Sie zum polynomialen oder Ensemble-Modell für bessere Vorhersagen.\n              </p>\n            </div>\n            <!-- Ensemble Info -->\n            <div v-if=\"selectedModel === 'ensemble'\" class=\"ensemble-info\">\n              <p class=\"text-sm text-blue-600 dark:text-blue-400 mb-3\">\n                ℹ️ Ensemble-Modell kombiniert Linear- und Polynomialregressionen für robustere Vorhersagen.\n              </p>\n            </div>\n            \n            <div class=\"stats-grid\">\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">R² Score</div>\n                <div class=\"stat-value\" :class=\"getR2Class(modelStats.r2)\">{{ modelStats.r2 }}</div>\n                <div v-if=\"selectedModel === 'ensemble'\" class=\"stat-help text-xs text-gray-500 mt-1\">\n                  Durchschnitt der Einzelmodelle\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">RMSE</div>\n                <div class=\"stat-value\">{{ modelStats.rmse }}</div>\n                <div v-if=\"selectedModel === 'ensemble'\" class=\"stat-help text-xs text-gray-500 mt-1\">\n                  Gemittelte Wurzel der mittleren Quadratfehler\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">MAE</div>\n                <div class=\"stat-value\">{{ modelStats.mae }}</div>\n                <div v-if=\"selectedModel === 'ensemble'\" class=\"stat-help text-xs text-gray-500 mt-1\">\n                  Gemittelter mittlerer absoluter Fehler\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">{{ selectedModel === 'ensemble' ? 'Übereinstimmung' : 'Genauigkeit' }}</div>\n                <div class=\"stat-value text-green-600\">{{ modelStats.accuracy }}%</div>\n                <div v-if=\"selectedModel === 'ensemble'\" class=\"stat-help text-xs text-gray-500 mt-1\">\n                  Modellübereinstimmung zwischen Linear- und Polynomialregression\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Predictions Chart -->\n          <div class=\"chart-container\">\n            <MLChart\n              :data=\"chartData\"\n              :config=\"chartConfig\"\n              @prediction-select=\"handlePredictionSelect\"\n              @confidence-toggle=\"handleConfidenceToggle\"\n            />\n          </div>\n\n          <!-- Insights Section -->\n          <div v-if=\"forecastData\" class=\"insights-section\">\n            <h3 class=\"insights-title\">Prognose-Einblicke</h3>\n            <div class=\"insights-grid\">\n              <div class=\"insight-card\">\n                <div class=\"insight-icon\">📈</div>\n                <div class=\"insight-content\">\n                  <h4>Wachstumstrend</h4>\n                  <p>{{ getGrowthInsight() }}</p>\n                </div>\n              </div>\n              <div class=\"insight-card\">\n                <div class=\"insight-icon\">🎯</div>\n                <div class=\"insight-content\">\n                  <h4>Prognosegenauigkeit</h4>\n                  <p>{{ getAccuracyInsight() }}</p>\n                </div>\n              </div>\n              <div class=\"insight-card\">\n                <div class=\"insight-icon\">⚠️</div>\n                <div class=\"insight-content\">\n                  <h4>Unsicherheitsfaktoren</h4>\n                  <p>{{ getUncertaintyInsight() }}</p>\n                </div>\n              </div>\n              <div class=\"insight-card\">\n                <div class=\"insight-icon\">🌍</div>\n                <div class=\"insight-content\">\n                  <h4>Globale Bedeutung</h4>\n                  <p>{{ getGlobalInsight() }}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Predictions Table -->\n          <div class=\"predictions-table\">\n            <h3 class=\"table-title\">Detaillierte Prognosen</h3>\n            <div class=\"table-container\">\n              <table class=\"predictions-table-element\">\n                <thead>\n                  <tr>\n                    <th>Jahr</th>\n                    <th>Prognose</th>\n                    <th>Konfidenzintervall</th>\n                    <th>Trend</th>\n                    <th>Zuverlässigkeit</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr v-for=\"prediction in predictions\" :key=\"prediction.year\">\n                    <td>{{ prediction.year }}</td>\n                    <td>{{ formatValue(prediction.predicted_value) }}</td>\n                    <td>\n                      {{ formatValue(prediction.confidence_lower) }} - \n                      {{ formatValue(prediction.confidence_upper) }}\n                    </td>\n                    <td>\n                      <span :class=\"getTrendClass(prediction.trend)\">\n                        {{ formatTrend(prediction.trend) }}\n                      </span>\n                    </td>\n                    <td>\n                      <div class=\"reliability-bar\">\n                        <div \n                          class=\"reliability-fill\"\n                          :style=\"{ width: `${prediction.reliability}%` }\"\n                          :class=\"getReliabilityClass(prediction.reliability)\"\n                        ></div>\n                        <span class=\"reliability-text\">{{ prediction.reliability }}%</span>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n        <div v-else class=\"empty-state\">\n          <div class=\"empty-icon\">🤖</div>\n          <h3>Keine Prognosen geladen</h3>\n          <p>Wählen Sie einen Prognosentyp und eine spezifische Prognose aus, dann klicken Sie auf \"Prognosen laden\".</p>\n        </div>\n      </div>\n    </ErrorBoundary>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted } from 'vue'\nimport { useDataStore } from '@/stores/useDataStore'\nimport { useErrorHandling } from '@/composables/useErrorHandling'\nimport { getMLGermanName, productMappings } from '@/utils/productMappings'\nimport ErrorBoundary from '@/components/ui/ErrorBoundary.vue'\nimport ErrorDisplay from '@/components/ui/ErrorDisplay.vue'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner.vue'\nimport BaseButton from '@/components/ui/BaseButton.vue'\nimport SearchableSelect from '@/components/ui/SearchableSelect.vue'\nimport MLChart from '@/components/visualizations/MLChart.vue'\n\n// Store and composables\nconst dataStore = useDataStore()\nconst { handleError: handleErrorUtil, wrapAsync } = useErrorHandling()\n\n// Reactive state\nconst selectedForecastType = ref('global')\nconst selectedForecast = ref('') // Will be set after loading forecasts\nconst selectedModel = ref('linear') // Will be updated based on model performance\nconst predictions = ref([])\nconst modelStats = ref({})\nconst isLoading = ref(false)\nconst error = ref(null)\nconst forecastData = ref(null)\nconst availableForecasts = ref([])\n\n// Computed properties\nconst hasError = computed(() => error.value !== null)\n\nconst forecastTypeOptions = computed(() => [\n  { value: 'global', label: 'Globale Prognosen' },\n  { value: 'regional', label: 'Regionale Prognosen' },\n  { value: 'country', label: 'Länder-spezifische Prognosen' }\n])\n\nconst forecastOptions = computed(() => {\n  console.log('Available forecasts:', availableForecasts.value)\n  return availableForecasts.value.map(forecast => {\n    const value = forecast.file.replace('.json', '')\n    let label = forecast.title || forecast.scenario || forecast.file\n    \n    // Extract product name from the filename and get German translation\n    if (typeof label === 'string') {\n      // Extract product part from filename (remove prefix and suffix)\n      // Handle patterns like: global_maize_and_products_forecast, world_cereals___excluding_beer_forecast, etc.\n      const cleanValue = value.replace(/_forecast$/, '')\n      let productName = ''\n      let regionPrefix = ''\n      \n      if (cleanValue.startsWith('global_')) {\n        productName = cleanValue.replace('global_', '')\n        regionPrefix = 'Globale'\n      } else if (cleanValue.startsWith('world_')) {\n        productName = cleanValue.replace('world_', '')\n        regionPrefix = 'Welt'\n      } else {\n        // Regional or country forecasts - find the last part that matches a product\n        const parts = cleanValue.split('_')\n        // Try to find product pattern from the end\n        for (let i = parts.length - 1; i >= 1; i--) {\n          const potentialProduct = parts.slice(i).join('_')\n          if (productMappings[potentialProduct] || potentialProduct.includes('and') || potentialProduct.includes('&')) {\n            productName = potentialProduct\n            regionPrefix = parts.slice(0, i).join('_').replace(/_/g, ' ')\n              .split(' ')\n              .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n              .join(' ')\n            break\n          }\n        }\n        \n        // Fallback: assume last part is product\n        if (!productName && parts.length > 1) {\n          productName = parts[parts.length - 1]\n          regionPrefix = parts.slice(0, -1).join('_').replace(/_/g, ' ')\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ')\n        }\n      }\n      \n      if (productName) {\n        const germanProductName = getMLGermanName(productName)\n        label = `${regionPrefix} ${germanProductName} Prognose`\n      }\n    }\n    \n    return {\n      value,\n      label\n    }\n  })\n})\n\nconst modelOptions = computed(() => [\n  { value: 'linear', label: 'Lineare Regression' },\n  { value: 'polynomial', label: 'Polynomiale Regression' },\n  { value: 'ensemble', label: 'Ensemble (Linear + Polynomial)' }\n])\n\nconst chartConfig = computed(() => ({\n  width: '100%',\n  height: 500,\n  margin: { top: 20, right: 30, bottom: 40, left: 80 },\n  showConfidenceInterval: true,\n  showHistorical: true,\n  showTrend: true,\n  interactive: true,\n  animated: true\n}))\n\n// Methods\nconst loadPredictions = wrapAsync(async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    console.log('Loading forecast:', selectedForecast.value)\n    // Load ML forecast data\n    const data = await dataStore.loadMLForecast(selectedForecast.value)\n    console.log('ML Forecast data loaded:', data)\n    \n    if (data) {\n      forecastData.value = data\n      \n      // Log model performance for user information (no automatic switching)\n      if (data.model_performance) {\n        const linearR2 = data.model_performance.linear?.r2_score || -999\n        const polyR2 = data.model_performance.polynomial?.r2_score || -999\n        \n        console.log('📊 MLPanel: Model performance:', {\n          linear: linearR2,\n          polynomial: polyR2,\n          currentModel: selectedModel.value\n        })\n      }\n      \n      // Extract predictions based on selected model\n      let forecastArray = []\n      if (selectedModel.value === 'ensemble' && data.ensemble_forecasts) {\n        console.log('Using ensemble forecasts')\n        forecastArray = data.ensemble_forecasts\n      } else if (data.forecasts && data.forecasts[selectedModel.value]) {\n        console.log(`Using ${selectedModel.value} forecasts`)\n        forecastArray = data.forecasts[selectedModel.value]\n      } else {\n        console.warn('No forecast data found for model:', selectedModel.value)\n        console.log('Available forecast keys:', data.forecasts ? Object.keys(data.forecasts) : 'No forecasts object')\n      }\n      \n      // Combine with historical data if available\n      const historicalData = data.historical_data || []\n      const lastHistoricalYear = historicalData.length > 0 \n        ? historicalData[historicalData.length - 1].year \n        : new Date().getFullYear() - 1\n      \n      // Transform forecast data\n      predictions.value = forecastArray.map(pred => {\n        const isEnsemble = selectedModel.value === 'ensemble'\n        const predictedValue = isEnsemble ? pred.ensemble_mean : pred.value\n        \n        console.log(`🔍 MLPanel: Processing prediction for ${pred.year}:`, {\n          isEnsemble,\n          originalValue: pred.value,\n          ensembleMean: pred.ensemble_mean,\n          predictedValue,\n          confidenceLower: pred.confidence_lower,\n          confidenceUpper: pred.confidence_upper\n        })\n        \n        return {\n          year: pred.year,\n          predicted_value: predictedValue,\n          confidence_lower: isEnsemble ? pred.model_min : pred.confidence_lower,\n          confidence_upper: isEnsemble ? pred.model_max : pred.confidence_upper,\n          trend: calculateTrend(pred, lastHistoricalYear),\n          reliability: isEnsemble \n            ? (pred.model_agreement * 100) \n            : (100 - pred.uncertainty_percent),\n          uncertainty_level: pred.uncertainty_level || getUncertaintyLevel(pred.uncertainty_percent),\n          model: selectedModel.value\n        }\n      })\n      \n      // Extract model performance stats\n      if (data.model_performance && data.model_performance[selectedModel.value]) {\n        const perf = data.model_performance[selectedModel.value]\n        modelStats.value = {\n          accuracy: ((perf.r2_score || 0) * 100).toFixed(1),\n          rmse: Math.sqrt(perf.mse || 0).toFixed(0),\n          mae: (perf.mae || 0).toFixed(0),\n          r2: (perf.r2_score || 0).toFixed(3)\n        }\n      } else if (selectedModel.value === 'ensemble' && data.model_performance) {\n        // For ensemble: calculate average performance from individual models\n        const models = Object.values(data.model_performance)\n        if (models.length > 0) {\n          const avgR2 = models.reduce((sum, m) => sum + (m.r2_score || 0), 0) / models.length\n          const avgMSE = models.reduce((sum, m) => sum + (m.mse || 0), 0) / models.length\n          const avgMAE = models.reduce((sum, m) => sum + (m.mae || 0), 0) / models.length\n          \n          modelStats.value = {\n            accuracy: (avgR2 * 100).toFixed(1),\n            rmse: Math.sqrt(avgMSE).toFixed(0),\n            mae: avgMAE.toFixed(0),\n            r2: avgR2.toFixed(3)\n          }\n        } else {\n          // Fallback for ensemble without individual model performance\n          const avgAgreement = predictions.value.reduce((sum, p) => sum + (p.reliability || 0), 0) / predictions.value.length\n          modelStats.value = {\n            accuracy: avgAgreement.toFixed(1),\n            rmse: 'Ensemble',\n            mae: 'Kombination',\n            r2: 'Gemittelt'\n          }\n        }\n      } else {\n        // Unknown model or missing data\n        modelStats.value = {\n          accuracy: 'N/A',\n          rmse: 'N/A',\n          mae: 'N/A',\n          r2: 'N/A'\n        }\n      }\n    }\n    \n  } catch (err) {\n    error.value = err\n    predictions.value = []\n    modelStats.value = {}\n  } finally {\n    isLoading.value = false\n  }\n}, {\n  component: 'MLPanel',\n  operation: 'loadPredictions'\n})\n\n// Helper functions\nconst calculateTrend = (prediction, baseYear) => {\n  if (!prediction.years_ahead || prediction.years_ahead === 0) return 0\n  // Simple trend calculation - could be enhanced\n  return ((prediction.value || prediction.ensemble_mean || 0) / 100000 - 1) * 10\n}\n\nconst getUncertaintyLevel = (uncertaintyPercent) => {\n  if (uncertaintyPercent < 30) return 'low'\n  if (uncertaintyPercent < 60) return 'medium'\n  return 'high'\n}\n\nconst handleError = (err) => {\n  error.value = err\n  handleErrorUtil(err, {\n    component: 'MLPanel',\n    action: 'component_error'\n  })\n}\n\nconst handlePredictionSelect = (prediction) => {\n  console.log('Prediction selected:', prediction)\n  // TODO: Show prediction details\n}\n\nconst handleConfidenceToggle = (showConfidence) => {\n  console.log('Confidence toggle:', showConfidence)\n  // TODO: Update chart visibility\n}\n\n// Helper methods\nconst getFormattedForecastTitle = () => {\n  if (!forecastData.value || !selectedForecast.value) {\n    return 'Produktionsprognose'\n  }\n  \n  // Extract product name from selected forecast\n  const productMatch = selectedForecast.value.match(/(?:global_|world_|[a-z_]+_)?([a-z_&]+)(?:_forecast)?$/i)\n  if (productMatch) {\n    const productName = productMatch[1]\n    const germanProductName = getMLGermanName(productName)\n    \n    if (selectedForecast.value.startsWith('global_')) {\n      return `Globale ${germanProductName} Produktionsprognose`\n    } else if (selectedForecast.value.startsWith('world_')) {\n      return `Welt ${germanProductName} Produktionsprognose`\n    } else {\n      // Regional or country forecasts\n      const regionPart = selectedForecast.value.replace(`_${productName}_forecast`, '').replace(`_${productName}`, '').replace(/_/g, ' ')\n      const formattedRegion = regionPart\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ')\n      return `${formattedRegion} ${germanProductName} Produktionsprognose`\n    }\n  }\n  \n  return forecastData.value.title || 'Produktionsprognose'\n}\n\nconst formatValue = (value) => {\n  return new Intl.NumberFormat('de-DE', {\n    maximumFractionDigits: 0\n  }).format(value)\n}\n\nconst formatTrend = (trend) => {\n  const sign = trend > 0 ? '+' : ''\n  return `${sign}${trend.toFixed(1)}%`\n}\n\nconst getTrendClass = (trend) => {\n  if (trend > 0) return 'text-green-600'\n  if (trend < 0) return 'text-red-600'\n  return 'text-gray-600'\n}\n\nconst getReliabilityClass = (reliability) => {\n  if (reliability >= 90) return 'bg-green-500'\n  if (reliability >= 75) return 'bg-yellow-500'\n  return 'bg-red-500'\n}\n\nconst getModelLabel = (model) => {\n  const labels = {\n    linear: 'Lineare Regression',\n    polynomial: 'Polynomiale Regression',\n    ensemble: 'Ensemble-Modell'\n  }\n  return labels[model] || model\n}\n\nconst getStatsExplanation = (model) => {\n  if (model === 'ensemble') {\n    return {\n      r2: 'Durchschnittlicher R² Score der Einzelmodelle',\n      rmse: 'Durchschnittliche Wurzel der mittleren Quadratfehler',\n      mae: 'Durchschnittlicher mittlerer absoluter Fehler',\n      accuracy: 'Durchschnittliche Modellübereinstimmung (%)'\n    }\n  } else {\n    return {\n      r2: 'Bestimmtheitsmaß (R²) - Erklärt Varianz',\n      rmse: 'Wurzel der mittleren Quadratfehler',\n      mae: 'Mittlerer absoluter Fehler',\n      accuracy: 'Modellgenauigkeit basierend auf R²'\n    }\n  }\n}\n\nconst getR2Class = (r2) => {\n  const value = parseFloat(r2)\n  if (isNaN(value)) return ''\n  if (value < 0) return 'text-red-800 font-bold' // Negative R² is very bad\n  if (value >= 0.8) return 'text-green-600'\n  if (value >= 0.6) return 'text-yellow-600'\n  if (value >= 0.3) return 'text-orange-600'\n  return 'text-red-600'\n}\n\n// Insight functions\nconst getGrowthInsight = () => {\n  if (!predictions.value.length || !forecastData.value) return 'Keine Daten verfügbar'\n  \n  const firstPred = predictions.value[0].predicted_value\n  const lastPred = predictions.value[predictions.value.length - 1].predicted_value\n  const growthPercent = ((lastPred - firstPred) / firstPred * 100).toFixed(1)\n  \n  if (growthPercent > 0) {\n    return `Die Produktion wird voraussichtlich um ${growthPercent}% bis 2035 steigen.`\n  } else {\n    return `Die Produktion wird voraussichtlich um ${Math.abs(growthPercent)}% bis 2035 sinken.`\n  }\n}\n\nconst getAccuracyInsight = () => {\n  if (!modelStats.value.r2) return 'Keine Genauigkeitsdaten verfügbar'\n  \n  const r2 = parseFloat(modelStats.value.r2)\n  if (r2 < 0) {\n    return `WARNUNG: Das ${selectedModel.value === 'linear' ? 'lineare' : 'polynomiale'} Modell ist ungeeignet für diese Daten (R² = ${r2.toFixed(3)}). Die Vorhersagen sind sehr unzuverlässig. Versuchen Sie ein anderes Modell.`\n  } else if (r2 >= 0.8) {\n    return 'Das Modell zeigt eine sehr hohe Prognosegenauigkeit mit starker Korrelation zu historischen Daten.'\n  } else if (r2 >= 0.6) {\n    return 'Das Modell zeigt eine gute Prognosegenauigkeit mit moderater Korrelation zu historischen Daten.'\n  } else if (r2 >= 0.3) {\n    return 'Das Modell zeigt moderate Genauigkeit. Die Prognosen sollten als grobe Schätzungen betrachtet werden.'\n  } else {\n    return 'Das Modell zeigt begrenzte Genauigkeit. Die Prognosen sollten mit großer Vorsicht interpretiert werden.'\n  }\n}\n\nconst getUncertaintyInsight = () => {\n  if (!predictions.value.length) return 'Keine Unsicherheitsdaten verfügbar'\n  \n  const avgUncertainty = predictions.value\n    .filter(p => p.uncertainty_level)\n    .reduce((sum, p) => {\n      const level = p.uncertainty_level === 'low' ? 1 : p.uncertainty_level === 'medium' ? 2 : 3\n      return sum + level\n    }, 0) / predictions.value.length\n  \n  if (avgUncertainty < 1.5) {\n    return 'Die Prognosen haben eine niedrige Unsicherheit und sind relativ zuverlässig.'\n  } else if (avgUncertainty < 2.5) {\n    return 'Die Prognosen haben eine moderate Unsicherheit. Langfristige Vorhersagen sollten regelmäßig aktualisiert werden.'\n  } else {\n    return 'Die Prognosen haben eine hohe Unsicherheit, besonders für spätere Jahre. Externe Faktoren können die Ergebnisse stark beeinflussen.'\n  }\n}\n\nconst getGlobalInsight = () => {\n  if (!selectedForecast.value) return 'Keine globalen Kontextdaten verfügbar'\n  \n  // Extract product name and get insights based on product type\n  const productMatch = selectedForecast.value.match(/(?:global_|world_|[a-z_]+_)?([a-z_&]+)(?:_forecast)?$/i)\n  if (productMatch) {\n    const productName = productMatch[1].toLowerCase()\n    \n    if (productName.includes('wheat')) {\n      return 'Weizen ist eines der wichtigsten Grundnahrungsmittel weltweit und ernährt Milliarden von Menschen.'\n    } else if (productName.includes('maize')) {\n      return 'Mais ist sowohl für die menschliche Ernährung als auch als Tierfutter von entscheidender Bedeutung.'\n    } else if (productName.includes('rice')) {\n      return 'Reis ist das Hauptnahrungsmittel für mehr als die Hälfte der Weltbevölkerung.'\n    } else if (productName.includes('milk')) {\n      return 'Milchprodukte sind eine wichtige Proteinquelle und unterstützen die Ernährungssicherheit weltweit.'\n    } else if (productName.includes('soyabeans') || productName.includes('soyabean')) {\n      return 'Sojabohnen sind eine wichtige Protein- und Ölquelle und werden weltweit als Viehfutter verwendet.'\n    } else if (productName.includes('sugar')) {\n      return 'Zucker und Süßstoffe sind wichtige Energielieferanten und haben großen Einfluss auf die globale Ernährung.'\n    } else if (productName.includes('vegetable') || productName.includes('fruits')) {\n      return 'Obst und Gemüse sind essentiell für eine ausgewogene Ernährung und liefern wichtige Vitamine und Mineralstoffe.'\n    } else if (productName.includes('meat') || productName.includes('bovine') || productName.includes('pigmeat') || productName.includes('poultry')) {\n      return 'Fleischprodukte sind wichtige Protein- und Nährstoffquellen, deren Produktion erhebliche Umweltauswirkungen hat.'\n    } else if (productName.includes('cassava')) {\n      return 'Maniok ist ein wichtiges Grundnahrungsmittel in tropischen Regionen und eine wichtige Kohlenhydratquelle.'\n    } else if (productName.includes('potatoes')) {\n      return 'Kartoffeln sind weltweit ein wichtiges Grundnahrungsmittel und eine bedeutende Quelle für Kohlenhydrate.'\n    } else if (productName.includes('fish') || productName.includes('seafood')) {\n      return 'Fisch und Meeresfrüchte sind wichtige Protein- und Omega-3-Quellen für Milliarden von Menschen.'\n    } else {\n      return 'Diese Produktkategorie spielt eine wichtige Rolle für die globale Ernährungssicherheit und nachhaltige Landwirtschaft.'\n    }\n  }\n  \n  return 'Diese Produktkategorie spielt eine wichtige Rolle für die globale Ernährungssicherheit.'\n}\n\n// Combined data for chart\nconst chartData = computed(() => {\n  if (!forecastData.value) return []\n  \n  // Filter out historical data with invalid values\n  const historical = forecastData.value.historical_data?.map(d => ({\n    year: d.year,\n    value: d.value,\n    predicted_value: d.value, // Add for consistency with chart expectations\n    type: 'historical'\n  })).filter(d => d.value != null && d.value > 0) || []\n  \n  // Filter out predictions with invalid values\n  const validPredictions = predictions.value.filter(d => \n    d.predicted_value != null && d.predicted_value > 0\n  ).map(d => ({\n    ...d,\n    value: d.predicted_value, // Add for consistency\n    type: 'prediction'\n  }))\n  \n  const combined = [...historical, ...validPredictions]\n  console.log('🎯 MLPanel: Chart data:', { \n    historical: historical.length, \n    predictions: validPredictions.length,\n    sample: combined.slice(0, 3)\n  })\n  return combined\n})\n\n// Watchers\nwatch([selectedForecast, selectedModel], () => {\n  if (selectedForecast.value && selectedModel.value) {\n    loadPredictions()\n  }\n}, { deep: true })\n\n// Load available forecasts based on type\nconst loadAvailableForecasts = wrapAsync(async () => {\n  console.log('🔍 MLPanel: Loading forecasts for type:', selectedForecastType.value)\n  try {\n    let index\n    switch (selectedForecastType.value) {\n      case 'global':\n        index = await dataStore.loadMLGlobalIndex()\n        break\n      case 'regional':\n        index = await dataStore.loadMLRegionalIndex()\n        break\n      case 'country':\n        index = await dataStore.loadMLCountryIndex()\n        break\n    }\n    \n    console.log('📋 MLPanel: ML Index loaded:', index)\n    \n    // Handle both 'forecasts' and 'files' formats\n    if (index && (index.forecasts || index.files)) {\n      const forecasts = index.forecasts || index.files\n      \n      // Transform files array to expected format if needed\n      if (Array.isArray(forecasts) && typeof forecasts[0] === 'string') {\n        availableForecasts.value = forecasts.map(file => ({\n          file: file,\n          title: file\n            .replace('.json', '')\n            .replace(/_/g, ' ')\n            .replace(/global /i, '')\n            .replace(/forecast/i, '')\n            .trim()\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ')\n        }))\n      } else {\n        availableForecasts.value = forecasts\n      }\n      \n      // Select first forecast if available\n      if (availableForecasts.value.length > 0 && !selectedForecast.value) {\n        selectedForecast.value = availableForecasts.value[0].file.replace('.json', '')\n        console.log('✅ MLPanel: Auto-selected forecast:', selectedForecast.value)\n      }\n      console.log('📊 MLPanel: Available forecasts:', availableForecasts.value.length)\n    } else {\n      console.warn('⚠️ MLPanel: No forecasts found in index')\n      availableForecasts.value = []\n    }\n  } catch (err) {\n    console.error('❌ MLPanel: Error loading forecast index:', err)\n    availableForecasts.value = []\n  }\n}, {\n  component: 'MLPanel',\n  operation: 'loadAvailableForecasts'\n})\n\n// Lifecycle\nonMounted(async () => {\n  try {\n    // Load comprehensive index on mount\n    const comprehensiveIndex = await dataStore.loadMLComprehensiveIndex()\n    console.log('Comprehensive index loaded:', comprehensiveIndex)\n  } catch (err) {\n    console.error('Failed to load comprehensive index:', err)\n  }\n  \n  await loadAvailableForecasts()\n  if (selectedForecast.value) {\n    await loadPredictions()\n  }\n})\n</script>\n\n<style scoped>\n.ml-panel {\n  @apply flex flex-col h-full bg-white dark:bg-gray-800 rounded-lg shadow-lg;\n}\n\n.panel-header {\n  @apply p-6 border-b border-gray-200 dark:border-gray-700;\n}\n\n.panel-title {\n  @apply text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2;\n}\n\n.panel-description {\n  @apply text-gray-600 dark:text-gray-300;\n}\n\n.panel-controls {\n  @apply p-6 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600;\n}\n\n.filters-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4;\n}\n\n.filter-group {\n  @apply flex flex-col;\n}\n\n.filter-group label {\n  @apply text-sm font-medium text-gray-700 dark:text-gray-300 mb-2;\n}\n\n.panel-content {\n  @apply flex-1 p-6 overflow-auto;\n}\n\n.predictions-content {\n  @apply space-y-8;\n}\n\n.forecast-info {\n  @apply bg-blue-50 dark:bg-blue-900/30 rounded-lg p-6 mb-6;\n}\n\n.info-title {\n  @apply text-xl font-bold text-gray-900 dark:text-gray-100 mb-4;\n}\n\n.info-grid {\n  @apply grid grid-cols-2 md:grid-cols-4 gap-4;\n}\n\n.info-item {\n  @apply flex flex-col;\n}\n\n.info-label {\n  @apply text-sm text-gray-600 dark:text-gray-400 mb-1;\n}\n\n.info-value {\n  @apply text-base font-semibold text-gray-900 dark:text-gray-100;\n}\n\n.model-stats {\n  @apply mb-6;\n}\n\n.stats-title {\n  @apply text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4;\n}\n\n.stats-grid {\n  @apply grid grid-cols-2 md:grid-cols-4 gap-4;\n}\n\n.stat-card {\n  @apply bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center;\n}\n\n.stat-label {\n  @apply text-sm text-gray-600 dark:text-gray-400 mb-1;\n}\n\n.stat-value {\n  @apply text-lg font-bold text-gray-900 dark:text-gray-100;\n}\n\n.chart-container {\n  @apply w-full mb-6;\n  min-height: 500px;\n}\n\n.insights-section {\n  @apply mb-8;\n}\n\n.insights-title {\n  @apply text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4;\n}\n\n.insights-grid {\n  @apply grid grid-cols-1 md:grid-cols-2 gap-4;\n}\n\n.insight-card {\n  @apply flex items-start space-x-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg;\n}\n\n.insight-icon {\n  @apply text-2xl;\n}\n\n.insight-content h4 {\n  @apply font-semibold text-gray-900 dark:text-gray-100 mb-1;\n}\n\n.insight-content p {\n  @apply text-sm text-gray-600 dark:text-gray-300;\n}\n\n.predictions-table {\n  @apply space-y-4;\n}\n\n.table-title {\n  @apply text-lg font-semibold text-gray-900 dark:text-gray-100;\n}\n\n.table-container {\n  @apply overflow-x-auto;\n}\n\n.predictions-table-element {\n  @apply w-full border-collapse bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow;\n}\n\n.predictions-table-element th {\n  @apply bg-gray-50 dark:bg-gray-700 px-4 py-3 text-left text-sm font-medium text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-600;\n}\n\n.predictions-table-element td {\n  @apply px-4 py-3 text-sm text-gray-900 dark:text-gray-100 border-b border-gray-200 dark:border-gray-600;\n}\n\n.reliability-bar {\n  @apply relative w-full h-4 bg-gray-200 dark:bg-gray-600 rounded-full overflow-hidden;\n}\n\n.reliability-fill {\n  @apply absolute top-0 left-0 h-full transition-all duration-300;\n}\n\n.reliability-text {\n  @apply absolute inset-0 flex items-center justify-center text-xs font-medium text-white;\n}\n\n.error-container,\n.loading-container,\n.empty-state {\n  @apply flex flex-col items-center justify-center h-64;\n}\n\n.loading-text {\n  @apply mt-4 text-gray-600 dark:text-gray-400;\n}\n\n.empty-icon {\n  @apply text-6xl mb-4;\n}\n\n.empty-state h3 {\n  @apply text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2;\n}\n\n.empty-state p {\n  @apply text-gray-500 dark:text-gray-400;\n}\n\n/* Warning box for poor model performance */\n.model-warning {\n  @apply mb-4 p-4 bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-600 rounded-lg;\n}\n\n.model-warning p.warning-title {\n  @apply text-red-700 dark:text-red-300 font-semibold;\n}\n\n.model-warning p.warning-text {\n  @apply text-red-600 dark:text-red-400 text-sm mt-1;\n}\n</style>","<template>\n  <div class=\"structural-panel\">\n    <ErrorBoundary @error=\"handleError\">\n      <div class=\"panel-header\">\n        <h2 class=\"panel-title\">Strukturanalyse</h2>\n        <p class=\"panel-description\">\n          Netzwerk- und Strukturanalyse der globalen Landwirtschaft\n        </p>\n      </div>\n\n      <div class=\"panel-controls\">\n        <div class=\"analysis-tabs\">\n          <BaseButton\n            v-for=\"tab in analysisTabs\"\n            :key=\"tab.id\"\n            @click=\"activeTab = tab.id\"\n            :variant=\"activeTab === tab.id ? 'primary' : 'outline-primary'\"\n            size=\"sm\"\n          >\n            {{ tab.label }}\n          </BaseButton>\n        </div>\n      </div>\n\n      <div class=\"panel-content\">\n        <div v-if=\"hasError\" class=\"error-container\">\n          <ErrorDisplay\n            :error=\"error\"\n            title=\"Fehler bei der Strukturanalyse\"\n            :showRetry=\"true\"\n            @retry=\"loadAnalysis\"\n          />\n        </div>\n\n        <div v-else-if=\"isLoading\" class=\"loading-container\">\n          <LoadingSpinner size=\"lg\" />\n          <p class=\"loading-text\">Führe Strukturanalyse durch...</p>\n        </div>\n\n        <div v-else class=\"analysis-content\">\n          <!-- Network Analysis -->\n          <div v-if=\"activeTab === 'network'\" class=\"network-section\">\n            <div class=\"controls-row\">\n              <div class=\"control-group\">\n                <label>Analyse-Typ</label>\n                <SearchableSelect\n                  v-model=\"networkConfig.analysisType\"\n                  :options=\"analysisTypeOptions\"\n                />\n              </div>\n              \n              <div class=\"control-group\">\n                <label>Schwellenwert</label>\n                <RangeSlider\n                  v-model=\"networkConfig.threshold\"\n                  :min=\"0\"\n                  :max=\"1\"\n                  :step=\"0.1\"\n                />\n              </div>\n              \n              <BaseButton \n                variant=\"primary\"\n                @click=\"loadAnalysis\"\n              >\n                Analysieren\n              </BaseButton>\n            </div>\n\n            <div v-if=\"networkData\" class=\"network-visualization h-96\">\n              <StructuralChart\n                :data=\"networkData\"\n                :analysis-type=\"networkConfig.analysisType\"\n                :selected-region=\"'global'\"\n                @node-click=\"handleNodeSelect\"\n                @analysis-change=\"handleAnalysisChange\"\n              />\n            </div>\n\n            <div v-if=\"networkMetrics\" class=\"network-metrics\">\n              <h3 class=\"metrics-title\">Netzwerk-Metriken</h3>\n              <div class=\"metrics-grid\">\n                <div class=\"metric-card\">\n                  <div class=\"metric-label\">Knoten</div>\n                  <div class=\"metric-value\">{{ networkMetrics.nodeCount }}</div>\n                </div>\n                <div class=\"metric-card\">\n                  <div class=\"metric-label\">Verbindungen</div>\n                  <div class=\"metric-value\">{{ networkMetrics.linkCount }}</div>\n                </div>\n                <div class=\"metric-card\">\n                  <div class=\"metric-label\">Dichte</div>\n                  <div class=\"metric-value\">{{ networkMetrics.density.toFixed(3) }}</div>\n                </div>\n                <div class=\"metric-card\">\n                  <div class=\"metric-label\">Clustering</div>\n                  <div class=\"metric-value\">{{ networkMetrics.clustering.toFixed(3) }}</div>\n                </div>\n                <div class=\"metric-card\">\n                  <div class=\"metric-label\">Durchmesser</div>\n                  <div class=\"metric-value\">{{ networkMetrics.diameter }}</div>\n                </div>\n                <div class=\"metric-card\">\n                  <div class=\"metric-label\">Modularität</div>\n                  <div class=\"metric-value\">{{ networkMetrics.modularity.toFixed(3) }}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Cluster Analysis -->\n          <div v-if=\"activeTab === 'clusters'\" class=\"clusters-section\">\n            <div class=\"controls-row\">\n              <div class=\"control-group\">\n                <label>Cluster-Methode</label>\n                <SearchableSelect\n                  v-model=\"clusterConfig.method\"\n                  :options=\"clusterMethodOptions\"\n                />\n              </div>\n              \n              <div class=\"control-group\">\n                <label>Anzahl Cluster</label>\n                <RangeSlider\n                  v-model=\"clusterConfig.numClusters\"\n                  :min=\"2\"\n                  :max=\"10\"\n                  :step=\"1\"\n                  :show-labels=\"true\"\n                />\n              </div>\n              \n              <BaseButton \n                variant=\"primary\"\n                @click=\"performClustering\"\n              >\n                Clustern\n              </BaseButton>\n            </div>\n\n            <div v-if=\"clusterResults\" class=\"cluster-results\">\n              <div class=\"cluster-visualization\">\n                <StructuralChart\n                  :data=\"clusterResults.visualization\"\n                  :config=\"clusterChartConfig\"\n                  @cluster-select=\"handleClusterSelect\"\n                />\n              </div>\n\n              <div class=\"cluster-details\">\n                <h3 class=\"details-title\">Cluster-Details</h3>\n                <div class=\"cluster-list\">\n                  <div\n                    v-for=\"cluster in clusterResults.clusters\"\n                    :key=\"cluster.id\"\n                    class=\"cluster-item\"\n                    :style=\"{ borderLeftColor: cluster.color }\"\n                  >\n                    <div class=\"cluster-header\">\n                      <h4>Cluster {{ cluster.id }}</h4>\n                      <span class=\"cluster-size\">{{ cluster.members.length }} Mitglieder</span>\n                    </div>\n                    <div class=\"cluster-members\">\n                      <span\n                        v-for=\"member in cluster.members.slice(0, 5)\"\n                        :key=\"member\"\n                        class=\"member-tag\"\n                      >\n                        {{ member }}\n                      </span>\n                      <span v-if=\"cluster.members.length > 5\" class=\"more-members\">\n                        +{{ cluster.members.length - 5 }} weitere\n                      </span>\n                    </div>\n                    <div class=\"cluster-stats\">\n                      <div class=\"stat\">\n                        <span class=\"stat-label\">Kohäsion:</span>\n                        <span class=\"stat-value\">{{ cluster.cohesion.toFixed(2) }}</span>\n                      </div>\n                      <div class=\"stat\">\n                        <span class=\"stat-label\">Separierung:</span>\n                        <span class=\"stat-value\">{{ cluster.separation.toFixed(2) }}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Hierarchy Analysis -->\n          <div v-if=\"activeTab === 'hierarchy'\" class=\"hierarchy-section\">\n            <div class=\"controls-row\">\n              <div class=\"control-group\">\n                <label>Hierarchie-Typ</label>\n                <SearchableSelect\n                  v-model=\"hierarchyConfig.type\"\n                  :options=\"hierarchyTypeOptions\"\n                />\n              </div>\n              \n              <BaseButton \n                variant=\"primary\"\n                @click=\"buildHierarchy\"\n              >\n                Hierarchie erstellen\n              </BaseButton>\n            </div>\n\n            <div v-if=\"hierarchyData\" class=\"hierarchy-visualization\">\n              <StructuralChart\n                :data=\"hierarchyData\"\n                :config=\"hierarchyChartConfig\"\n                @node-expand=\"handleNodeExpand\"\n                @level-select=\"handleLevelSelect\"\n              />\n            </div>\n\n            <div v-if=\"hierarchyMetrics\" class=\"hierarchy-metrics\">\n              <h3 class=\"metrics-title\">Hierarchie-Metriken</h3>\n              <div class=\"hierarchy-stats\">\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">Ebenen:</span>\n                  <span class=\"stat-value\">{{ hierarchyMetrics.levels }}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">Breite:</span>\n                  <span class=\"stat-value\">{{ hierarchyMetrics.width }}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">Balance:</span>\n                  <span class=\"stat-value\">{{ hierarchyMetrics.balance.toFixed(2) }}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch } from 'vue'\nimport { useDataStore } from '@/stores/useDataStore'\nimport { useErrorHandling } from '@/composables/useErrorHandling'\nimport ErrorBoundary from '@/components/ui/ErrorBoundary.vue'\nimport ErrorDisplay from '@/components/ui/ErrorDisplay.vue'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner.vue'\nimport BaseButton from '@/components/ui/BaseButton.vue'\nimport SearchableSelect from '@/components/ui/SearchableSelect.vue'\nimport RangeSlider from '@/components/ui/RangeSlider.vue'\nimport StructuralChart from '@/components/visualizations/StructuralChart.vue'\n\n// Store and composables\nconst dataStore = useDataStore()\nconst { handleError: handleErrorUtil, wrapAsync } = useErrorHandling()\n\n// Reactive state\nconst activeTab = ref('network')\nconst isLoading = ref(false)\nconst error = ref(null)\n\nconst networkConfig = ref({\n  analysisType: 'trade',\n  threshold: 0.1\n})\n\nconst clusterConfig = ref({\n  method: 'kmeans',\n  numClusters: 5\n})\n\nconst hierarchyConfig = ref({\n  type: 'production'\n})\n\nconst networkData = ref(null)\nconst networkMetrics = ref(null)\nconst clusterResults = ref(null)\nconst hierarchyData = ref(null)\nconst hierarchyMetrics = ref(null)\n\n// Computed properties\nconst hasError = computed(() => error.value !== null)\n\nconst analysisTabs = computed(() => [\n  { id: 'network', label: 'Netzwerk-Analyse' },\n  { id: 'clusters', label: 'Cluster-Analyse' },\n  { id: 'hierarchy', label: 'Hierarchie-Analyse' }\n])\n\nconst analysisTypeOptions = computed(() => [\n  { value: 'trade', label: 'Handelsbeziehungen' },\n  { value: 'production', label: 'Produktionsähnlichkeit' },\n  { value: 'dependency', label: 'Abhängigkeiten' },\n  { value: 'competition', label: 'Wettbewerb' }\n])\n\nconst clusterMethodOptions = computed(() => [\n  { value: 'kmeans', label: 'K-Means' },\n  { value: 'hierarchical', label: 'Hierarchisch' },\n  { value: 'dbscan', label: 'DBSCAN' },\n  { value: 'spectral', label: 'Spektral' }\n])\n\nconst hierarchyTypeOptions = computed(() => [\n  { value: 'production', label: 'Produktionshierarchie' },\n  { value: 'trade', label: 'Handelshierarchie' },\n  { value: 'geographic', label: 'Geografische Hierarchie' }\n])\n\nconst networkChartConfig = computed(() => ({\n  type: 'network',\n  width: 800,\n  height: 600,\n  showLabels: true,\n  enableForce: true,\n  nodeRadius: 8,\n  linkWidth: 2,\n  interactive: true\n}))\n\nconst clusterChartConfig = computed(() => ({\n  type: 'scatter',\n  width: 800,\n  height: 400,\n  showClusters: true,\n  showCentroids: true,\n  interactive: true\n}))\n\nconst hierarchyChartConfig = computed(() => ({\n  type: 'tree',\n  width: 800,\n  height: 500,\n  orientation: 'vertical',\n  showLabels: true,\n  collapsible: true,\n  interactive: true\n}))\n\n// Methods\nconst loadAnalysis = wrapAsync(async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    // Load network data\n    const rawNetworkData = await dataStore.loadNetworkData()\n    \n    // Use actual network data if available\n    if (rawNetworkData && rawNetworkData.nodes && rawNetworkData.links) {\n      networkData.value = rawNetworkData\n      networkMetrics.value = calculateNetworkMetrics(rawNetworkData)\n    } else {\n      // Fallback to mock data if real data not available\n      networkData.value = processNetworkData(rawNetworkData)\n      networkMetrics.value = calculateNetworkMetrics(networkData.value)\n    }\n    \n  } catch (err) {\n    error.value = err\n  } finally {\n    isLoading.value = false\n  }\n}, {\n  component: 'StructuralPanel',\n  operation: 'loadAnalysis'\n})\n\nconst performClustering = wrapAsync(async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    // Load production data for clustering\n    const productionDataMap = new Map()\n    const products = ['maize_and_products', 'rice_and_products', 'wheat_and_products', 'vegetables', 'fruits_-_excluding_wine']\n    const year = 2022\n    \n    // Load data for multiple products\n    for (const product of products) {\n      try {\n        const data = await dataStore.loadProductionData(product, year)\n        if (data) productionDataMap.set(product, data)\n      } catch (err) {\n        console.warn(`Could not load data for ${product}`)\n      }\n    }\n    \n    // Process data for clustering\n    const countries = new Set()\n    productionDataMap.forEach(data => {\n      if (data.features) {\n        data.features.forEach(feature => {\n          if (feature.properties?.country) {\n            countries.add(feature.properties.country)\n          }\n        })\n      }\n    })\n    \n    // Create clusters based on production patterns\n    const countriesArray = Array.from(countries)\n    const numClusters = Math.min(clusterConfig.value.numClusters, countriesArray.length)\n    const clusters = []\n    const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7']\n    \n    // Simple clustering by dividing countries\n    const clusterSize = Math.ceil(countriesArray.length / numClusters)\n    \n    for (let i = 0; i < numClusters; i++) {\n      const startIdx = i * clusterSize\n      const endIdx = Math.min((i + 1) * clusterSize, countriesArray.length)\n      const members = countriesArray.slice(startIdx, endIdx)\n      \n      if (members.length > 0) {\n        clusters.push({\n          id: i + 1,\n          color: colors[i % colors.length],\n          members,\n          cohesion: 0.7 + Math.random() * 0.3,\n          separation: 0.5 + Math.random() * 0.4\n        })\n      }\n    }\n    \n    clusterResults.value = {\n      clusters,\n      visualization: generateClusterVisualization(clusters)\n    }\n    \n  } catch (err) {\n    error.value = err\n  } finally {\n    isLoading.value = false\n  }\n}, {\n  component: 'StructuralPanel',\n  operation: 'performClustering'\n})\n\nconst buildHierarchy = wrapAsync(async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    // Load summary data for hierarchy\n    const summaryData = await dataStore.loadSummaryData()\n    \n    if (summaryData && summaryData.production_by_category) {\n      // Build hierarchy from actual data\n      const root = {\n        name: 'Global Agriculture',\n        children: []\n      }\n      \n      // Group by category\n      const categories = {}\n      Object.entries(summaryData.production_by_category).forEach(([category, data]) => {\n        if (!categories[data.category || 'Other']) {\n          categories[data.category || 'Other'] = {\n            name: data.category || 'Other',\n            children: []\n          }\n        }\n        \n        categories[data.category || 'Other'].children.push({\n          name: category,\n          size: data.total_production || 100,\n          value: data.total_production\n        })\n      })\n      \n      root.children = Object.values(categories)\n      hierarchyData.value = root\n      \n      // Calculate metrics\n      const levels = 3\n      const width = Object.keys(categories).length\n      const totalNodes = Object.values(categories).reduce((sum, cat) => sum + cat.children.length, 0)\n      \n      hierarchyMetrics.value = {\n        levels,\n        width,\n        balance: Math.min(width / totalNodes, 1)\n      }\n    } else {\n      // Fallback to generated data\n      hierarchyData.value = generateHierarchyData()\n      hierarchyMetrics.value = {\n        levels: 4,\n        width: 12,\n        balance: 0.85\n      }\n    }\n    \n  } catch (err) {\n    error.value = err\n  } finally {\n    isLoading.value = false\n  }\n}, {\n  component: 'StructuralPanel',\n  operation: 'buildHierarchy'\n})\n\n// Helper methods\nconst processNetworkData = (rawData) => {\n  // Mock network processing\n  const nodes = []\n  const links = []\n  \n  for (let i = 0; i < 20; i++) {\n    nodes.push({\n      id: `node-${i}`,\n      name: `Node ${i}`,\n      value: Math.random() * 100,\n      group: Math.floor(i / 5)\n    })\n  }\n  \n  for (let i = 0; i < 30; i++) {\n    const sourceId = Math.floor(Math.random() * 20)\n    const targetId = Math.floor(Math.random() * 20)\n    \n    if (sourceId !== targetId) {\n      links.push({\n        source: `node-${sourceId}`,\n        target: `node-${targetId}`,\n        value: Math.random() * 10\n      })\n    }\n  }\n  \n  return { nodes, links }\n}\n\nconst calculateNetworkMetrics = (data) => {\n  return {\n    nodeCount: data.nodes.length,\n    linkCount: data.links.length,\n    density: (2 * data.links.length) / (data.nodes.length * (data.nodes.length - 1)),\n    clustering: 0.3 + Math.random() * 0.4,\n    diameter: Math.floor(Math.random() * 5) + 3,\n    modularity: 0.2 + Math.random() * 0.6\n  }\n}\n\nconst generateClusterVisualization = (clusters) => {\n  const points = []\n  \n  clusters.forEach((cluster, clusterIndex) => {\n    const centerX = (clusterIndex % 3) * 300 + 150\n    const centerY = Math.floor(clusterIndex / 3) * 200 + 100\n    \n    cluster.members.forEach((member, memberIndex) => {\n      points.push({\n        x: centerX + (Math.random() - 0.5) * 100,\n        y: centerY + (Math.random() - 0.5) * 100,\n        cluster: cluster.id,\n        name: member,\n        color: cluster.color\n      })\n    })\n  })\n  \n  return points\n}\n\nconst generateHierarchyData = () => {\n  return {\n    name: 'Global Agriculture',\n    children: [\n      {\n        name: 'Cereals',\n        children: [\n          { name: 'Wheat', size: 100 },\n          { name: 'Rice', size: 90 },\n          { name: 'Maize', size: 120 }\n        ]\n      },\n      {\n        name: 'Vegetables',\n        children: [\n          { name: 'Tomatoes', size: 60 },\n          { name: 'Onions', size: 40 },\n          { name: 'Potatoes', size: 80 }\n        ]\n      },\n      {\n        name: 'Fruits',\n        children: [\n          { name: 'Apples', size: 50 },\n          { name: 'Bananas', size: 70 },\n          { name: 'Oranges', size: 45 }\n        ]\n      }\n    ]\n  }\n}\n\n// Event handlers\nconst handleError = (err) => {\n  error.value = err\n  handleErrorUtil(err, {\n    component: 'StructuralPanel',\n    action: 'component_error'\n  })\n}\n\nconst handleNodeSelect = (node) => {\n  console.log('Node selected:', node)\n}\n\nconst handleLinkSelect = (link) => {\n  console.log('Link selected:', link)\n}\n\nconst handleAnalysisChange = (type) => {\n  networkConfig.value.analysisType = type\n}\n\nconst handleClusterSelect = (cluster) => {\n  console.log('Cluster selected:', cluster)\n}\n\nconst handleNodeExpand = (node) => {\n  console.log('Node expanded:', node)\n}\n\nconst handleLevelSelect = (level) => {\n  console.log('Level selected:', level)\n}\n\n// Watchers\nwatch(activeTab, (newTab) => {\n  if (newTab === 'network' && !networkData.value) {\n    loadAnalysis()\n  }\n})\n</script>\n\n<style scoped>\n.structural-panel {\n  @apply flex flex-col h-full bg-white dark:bg-gray-900 rounded-lg shadow-lg;\n}\n\n.panel-header {\n  @apply p-6 border-b border-gray-200 dark:border-gray-700;\n}\n\n.panel-title {\n  @apply text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2;\n}\n\n.panel-description {\n  @apply text-gray-600 dark:text-gray-400;\n}\n\n.panel-controls {\n  @apply p-6 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700;\n}\n\n.analysis-tabs {\n  @apply flex gap-2;\n}\n\n.panel-content {\n  @apply flex-1 p-6 overflow-auto;\n}\n\n.analysis-content {\n  @apply space-y-6;\n}\n\n.controls-row {\n  @apply flex flex-wrap items-end gap-4 mb-6;\n}\n\n.control-group {\n  @apply flex flex-col min-w-48;\n}\n\n.control-group label {\n  @apply text-sm font-medium text-gray-700 dark:text-gray-300 mb-2;\n}\n\n.network-visualization,\n.cluster-visualization,\n.hierarchy-visualization {\n  @apply w-full bg-gray-50 dark:bg-gray-800 rounded-lg mb-6;\n}\n\n.network-metrics,\n.hierarchy-metrics {\n  @apply space-y-4;\n}\n\n.metrics-title {\n  @apply text-lg font-semibold text-gray-900 dark:text-gray-100;\n}\n\n.metrics-grid {\n  @apply grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4;\n}\n\n.metric-card {\n  @apply bg-gray-50 dark:bg-gray-800 rounded-lg p-4 text-center;\n}\n\n.metric-label {\n  @apply text-sm text-gray-600 dark:text-gray-400 mb-1;\n}\n\n.metric-value {\n  @apply text-lg font-bold text-gray-900 dark:text-gray-100;\n}\n\n.cluster-results {\n  @apply grid grid-cols-1 lg:grid-cols-2 gap-6;\n}\n\n.cluster-details {\n  @apply space-y-4;\n}\n\n.details-title {\n  @apply text-lg font-semibold text-gray-900 dark:text-gray-100;\n}\n\n.cluster-list {\n  @apply space-y-4;\n}\n\n.cluster-item {\n  @apply bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border-l-4;\n}\n\n.cluster-header {\n  @apply flex justify-between items-center mb-3;\n}\n\n.cluster-header h4 {\n  @apply font-semibold text-gray-900 dark:text-gray-100;\n}\n\n.cluster-size {\n  @apply text-sm text-gray-600 dark:text-gray-400;\n}\n\n.cluster-members {\n  @apply flex flex-wrap gap-2 mb-3;\n}\n\n.member-tag {\n  @apply px-2 py-1 bg-white dark:bg-gray-700 rounded text-xs text-gray-700 dark:text-gray-300;\n}\n\n.more-members {\n  @apply px-2 py-1 bg-gray-200 dark:bg-gray-600 rounded text-xs text-gray-600 dark:text-gray-300;\n}\n\n.cluster-stats {\n  @apply flex gap-4;\n}\n\n.stat {\n  @apply text-sm;\n}\n\n.stat-label {\n  @apply text-gray-600 dark:text-gray-400;\n}\n\n.stat-value {\n  @apply font-medium text-gray-900 dark:text-gray-100;\n}\n\n.hierarchy-stats {\n  @apply flex gap-6;\n}\n\n.stat-item {\n  @apply text-sm;\n}\n\n.stat-item .stat-label {\n  @apply text-gray-600 mr-2;\n}\n\n.stat-item .stat-value {\n  @apply font-medium text-gray-900 dark:text-gray-100;\n}\n\n.error-container,\n.loading-container {\n  @apply flex flex-col items-center justify-center h-64;\n}\n\n.loading-text {\n  @apply mt-4 text-gray-600 dark:text-gray-400;\n}\n</style>","<template>\n  <div class=\"process-panel\">\n    <ErrorBoundary @error=\"handleError\">\n      <div class=\"panel-header\">\n        <h2 class=\"panel-title\">Process Mining</h2>\n        <p class=\"panel-description\">\n          Analyse und Optimierung von landwirtschaftlichen Prozessen\n        </p>\n      </div>\n\n      <div class=\"panel-controls\">\n        <div class=\"process-tabs\">\n          <button\n            v-for=\"tab in processTabs\"\n            :key=\"tab.id\"\n            @click=\"activeTab = tab.id\"\n            :class=\"[\n              'tab-button',\n              { 'tab-active': activeTab === tab.id }\n            ]\"\n          >\n            {{ tab.label }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"panel-content\">\n        <div v-if=\"hasError\" class=\"error-container\">\n          <ErrorDisplay\n            :error=\"error\"\n            title=\"Fehler beim Process Mining\"\n            :showRetry=\"true\"\n            @retry=\"loadProcessData\"\n          />\n        </div>\n\n        <div v-else-if=\"isLoading\" class=\"loading-container\">\n          <LoadingSpinner size=\"lg\" />\n          <p class=\"loading-text\">Analysiere Prozesse...</p>\n        </div>\n\n        <div v-else class=\"process-content\">\n          <!-- Process Discovery -->\n          <div v-if=\"activeTab === 'discovery'\" class=\"discovery-section\">\n            <div class=\"controls-row\">\n              <div class=\"control-group\">\n                <label>Prozess-Typ</label>\n                <SearchableSelect\n                  v-model=\"discoveryConfig.processType\"\n                  :options=\"processTypeOptions\"\n                />\n              </div>\n              \n              <div class=\"control-group\">\n                <label>Zeitraum</label>\n                <RangeSlider\n                  v-model=\"discoveryConfig.timeRange\"\n                  :min=\"2020\"\n                  :max=\"2023\"\n                  :step=\"1\"\n                  :show-labels=\"true\"\n                />\n              </div>\n              \n              <BaseButton @click=\"discoverProcesses\">\n                Prozesse entdecken\n              </BaseButton>\n            </div>\n\n            <div v-if=\"processModel\" class=\"process-visualization\">\n              <ProcessChart\n                :data=\"processModel\"\n                :config=\"processChartConfig\"\n                @activity-select=\"handleActivitySelect\"\n                @path-select=\"handlePathSelect\"\n              />\n            </div>\n\n            <div v-if=\"processStats\" class=\"process-stats\">\n              <h3 class=\"stats-title\">Prozess-Statistiken</h3>\n              <div class=\"stats-grid\">\n                <div class=\"stat-card\">\n                  <div class=\"stat-label\">Aktivitäten</div>\n                  <div class=\"stat-value\">{{ processStats.activities }}</div>\n                </div>\n                <div class=\"stat-card\">\n                  <div class=\"stat-label\">Traces</div>\n                  <div class=\"stat-value\">{{ processStats.traces }}</div>\n                </div>\n                <div class=\"stat-card\">\n                  <div class=\"stat-label\">Varianten</div>\n                  <div class=\"stat-value\">{{ processStats.variants }}</div>\n                </div>\n                <div class=\"stat-card\">\n                  <div class=\"stat-label\">Durchlaufzeit (Tage)</div>\n                  <div class=\"stat-value\">{{ processStats.avgDuration }}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Process Conformance -->\n          <div v-if=\"activeTab === 'conformance'\" class=\"conformance-section\">\n            <div class=\"controls-row\">\n              <div class=\"control-group\">\n                <label>Referenz-Modell</label>\n                <SearchableSelect\n                  v-model=\"conformanceConfig.referenceModel\"\n                  :options=\"referenceModelOptions\"\n                />\n              </div>\n              \n              <BaseButton @click=\"checkConformance\">\n                Konformität prüfen\n              </BaseButton>\n            </div>\n\n            <div v-if=\"conformanceResults\" class=\"conformance-results\">\n              <div class=\"conformance-overview\">\n                <div class=\"conformance-score\">\n                  <div class=\"score-circle\" :class=\"getConformanceClass(conformanceResults.fitness)\">\n                    <span class=\"score-value\">{{ (conformanceResults.fitness * 100).toFixed(0) }}%</span>\n                    <span class=\"score-label\">Fitness</span>\n                  </div>\n                </div>\n                \n                <div class=\"conformance-metrics\">\n                  <div class=\"metric-item\">\n                    <span class=\"metric-label\">Precision:</span>\n                    <span class=\"metric-value\">{{ (conformanceResults.precision * 100).toFixed(1) }}%</span>\n                  </div>\n                  <div class=\"metric-item\">\n                    <span class=\"metric-label\">Recall:</span>\n                    <span class=\"metric-value\">{{ (conformanceResults.recall * 100).toFixed(1) }}%</span>\n                  </div>\n                  <div class=\"metric-item\">\n                    <span class=\"metric-label\">F1-Score:</span>\n                    <span class=\"metric-value\">{{ (conformanceResults.f1Score * 100).toFixed(1) }}%</span>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"deviations-list\">\n                <h4 class=\"deviations-title\">Erkannte Abweichungen</h4>\n                <div class=\"deviation-items\">\n                  <div\n                    v-for=\"deviation in conformanceResults.deviations\"\n                    :key=\"deviation.id\"\n                    class=\"deviation-item\"\n                    :class=\"getDeviationClass(deviation.severity)\"\n                  >\n                    <div class=\"deviation-header\">\n                      <span class=\"deviation-type\">{{ deviation.type }}</span>\n                      <span class=\"deviation-count\">{{ deviation.count }}x</span>\n                    </div>\n                    <p class=\"deviation-description\">{{ deviation.description }}</p>\n                    <div class=\"deviation-actions\">\n                      <BaseButton size=\"sm\" @click=\"exploreDeviation(deviation)\">\n                        Untersuchen\n                      </BaseButton>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Process Enhancement -->\n          <div v-if=\"activeTab === 'enhancement'\" class=\"enhancement-section\">\n            <div class=\"controls-row\">\n              <div class=\"control-group\">\n                <label>Optimierungs-Typ</label>\n                <SearchableSelect\n                  v-model=\"enhancementConfig.optimizationType\"\n                  :options=\"optimizationTypeOptions\"\n                />\n              </div>\n              \n              <BaseButton @click=\"enhanceProcess\">\n                Prozess optimieren\n              </BaseButton>\n            </div>\n\n            <div v-if=\"enhancementResults\" class=\"enhancement-results\">\n              <div class=\"optimization-comparison\">\n                <div class=\"comparison-chart\">\n                  <ProcessChart\n                    :data=\"enhancementResults.comparison\"\n                    :config=\"comparisonChartConfig\"\n                    @improvement-select=\"handleImprovementSelect\"\n                  />\n                </div>\n              </div>\n\n              <div class=\"improvement-suggestions\">\n                <h4 class=\"suggestions-title\">Verbesserungsvorschläge</h4>\n                <div class=\"suggestion-items\">\n                  <div\n                    v-for=\"suggestion in enhancementResults.suggestions\"\n                    :key=\"suggestion.id\"\n                    class=\"suggestion-item\"\n                  >\n                    <div class=\"suggestion-header\">\n                      <h5 class=\"suggestion-title\">{{ suggestion.title }}</h5>\n                      <div class=\"suggestion-impact\" :class=\"getImpactClass(suggestion.impact)\">\n                        {{ suggestion.impact }} Impact\n                      </div>\n                    </div>\n                    <p class=\"suggestion-description\">{{ suggestion.description }}</p>\n                    <div class=\"suggestion-metrics\">\n                      <div class=\"metric\">\n                        <span class=\"metric-label\">Zeitersparnis:</span>\n                        <span class=\"metric-value\">{{ suggestion.timeSavings }}%</span>\n                      </div>\n                      <div class=\"metric\">\n                        <span class=\"metric-label\">Kostenreduktion:</span>\n                        <span class=\"metric-value\">{{ suggestion.costReduction }}%</span>\n                      </div>\n                    </div>\n                    <div class=\"suggestion-actions\">\n                      <BaseButton size=\"sm\" variant=\"primary\">\n                        Implementieren\n                      </BaseButton>\n                      <BaseButton size=\"sm\" variant=\"outline\">\n                        Simulieren\n                      </BaseButton>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue'\nimport { useErrorHandling } from '@/composables/useErrorHandling'\nimport ErrorBoundary from '@/components/ui/ErrorBoundary.vue'\nimport ErrorDisplay from '@/components/ui/ErrorDisplay.vue'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner.vue'\nimport BaseButton from '@/components/ui/BaseButton.vue'\nimport SearchableSelect from '@/components/ui/SearchableSelect.vue'\nimport RangeSlider from '@/components/ui/RangeSlider.vue'\nimport ProcessChart from '@/components/visualizations/ProcessChart.vue'\n\n// Composables\nconst { handleError: handleErrorUtil, wrapAsync } = useErrorHandling()\n\n// Reactive state\nconst activeTab = ref('discovery')\nconst isLoading = ref(false)\nconst error = ref(null)\n\nconst discoveryConfig = ref({\n  processType: 'supply_chain',\n  timeRange: [2022, 2023]\n})\n\nconst conformanceConfig = ref({\n  referenceModel: 'iso_standard'\n})\n\nconst enhancementConfig = ref({\n  optimizationType: 'time_optimization'\n})\n\nconst processModel = ref(null)\nconst processStats = ref(null)\nconst conformanceResults = ref(null)\nconst enhancementResults = ref(null)\n\n// Computed properties\nconst hasError = computed(() => error.value !== null)\n\nconst processTabs = computed(() => [\n  { id: 'discovery', label: 'Prozess-Discovery' },\n  { id: 'conformance', label: 'Konformitätsprüfung' },\n  { id: 'enhancement', label: 'Prozess-Enhancement' }\n])\n\nconst processTypeOptions = computed(() => [\n  { value: 'supply_chain', label: 'Lieferkette' },\n  { value: 'production', label: 'Produktion' },\n  { value: 'distribution', label: 'Distribution' },\n  { value: 'quality_control', label: 'Qualitätskontrolle' }\n])\n\nconst referenceModelOptions = computed(() => [\n  { value: 'iso_standard', label: 'ISO Standard' },\n  { value: 'best_practice', label: 'Best Practice' },\n  { value: 'custom_model', label: 'Benutzerdefiniert' }\n])\n\nconst optimizationTypeOptions = computed(() => [\n  { value: 'time_optimization', label: 'Zeitoptimierung' },\n  { value: 'cost_optimization', label: 'Kostenoptimierung' },\n  { value: 'quality_optimization', label: 'Qualitätsoptimierung' },\n  { value: 'resource_optimization', label: 'Ressourcenoptimierung' }\n])\n\nconst processChartConfig = computed(() => ({\n  type: 'process_flow',\n  width: 800,\n  height: 500,\n  showMetrics: true,\n  showFrequencies: true,\n  interactive: true\n}))\n\nconst comparisonChartConfig = computed(() => ({\n  type: 'process_comparison',\n  width: 800,\n  height: 400,\n  showBefore: true,\n  showAfter: true,\n  showImprovements: true,\n  interactive: true\n}))\n\n// Methods\nconst discoverProcesses = wrapAsync(async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    // Mock process discovery\n    await new Promise(resolve => setTimeout(resolve, 1500))\n    \n    processModel.value = generateProcessModel()\n    processStats.value = {\n      activities: 12,\n      traces: 1524,\n      variants: 47,\n      avgDuration: 14.5\n    }\n    \n  } catch (err) {\n    error.value = err\n  } finally {\n    isLoading.value = false\n  }\n}, {\n  component: 'ProcessPanel',\n  operation: 'discoverProcesses'\n})\n\nconst checkConformance = wrapAsync(async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    await new Promise(resolve => setTimeout(resolve, 2000))\n    \n    conformanceResults.value = {\n      fitness: 0.85,\n      precision: 0.78,\n      recall: 0.92,\n      f1Score: 0.84,\n      deviations: [\n        {\n          id: 1,\n          type: 'Skip Activity',\n          count: 23,\n          severity: 'medium',\n          description: 'Qualitätsprüfung wurde in 23 Fällen übersprungen'\n        },\n        {\n          id: 2,\n          type: 'Wrong Order',\n          count: 8,\n          severity: 'high',\n          description: 'Versand vor Qualitätskontrolle in 8 Fällen'\n        },\n        {\n          id: 3,\n          type: 'Extra Activity',\n          count: 15,\n          severity: 'low',\n          description: 'Zusätzliche Nachkontrolle in 15 Fällen'\n        }\n      ]\n    }\n    \n  } catch (err) {\n    error.value = err\n  } finally {\n    isLoading.value = false\n  }\n}, {\n  component: 'ProcessPanel',\n  operation: 'checkConformance'\n})\n\nconst enhanceProcess = wrapAsync(async () => {\n  error.value = null\n  isLoading.value = true\n  \n  try {\n    await new Promise(resolve => setTimeout(resolve, 1800))\n    \n    enhancementResults.value = {\n      comparison: generateComparisonData(),\n      suggestions: [\n        {\n          id: 1,\n          title: 'Parallelisierung der Qualitätskontrolle',\n          description: 'Führen Sie Qualitätsprüfungen parallel zur Verpackung durch',\n          impact: 'high',\n          timeSavings: 25,\n          costReduction: 15\n        },\n        {\n          id: 2,\n          title: 'Automatisierung der Dokumentation',\n          description: 'Implementieren Sie automatische Dokumentationssysteme',\n          impact: 'medium',\n          timeSavings: 12,\n          costReduction: 8\n        },\n        {\n          id: 3,\n          title: 'Optimierung der Lagerlogistik',\n          description: 'Reorganisieren Sie die Lagerstruktur für kürzere Wege',\n          impact: 'medium',\n          timeSavings: 18,\n          costReduction: 22\n        }\n      ]\n    }\n    \n  } catch (err) {\n    error.value = err\n  } finally {\n    isLoading.value = false\n  }\n}, {\n  component: 'ProcessPanel',\n  operation: 'enhanceProcess'\n})\n\n// Helper methods\nconst generateProcessModel = () => {\n  return {\n    activities: [\n      { id: 'start', name: 'Bestellung eingegangen', type: 'start' },\n      { id: 'check', name: 'Verfügbarkeit prüfen', type: 'activity' },\n      { id: 'produce', name: 'Produzieren', type: 'activity' },\n      { id: 'quality', name: 'Qualitätskontrolle', type: 'activity' },\n      { id: 'package', name: 'Verpacken', type: 'activity' },\n      { id: 'ship', name: 'Versenden', type: 'activity' },\n      { id: 'end', name: 'Bestellung abgeschlossen', type: 'end' }\n    ],\n    flows: [\n      { from: 'start', to: 'check', frequency: 100 },\n      { from: 'check', to: 'produce', frequency: 85 },\n      { from: 'check', to: 'ship', frequency: 15 },\n      { from: 'produce', to: 'quality', frequency: 85 },\n      { from: 'quality', to: 'package', frequency: 80 },\n      { from: 'quality', to: 'produce', frequency: 5 },\n      { from: 'package', to: 'ship', frequency: 80 },\n      { from: 'ship', to: 'end', frequency: 95 }\n    ]\n  }\n}\n\nconst generateComparisonData = () => {\n  return {\n    before: generateProcessModel(),\n    after: {\n      // Enhanced process model with improvements\n      activities: [\n        { id: 'start', name: 'Bestellung eingegangen', type: 'start' },\n        { id: 'check', name: 'Verfügbarkeit prüfen', type: 'activity' },\n        { id: 'produce', name: 'Produzieren', type: 'activity' },\n        { id: 'parallel', name: 'Qualität & Verpackung', type: 'parallel' },\n        { id: 'ship', name: 'Versenden', type: 'activity' },\n        { id: 'end', name: 'Bestellung abgeschlossen', type: 'end' }\n      ],\n      improvements: ['25% schneller', '15% kostengünstiger']\n    }\n  }\n}\n\nconst getConformanceClass = (fitness) => {\n  if (fitness >= 0.9) return 'score-excellent'\n  if (fitness >= 0.8) return 'score-good'\n  if (fitness >= 0.7) return 'score-fair'\n  return 'score-poor'\n}\n\nconst getDeviationClass = (severity) => {\n  switch (severity) {\n    case 'high': return 'deviation-high'\n    case 'medium': return 'deviation-medium'\n    case 'low': return 'deviation-low'\n    default: return 'deviation-medium'\n  }\n}\n\nconst getImpactClass = (impact) => {\n  switch (impact) {\n    case 'high': return 'impact-high'\n    case 'medium': return 'impact-medium'\n    case 'low': return 'impact-low'\n    default: return 'impact-medium'\n  }\n}\n\n// Event handlers\nconst handleError = (err) => {\n  error.value = err\n  handleErrorUtil(err, {\n    component: 'ProcessPanel',\n    action: 'component_error'\n  })\n}\n\nconst handleActivitySelect = (activity) => {\n  console.log('Activity selected:', activity)\n}\n\nconst handlePathSelect = (path) => {\n  console.log('Path selected:', path)\n}\n\nconst handleImprovementSelect = (improvement) => {\n  console.log('Improvement selected:', improvement)\n}\n\nconst exploreDeviation = (deviation) => {\n  console.log('Exploring deviation:', deviation)\n}\n\nconst loadProcessData = () => {\n  if (activeTab.value === 'discovery') {\n    discoverProcesses()\n  }\n}\n</script>\n\n<style scoped>\n.process-panel {\n  @apply flex flex-col h-full bg-white rounded-lg shadow-lg;\n}\n\n.panel-header {\n  @apply p-6 border-b border-gray-200;\n}\n\n.panel-title {\n  @apply text-2xl font-bold text-gray-900 mb-2;\n}\n\n.panel-description {\n  @apply text-gray-600;\n}\n\n.panel-controls {\n  @apply p-6 bg-gray-50 border-b border-gray-200;\n}\n\n.process-tabs {\n  @apply flex space-x-2;\n}\n\n.tab-button {\n  @apply px-4 py-2 rounded-lg font-medium transition-colors;\n  @apply bg-white text-gray-700 hover:bg-gray-100;\n}\n\n.tab-active {\n  @apply bg-blue-600 text-white hover:bg-blue-700;\n}\n\n.panel-content {\n  @apply flex-1 p-6 overflow-auto;\n}\n\n.process-content {\n  @apply space-y-6;\n}\n\n.controls-row {\n  @apply flex flex-wrap items-end gap-4 mb-6;\n}\n\n.control-group {\n  @apply flex flex-col min-w-48;\n}\n\n.control-group label {\n  @apply text-sm font-medium text-gray-700 mb-2;\n}\n\n.process-visualization {\n  @apply w-full bg-gray-50 rounded-lg p-4 mb-6;\n}\n\n.process-stats {\n  @apply space-y-4;\n}\n\n.stats-title {\n  @apply text-lg font-semibold text-gray-900;\n}\n\n.stats-grid {\n  @apply grid grid-cols-2 md:grid-cols-4 gap-4;\n}\n\n.stat-card {\n  @apply bg-gray-50 rounded-lg p-4 text-center;\n}\n\n.stat-label {\n  @apply text-sm text-gray-600 mb-1;\n}\n\n.stat-value {\n  @apply text-lg font-bold text-gray-900;\n}\n\n.conformance-overview {\n  @apply flex items-center gap-8 mb-6;\n}\n\n.score-circle {\n  @apply w-24 h-24 rounded-full flex flex-col items-center justify-center text-white font-bold;\n}\n\n.score-excellent { @apply bg-green-500; }\n.score-good { @apply bg-blue-500; }\n.score-fair { @apply bg-yellow-500; }\n.score-poor { @apply bg-red-500; }\n\n.score-value {\n  @apply text-xl;\n}\n\n.score-label {\n  @apply text-xs;\n}\n\n.conformance-metrics {\n  @apply space-y-2;\n}\n\n.metric-item {\n  @apply text-sm;\n}\n\n.metric-label {\n  @apply text-gray-600 mr-2;\n}\n\n.metric-value {\n  @apply font-medium text-gray-900;\n}\n\n.deviations-list {\n  @apply space-y-4;\n}\n\n.deviations-title {\n  @apply text-lg font-semibold text-gray-900;\n}\n\n.deviation-items {\n  @apply space-y-3;\n}\n\n.deviation-item {\n  @apply rounded-lg p-4 border-l-4;\n}\n\n.deviation-high { @apply bg-red-50 border-red-500; }\n.deviation-medium { @apply bg-yellow-50 border-yellow-500; }\n.deviation-low { @apply bg-blue-50 border-blue-500; }\n\n.deviation-header {\n  @apply flex justify-between items-center mb-2;\n}\n\n.deviation-type {\n  @apply font-medium text-gray-900;\n}\n\n.deviation-count {\n  @apply text-sm text-gray-600;\n}\n\n.deviation-description {\n  @apply text-sm text-gray-700 mb-3;\n}\n\n.deviation-actions {\n  @apply flex gap-2;\n}\n\n.optimization-comparison {\n  @apply mb-6;\n}\n\n.comparison-chart {\n  @apply w-full bg-gray-50 rounded-lg p-4;\n}\n\n.improvement-suggestions {\n  @apply space-y-4;\n}\n\n.suggestions-title {\n  @apply text-lg font-semibold text-gray-900;\n}\n\n.suggestion-items {\n  @apply space-y-4;\n}\n\n.suggestion-item {\n  @apply bg-gray-50 rounded-lg p-4;\n}\n\n.suggestion-header {\n  @apply flex justify-between items-center mb-2;\n}\n\n.suggestion-title {\n  @apply font-medium text-gray-900;\n}\n\n.suggestion-impact {\n  @apply px-2 py-1 rounded text-xs font-medium;\n}\n\n.impact-high { @apply bg-green-200 text-green-800; }\n.impact-medium { @apply bg-yellow-200 text-yellow-800; }\n.impact-low { @apply bg-blue-200 text-blue-800; }\n\n.suggestion-description {\n  @apply text-sm text-gray-700 mb-3;\n}\n\n.suggestion-metrics {\n  @apply flex gap-4 mb-3;\n}\n\n.metric {\n  @apply text-sm;\n}\n\n.suggestion-actions {\n  @apply flex gap-2;\n}\n\n.error-container,\n.loading-container {\n  @apply flex flex-col items-center justify-center h-64;\n}\n\n.loading-text {\n  @apply mt-4 text-gray-600;\n}\n</style>"],"names":["_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_42","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","_hoisted_64","_hoisted_65","_hoisted_66","_hoisted_67","_hoisted_68","_hoisted_69","dataStore","useDataStore","uiStore","useUIStore","selectedVisualization","ref","dashboardLoading","containerWidth","getCountriesArray","currentProduct","selectedProduct","currentYear","selectedYear","currentMetric","selectedMetric","timeseriesData","metricKey","productTimeseries","Object","entries","map","country","countryData","yearData","find","d","year","value","unit","filter","item","rawData","getProductionData","Array","isArray","data","selectedCountryData","computed","selectedCountry","countryRank","index","sort","a","b","findIndex","topCountries","countries","NON_COUNTRY_ENTITIES","includes","toLowerCase","slice","globalStats","hasTimeseries","total","topProducer","dataArray","length","validData","reduce","sum","max","onMounted","async","hasData","initializeApp","loadProductionData","error","updateWidth","Math","min","window","innerWidth","addEventListener","resizeHandler","onUnmounted","removeEventListener","watch","product","label","icon","countryCode","_a","setSelectedCountry","addNotification","type","title","message","_openBlock","_createElementBlock","_createElementVNode","_cache","fill","stroke","viewBox","_toDisplayString","$setup","Date","getFullYear","toLocaleString","_b","replace","l","toUpperCase","_c","_hoisted_24","onClick","$event","toFixed","_Fragment","_renderList","visualizationOptions","option","key","_normalizeClass","_hoisted_41","_hoisted_43","_createVNode","onCountryClick","onCountryHover","_hoisted_44","onPointHover","onPointClick","_hoisted_45","width","height","round","_d","availableYears","_e","availableProducts","_g","_f","geoData","features","_component_router_link","to","productMappings","Beer","Oats","Bananas","Dates","Onions","Plantains","Vegetables","Yams","Beans","Groundnuts","Peas","Pulses","Treenuts","Cream","Eggs","Meat","Offals","Pigmeat","Cephalopods","Crustaceans","Oilcrops","Cloves","Cottonseed","Pepper","Pimento","Soyabeans","Spices","Stimulants","Honey","Wine","Miscellaneous","animal_fats","apples_and_products","aquatic_animals_others","aquatic_plants","aquatic_products_other","bananas","barley_and_products","beans","beer","beverages_fermented","bovine_meat","butter_ghee","cassava_and_products","cephalopods","cereals___excluding_beer","cereals_other","citrus_other","cloves","cocoa_beans_and_products","coconut_oil","coconuts___incl_copra","coffee_and_products","cottonseed","cottonseed_oil","cream","crustaceans","dates","demersal_fish","eggs","fats_animals_raw","fish_body_oil","fish_liver_oil","fish_seafood","freshwater_fish","fruits___excluding_wine","fruits_other","grapefruit_and_products","grapes_and_products_excl_wine","groundnut_oil","groundnuts","honey","lemons_limes_and_products","maize_and_products","maize_germ_oil","marine_fish_other","meat","meat_other","milk___excluding_butter","millet_and_products","miscellaneous","molluscs_other","nuts_and_products","oats","offals","offals_edible","oilcrops","oilcrops_oil_other","oilcrops_other","olive_oil","olives_including_preserved","onions","oranges_mandarines","palm_kernels","palm_oil","palmkernel_oil","peas","pelagic_fish","pepper","pigmeat","pimento","pineapples_and_products","plantains","potatoes_and_products","poultry_meat","pulses","pulses_other_and_products","rape_and_mustard_oil","rape_and_mustardseed","rice_and_products","ricebran_oil","roots_other","rye_and_products","sesame_seed","sesameseed_oil","sorghum_and_products","soyabean_oil","soyabeans","spices","spices_other","starchy_roots","stimulants","sugar_beet","sugar_cane","sugar_crops","sugar_non_centrifugal","sugar_raw_equivalent","sunflower_seed","sunflowerseed_oil","sweet_potatoes","sweeteners_other","tea_including_mate","tomatoes_and_products","treenuts","vegetable_oils","vegetables","vegetables_other","wheat_and_products","wine","yams","productCategories","cereals","name","products","fruits","legumes","seafood","oils","seeds","sugar","other","getGermanName","englishName","getMLGermanName","mlProductName","spaceVersion","titleCase","split","word","charAt","join","getProductCategory","productName","categoryKey","category","getAllProductOptions","keys","categoryName","localeCompare","chartData","isLoading","hasError","productOptions","individualItems","faoMetadata","data_summary","food_items","countryOptions","productData","updateChartData","yearlyTotals","Map","forEach","currentTotal","get","set","from","loadData","err","point","onError","handleError","options","placeholder","size","metricOptions","disabled","variant","_createBlock","_createTextVNode","showRetry","onRetry","handlePointClick","handleErrorUtil","wrapAsync","useErrorHandling","simulationResults","selectedScenario","hasConfigChanged","lastAppliedConfig","scenarioConfig","climateChange","populationGrowth","techProgress","economicGrowth","availableScenarios","id","description","sliderPreset","chartConfig","margin","top","right","bottom","left","showConfidenceInterval","showScenarios","interactive","animated","calculateStochasticPath","baseValue","trend","volatility","steps","deltaT","path","currentValue","i","dt","random","sqrt","push","runMonteCarloSimulation","config","simulations","paths","totalTrend","totalVolatility","abs","sim","calculateConfidenceIntervals","confidenceLevel","intervals","step","values","lowerIndex","floor","upperIndex","mean","val","lower","upper","median","runSimulation","scenario","s","scenarioName","Promise","resolve","setTimeout","simulationPaths","confidenceIntervals","baselinePaths","baselinePath","interval","finalScenario","finalBaseline","productionChange","foodSecurity","environmentImpact","economicImpact","timeSeriesData","baseline","dataSource","simulationDetails","totalPaths","timeHorizon","method","component","operation","newConfig","hasActualChanges","some","deep","handleScenarioSelect","scenarioId","resetValues","action","modelValue","resetConfig","formatChange","onScenarioSelect","selectedForecastType","selectedForecast","selectedModel","predictions","modelStats","forecastData","availableForecasts","forecastTypeOptions","forecastOptions","forecast","file","cleanValue","regionPrefix","startsWith","parts","potentialProduct","modelOptions","showHistorical","showTrend","loadPredictions","loadMLForecast","model_performance","linear","r2_score","polynomial","forecastArray","ensemble_forecasts","forecasts","historicalData","historical_data","lastHistoricalYear","pred","isEnsemble","predictedValue","ensemble_mean","predicted_value","confidence_lower","model_min","confidence_upper","model_max","calculateTrend","reliability","model_agreement","uncertainty_percent","uncertainty_level","getUncertaintyLevel","model","perf","accuracy","rmse","mse","mae","r2","models","avgR2","m","avgMSE","avgMAE","avgAgreement","p","prediction","baseYear","years_ahead","uncertaintyPercent","loadAvailableForecasts","loadMLGlobalIndex","loadMLRegionalIndex","loadMLCountryIndex","files","trim","loadMLComprehensiveIndex","showConfidence","productMatch","match","germanProductName","Intl","NumberFormat","maximumFractionDigits","format","ensemble","parseFloat","isNaN","firstPred","growthPercent","avgUncertainty","getFormattedForecastTitle","getModelLabel","onPredictionSelect","handlePredictionSelect","onConfidenceToggle","handleConfidenceToggle","getGrowthInsight","getAccuracyInsight","getUncertaintyInsight","getGlobalInsight","formatValue","getTrendClass","formatTrend","style","_normalizeStyle","activeTab","networkConfig","analysisType","threshold","clusterConfig","numClusters","hierarchyConfig","networkData","networkMetrics","clusterResults","hierarchyData","hierarchyMetrics","analysisTabs","analysisTypeOptions","clusterMethodOptions","hierarchyTypeOptions","networkChartConfig","showLabels","enableForce","nodeRadius","linkWidth","clusterChartConfig","showClusters","showCentroids","hierarchyChartConfig","orientation","collapsible","loadAnalysis","rawNetworkData","loadNetworkData","nodes","links","calculateNetworkMetrics","processNetworkData","performClustering","productionDataMap","Set","feature","properties","add","countriesArray","clusters","colors","clusterSize","ceil","startIdx","endIdx","members","color","cohesion","separation","visualization","generateClusterVisualization","buildHierarchy","summaryData","loadSummaryData","production_by_category","root","children","categories","total_production","levels","totalNodes","cat","balance","generateHierarchyData","group","sourceId","targetId","source","target","nodeCount","linkCount","density","clustering","diameter","modularity","points","cluster","clusterIndex","centerX","centerY","member","memberIndex","x","y","newTab","node","link","level","tab","onNodeClick","handleNodeSelect","onAnalysisChange","handleAnalysisChange","onClusterSelect","handleClusterSelect","borderLeftColor","onNodeExpand","handleNodeExpand","onLevelSelect","handleLevelSelect","discoveryConfig","processType","timeRange","conformanceConfig","referenceModel","enhancementConfig","optimizationType","processModel","processStats","conformanceResults","enhancementResults","processTabs","processTypeOptions","referenceModelOptions","optimizationTypeOptions","processChartConfig","showMetrics","showFrequencies","comparisonChartConfig","showBefore","showAfter","showImprovements","discoverProcesses","generateProcessModel","activities","traces","variants","avgDuration","checkConformance","fitness","precision","recall","f1Score","deviations","count","severity","enhanceProcess","comparison","generateComparisonData","suggestions","impact","timeSavings","costReduction","flows","frequency","before","after","improvements","activity","improvement","deviation","loadProcessData","onActivitySelect","handleActivitySelect","onPathSelect","handlePathSelect","exploreDeviation","onImprovementSelect","handleImprovementSelect","suggestion"],"mappings":"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"}
{"version":3,"file":"visualizations-D5gvM8XN.js","sources":["../../src/components/visualizations/WorldMap.vue","../../src/utils/chartColors.js","../../src/components/visualizations/TimeseriesChart.vue","../../src/components/visualizations/SimulationChart.vue","../../src/components/visualizations/MLChart.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref, shallowRef, computed, watch, onMounted, onUnmounted, nextTick } from 'vue'\n// Removed unused composables\nimport { useDataStore } from '@/stores/useDataStore'\nimport { useUIStore } from '@/stores/useUIStore'\nimport { useVisualizationStore } from '@/stores/useVisualizationStore'\nimport BaseButton from '@/components/ui/BaseButton.vue'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner.vue'\nimport * as d3 from 'd3'\nimport * as topojson from 'topojson-client'\nimport { createD3AxisFormatter, createD3TooltipFormatter, getAxisUnitLabel } from '@/utils/formatters'\n\ninterface Props {\n  width?: number\n  height?: number\n  selectedProduct?: string\n  selectedYear?: number\n  selectedMetric?: string\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  width: 800,\n  height: 600,\n  selectedProduct: 'Wheat and products',\n  selectedYear: 2022,\n  selectedMetric: 'production'\n})\n\nconst emit = defineEmits<{\n  countryClick: [country: string]\n  countryHover: [country: string | null]\n}>()\n\n// Stores\nconst dataStore = useDataStore()\nconst uiStore = useUIStore()\nconst vizStore = useVisualizationStore()\n\n// Refs\nconst containerRef = ref<HTMLDivElement>()\nconst svgContainerRef = ref<HTMLDivElement>()\n\n// State with proper Vue reactivity\nconst isLoading = ref(false)\nconst error = ref<string | null>(null)\nconst geoDataStatic = shallowRef(null) // Use shallowRef for large objects\nconst productionDataStatic = shallowRef([]) // Use shallowRef for arrays\nconst isInitialized = ref(false)\n\n// Click debouncing to prevent unwanted country detail views\nlet lastClickTime = 0\n\n// Legend state\nconst legendScale = ref(null)\nconst legendDomain = ref([0, 100000000]) // Static domain across years\nconst legendUnit = ref('1000 t') // Unit for legend display\n\n// Tooltip implementation with D3\nlet tooltipDiv = null\n\nconst tooltip = {\n  element: null,\n  \n  init: () => {\n    // Create tooltip div if it doesn't exist\n    if (!tooltipDiv) {\n      tooltipDiv = d3.select('body')\n        .append('div')\n        .attr('class', 'worldmap-tooltip')\n        .style('position', 'absolute')\n        .style('padding', '10px')\n        .style('background', 'rgba(0, 0, 0, 0.9)')\n        .style('color', 'white')\n        .style('border-radius', '4px')\n        .style('pointer-events', 'none')\n        .style('font-size', '14px')\n        .style('box-shadow', '0 2px 4px rgba(0,0,0,0.2)')\n        .style('z-index', '9999')\n        .style('opacity', 0)\n        .style('transition', 'opacity 0.2s')\n    }\n    tooltip.element = tooltipDiv\n  },\n  \n  show: (event, data, formatter) => {\n    if (!tooltipDiv) tooltip.init()\n    \n    // Get content from formatter or use default\n    const content = formatter ? formatter() : 'No data'\n    \n    // Get mouse position\n    const mouseX = event.pageX || event.clientX\n    const mouseY = event.pageY || event.clientY\n    \n    tooltipDiv\n      .html(content)\n      .style('opacity', 1)\n      .style('left', (mouseX + 10) + 'px')\n      .style('top', (mouseY - 28) + 'px')\n  },\n  \n  hide: () => {\n    if (tooltipDiv) {\n      tooltipDiv.style('opacity', 0)\n    }\n  },\n  \n  destroy: () => {\n    if (tooltipDiv) {\n      tooltipDiv.remove()\n      tooltipDiv = null\n    }\n  }\n}\n\n// Processed production data (non-reactive)\nconst getProcessedProductionData = () => {\n  if (!Array.isArray(productionDataStatic.value)) return []\n  return productionDataStatic.value.filter(d => d.value > 0)\n}\n\n// Map elements\nlet projection: d3.GeoProjection\nlet path: d3.GeoPath\nlet colorScale: d3.ScaleQuantize<string>\nlet zoom: d3.ZoomBehavior<SVGElement, unknown>\n\n// Viridis color scheme for production data\nconst greenColorScheme = [\n  '#440154',  // Dark purple (lowest values)\n  '#471365',  // Purple\n  '#481F70',  // Purple\n  '#482878',  // Purple\n  '#46337E',  // Purple\n  '#423E85',  // Purple-blue\n  '#3E4A89',  // Blue\n  '#39558C',  // Blue\n  '#32608D',  // Blue\n  '#2D6B8E',  // Blue-teal\n  '#29768E',  // Teal\n  '#25818E',  // Teal\n  '#228C8D',  // Teal\n  '#20978C',  // Teal-green\n  '#20A386',  // Green\n  '#2AB07E',  // Green\n  '#41BD72',  // Light green\n  '#5DC863',  // Light green\n  '#7DD151',  // Yellow-green\n  '#FDE725'   // Yellow (highest values)\n]\n\n// Computed properties\nconst mapConfig = computed(() => ({\n  projection: 'naturalEarth1',\n  colorScheme: greenColorScheme,\n  ...vizStore.getVisualizationConfig('worldMap')\n}))\n\n// Initialize map\nconst initializeMap = async () => {\n  console.log('üöÄ WorldMap: initializeMap called')\n  console.log('üîç WorldMap: Props:', {\n    selectedProduct: props.selectedProduct,\n    selectedYear: props.selectedYear,\n    selectedMetric: props.selectedMetric\n  })\n  console.log('üîç WorldMap: Store values:', {\n    uiStoreProduct: uiStore.selectedProduct,\n    uiStoreYear: uiStore.selectedYear,\n    uiStoreMetric: uiStore.selectedMetric\n  })\n  console.log('üîç WorldMap: containerRef.value:', containerRef.value)\n  console.log('üîç WorldMap: svgContainerRef.value:', svgContainerRef.value)\n  console.log('üîç WorldMap: isInitialized:', isInitialized.value)\n  \n  if (!containerRef.value || !svgContainerRef.value) {\n    console.warn('‚ö†Ô∏è WorldMap: Container not ready')\n    return\n  }\n  \n  if (isInitialized.value) {\n    console.warn('‚ö†Ô∏è WorldMap: Already initialized')\n    return\n  }\n  \n  isInitialized.value = true\n\n  try {\n    console.log('üîÑ WorldMap: Starting map initialization...')\n    isLoading.value = true\n    error.value = null\n\n    // Load geographic data\n    console.log('üì° WorldMap: Loading geo data...')\n    const loadedGeoData = await dataStore.loadGeoData('geo')\n    console.log('‚úÖ WorldMap: Geo data loaded:', loadedGeoData ? 'Success' : 'Failed')\n    console.log('üìä WorldMap: Features count:', loadedGeoData?.features?.length || 'N/A')\n    geoDataStatic.value = loadedGeoData\n\n    // Initialize tooltip\n    tooltip.init()\n    \n    // Initialize map with direct D3 approach (working solution)\n    console.log('üöÄ WorldMap: Creating map directly...')\n    await createMapDirect(loadedGeoData)\n\n  } catch (err) {\n    error.value = 'Fehler beim Laden der Karte'\n    console.error('‚ùå WorldMap: Map initialization error:', err)\n    console.error('‚ùå WorldMap: Error stack:', err.stack)\n  } finally {\n    // Use requestAnimationFrame to avoid Vue reactivity issues\n    requestAnimationFrame(() => {\n      isLoading.value = false\n      console.log('üèÅ WorldMap: initializeMap finished')\n    })\n  }\n}\n\n// Create map directly (working approach from WorldMapSimple)\nconst createMapDirect = async (data) => {\n  console.log('üé® WorldMap: createMapDirect called')\n  \n  if (!svgContainerRef.value) {\n    console.error('‚ùå WorldMap: No SVG container ref available')\n    return\n  }\n  \n  if (!data?.features || !Array.isArray(data.features)) {\n    console.error('‚ùå WorldMap: Invalid geo data')\n    return\n  }\n\n  // Store DOM element reference to avoid Vue reactivity\n  const containerElement = svgContainerRef.value\n  const container = d3.select(containerElement)\n  \n  // Clear existing content safely\n  const existingSvg = container.select('svg')\n  if (!existingSvg.empty()) {\n    existingSvg.remove()\n  }\n  \n  // Get dimensions with better fallbacks\n  const containerRect = svgContainerRef.value.getBoundingClientRect()\n  let width = containerRect.width\n  let height = containerRect.height\n  \n  console.log('üìê WorldMap: SVG Container rect:', containerRect)\n  console.log('üìê WorldMap: Main Container rect:', containerRef.value?.getBoundingClientRect())\n  console.log('üìê WorldMap: Parent element rect:', svgContainerRef.value.parentElement?.getBoundingClientRect())\n  \n  // If container has no size, try parent elements\n  if (width < 10 || height < 10) {\n    // Try main container\n    const mainRect = containerRef.value?.getBoundingClientRect()\n    if (mainRect && mainRect.width > 10 && mainRect.height > 10) {\n      width = mainRect.width\n      height = mainRect.height\n      console.log('üìê WorldMap: Using main container dimensions')\n    } else if (svgContainerRef.value.parentElement) {\n      // Try parent element\n      const parentRect = svgContainerRef.value.parentElement.getBoundingClientRect()\n      width = parentRect.width || props.width\n      height = parentRect.height || props.height\n      console.log('üìê WorldMap: Using parent element dimensions')\n    }\n  }\n  \n  // Final fallback to props\n  if (width < 100) width = props.width\n  if (height < 100) height = props.height\n  \n  console.log('üìê WorldMap: Final dimensions:', { width, height })\n  \n  if (width === 0 || height === 0) {\n    console.error('‚ùå WorldMap: Invalid dimensions, using defaults')\n    width = props.width\n    height = props.height\n  }\n\n  // Create SVG with explicit sizing\n  const svg = container\n    .append('svg')\n    .attr('class', 'world-map-svg')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('viewBox', `0 0 ${width} ${height}`)\n    .attr('preserveAspectRatio', 'xMidYMid meet')\n    .style('width', '100%')\n    .style('height', '100%')\n    .style('display', 'block')\n    .style('background-color', 'transparent')\n\n  console.log('‚úÖ WorldMap: SVG created')\n\n  // Setup projection with better scale for visibility\n  projection = d3.geoNaturalEarth1()\n    .scale(width / 5.5)\n    .translate([width / 2, height / 2.2])\n\n  path = d3.geoPath().projection(projection)\n  \n  console.log('‚úÖ WorldMap: Projection created')\n\n  // Setup zoom behavior\n  zoom = d3.zoom()\n    .scaleExtent([0.8, 8])\n    .on('zoom', (event) => {\n      svg.select('.map-container').attr('transform', event.transform)\n    })\n\n  svg.call(zoom)\n  console.log('‚úÖ WorldMap: Zoom behavior set up')\n\n  // Create main group\n  const g = svg.append('g')\n    .attr('class', 'map-container')\n\n  // Draw countries directly\n  drawCountriesDirect(g, data.features)\n\n  // Simulate exact manual product selection flow\n  console.log('üîÑ WorldMap: === STARTING MANUAL PRODUCT SELECTION SIMULATION ===')\n  console.log('üîÑ WorldMap: Current state before simulation:', {\n    selectedProduct: props.selectedProduct,\n    selectedYear: props.selectedYear,\n    uiStoreProduct: uiStore.selectedProduct,\n    uiStoreYear: uiStore.selectedYear,\n    hasTimeseriesData: !!dataStore.timeseriesData,\n    productionDataLength: productionDataStatic.value?.length || 0\n  })\n  \n  // Simulate the exact handleProductChange flow from ProductSelector\n  const selectedProduct = props.selectedProduct\n  const selectedYear = props.selectedYear\n  \n  if (selectedProduct && selectedYear) {\n    console.log('üîÑ WorldMap: Setting selected product in store...')\n    // This is exactly what handleProductChange does\n    uiStore.setSelectedProduct(selectedProduct)\n    \n    console.log('üîÑ WorldMap: Waiting for Vue reactivity...')\n    // Force Vue reactivity to update\n    await nextTick()\n    \n    console.log('üîÑ WorldMap: Store values after setting:', {\n      uiStoreProduct: uiStore.selectedProduct,\n      uiStoreYear: uiStore.selectedYear\n    })\n    \n    // Simulate the ProductSelector watcher logic\n    try {\n      // Wait for timeseries data to be available\n      console.log('üîÑ WorldMap: Checking for timeseries data...')\n      let retries = 0\n      while (!dataStore.timeseriesData && retries < 10) {\n        console.log(`üîÑ WorldMap: Waiting for timeseries data (attempt ${retries + 1})...`)\n        await new Promise(resolve => setTimeout(resolve, 200))\n        retries++\n      }\n      \n      if (dataStore.timeseriesData && dataStore.timeseriesData[selectedProduct]) {\n        console.log(`üîÑ WorldMap: Found timeseries data for ${selectedProduct}`)\n        // Timeseries data is available, no need to load production data\n      } else if (dataStore.timeseriesData) {\n        console.log('üîÑ WorldMap: Timeseries available but no data for product, using fallback...')\n        // Try to load production data as fallback\n        try {\n          await dataStore.loadProductionData(selectedProduct, selectedYear)\n          console.log('üîÑ WorldMap: DataStore loading completed')\n        } catch (error) {\n          console.warn('üîÑ WorldMap: Production data loading failed, will use timeseries fallback')\n        }\n      } else {\n        console.warn('üîÑ WorldMap: No timeseries data available after waiting')\n      }\n      \n      // Force another Vue update cycle\n      console.log('üîÑ WorldMap: Second Vue reactivity wait...')\n      await nextTick()\n      \n      // Now force map update immediately\n      console.log('üîÑ WorldMap: Forcing immediate local data load...')\n      await loadProductionData()\n      \n      console.log('üîÑ WorldMap: Production data after load:', {\n        productionDataLength: productionDataStatic.value?.length || 0,\n        sampleData: productionDataStatic.value?.slice(0, 3)\n      })\n      \n      // Force map color update\n      console.log('üîÑ WorldMap: Looking for map container...')\n      const container = d3.select(svgContainerRef.value).select('.map-container')\n      if (!container.empty()) {\n        console.log('üîÑ WorldMap: Found container, forcing direct update...')\n        updateMapWithProductionDataDirect(container)\n      } else {\n        console.warn('üîÑ WorldMap: No map container found!')\n      }\n      \n    } catch (error) {\n      console.error('üîÑ WorldMap: Error during init simulation:', error)\n    }\n  } else {\n    console.warn('üîÑ WorldMap: Missing selectedProduct or selectedYear')\n  }\n  \n  console.log('üîÑ WorldMap: === MANUAL PRODUCT SELECTION SIMULATION COMPLETE ===')\n  \n  // Update with production data if available\n  const processedData = getProcessedProductionData()\n  if (processedData.length > 0) {\n    console.log('üìä WorldMap: Production data available, updating map colors')\n    updateMapWithProductionDataDirect(g)\n  } else {\n    console.log('‚ö†Ô∏è WorldMap: No production data available yet')\n  }\n  \n  // Don't create legend here - wait for production data\n  \n  console.log('üéâ WorldMap: Map creation completed successfully!')\n}\n\n// Direct country drawing (working approach)\nconst drawCountriesDirect = (container, features) => {\n  console.log('üåç WorldMap: Drawing countries directly...')\n  \n  // Get theme colors\n  const isDarkMode = document.documentElement.classList.contains('dark')\n  const defaultFill = isDarkMode ? '#374151' : '#e5e7eb' // gray-700 : gray-200\n  const defaultStroke = isDarkMode ? '#4B5563' : '#ffffff' // gray-600 : white\n  \n  const countries = container.selectAll('.country')\n    .data(features, d => d.properties.iso_a3 || d.properties.adm0_a3 || d.properties.name)\n  \n  // Remove old countries\n  countries.exit().remove()\n  \n  // Add new countries\n  const enterCountries = countries.enter()\n    .append('path')\n    .attr('class', 'country')\n    .attr('d', path)\n    .attr('fill', defaultFill)\n    .attr('stroke', defaultStroke)\n    .attr('stroke-width', 0.5)\n    .style('cursor', 'pointer')\n    .on('click', handleCountryClick)\n    .on('mouseover', handleCountryMouseover)\n    .on('mouseout', handleCountryMouseout)\n  \n  // Update existing countries\n  countries.merge(enterCountries)\n    .attr('d', path)\n    .attr('fill', defaultFill)\n    .attr('stroke', defaultStroke)\n  \n  const totalCountries = container.selectAll('.country').size()\n  console.log('‚úÖ WorldMap: Countries drawn, total:', totalCountries)\n}\n\n// Create legend\nconst createLegend = (svg) => {\n  console.log('üé® WorldMap: Creating legend...')\n  \n  // Remove existing legend\n  svg.select('.legend-group').remove()\n  \n  if (!legendScale.value || !legendDomain.value) {\n    console.log('‚ö†Ô∏è WorldMap: No legend scale available yet')\n    return\n  }\n  \n  const legendWidth = 200\n  const legendHeight = 10\n  const legendMargin = { top: 10, right: 20, bottom: 30, left: 20 }\n  \n  // Get actual SVG dimensions\n  const svgNode = svg.node()\n  const svgWidth = svgNode ? svgNode.clientWidth : props.width\n  const svgHeight = svgNode ? svgNode.clientHeight : props.height\n  \n  const legend = svg.append('g')\n    .attr('class', 'legend-group')\n    .attr('transform', `translate(${svgWidth - legendWidth - legendMargin.right}, ${svgHeight - legendHeight - legendMargin.bottom})`)\n  \n  // Create gradient\n  const gradientId = 'legend-gradient'\n  \n  // Check if defs already exists\n  let defs = svg.select('defs')\n  if (defs.empty()) {\n    defs = svg.append('defs')\n  }\n  \n  const gradient = defs\n    .append('linearGradient')\n    .attr('id', gradientId)\n    .attr('x1', '0%')\n    .attr('x2', '100%')\n    .attr('y1', '0%')\n    .attr('y2', '0%')\n  \n  // Color stops are now added above in the scale section\n  \n  // Add rectangle with gradient\n  const isDarkMode = document.documentElement.classList.contains('dark')\n  const legendStroke = isDarkMode ? '#4B5563' : '#e5e7eb' // gray-600 : gray-200\n  \n  legend.append('rect')\n    .attr('width', legendWidth)\n    .attr('height', legendHeight)\n    .attr('fill', `url(#${gradientId})`)\n    .attr('stroke', legendStroke)\n    .attr('stroke-width', 0.5)\n  \n  // Add scale\n  const legendScaleLinear = d3.scaleLinear()\n    .domain(legendDomain.value)\n    .range([0, legendWidth])\n  \n  // Update gradient with smooth transition\n  gradient.selectAll('stop').remove()\n  \n  // Add color stops for each color in the scheme with equal steps\n  greenColorScheme.forEach((color, i) => {\n    const startPos = (i / greenColorScheme.length) * 100\n    const endPos = ((i + 1) / greenColorScheme.length) * 100\n    \n    // Add start stop\n    gradient.append('stop')\n      .attr('offset', `${startPos}%`)\n      .attr('stop-color', color)\n    \n    // Add end stop (except for the last color)\n    if (i < greenColorScheme.length - 1) {\n      gradient.append('stop')\n        .attr('offset', `${endPos}%`)\n        .attr('stop-color', color)\n    }\n  })\n  \n  // Create tick values for the legend with 19 intervals (20 colors)\n  const tickValues = []\n  const stepSize = (legendDomain.value[1] - legendDomain.value[0]) / (greenColorScheme.length - 1)\n  \n  // Show min, max, and a few intermediate values\n  tickValues.push(legendDomain.value[0]) // Min value\n  \n  // Add 4 intermediate values (at positions 5, 10, 15)\n  for (const i of [5, 10, 15]) {\n    tickValues.push(legendDomain.value[0] + (stepSize * i))\n  }\n  \n  tickValues.push(legendDomain.value[1]) // Max value\n  \n  const legendAxis = d3.axisBottom(legendScaleLinear)\n    .ticks(tickValues ? tickValues.length : 5)\n    .tickFormat(createD3AxisFormatter(legendUnit.value))\n  \n  if (tickValues) {\n    legendAxis.tickValues(tickValues)\n  }\n  \n  const legendTextColor = isDarkMode ? '#D1D5DB' : '#374151' // gray-300 : gray-700\n  \n  const legendAxisGroup = legend.append('g')\n    .attr('transform', `translate(0, ${legendHeight})`)\n    .call(legendAxis)\n    \n  legendAxisGroup.selectAll('text')\n    .style('font-size', '10px')\n    .style('fill', legendTextColor)\n    \n  legendAxisGroup.selectAll('path')\n    .style('stroke', legendTextColor)\n    \n  legendAxisGroup.selectAll('line')\n    .style('stroke', legendTextColor)\n  \n  // Add title\n  legend.append('text')\n    .attr('x', legendWidth / 2)\n    .attr('y', -5)\n    .attr('text-anchor', 'middle')\n    .style('font-size', '11px')\n    .style('font-weight', '500')\n    .style('fill', legendTextColor)\n    .text(() => {\n      const metricLabels = {\n        'production': 'Produktion',\n        'import_quantity': 'Import',\n        'export_quantity': 'Export',\n        'domestic_supply': 'Versorgung'\n      }\n      const metricLabel = metricLabels[props.selectedMetric] || 'Wert'\n      \n      // Get appropriate unit label based on legendUnit\n      let unitLabel = ''\n      if (legendUnit.value === '1000 t') {\n        unitLabel = '(1000 t)'\n      } else if (legendUnit.value === 't') {\n        unitLabel = '(t)'\n      } else if (legendUnit.value === 'kg') {\n        unitLabel = '(kg)'\n      } else {\n        unitLabel = `(${legendUnit.value})`\n      }\n      \n      return `${metricLabel} ${unitLabel}`\n    })\n}\n\n// Setup map with D3.js (keeping original for compatibility)\nconst setupMap = (container, data) => {\n  console.log('üé® WorldMap: setupMap called')\n  console.log('üé® WorldMap: Container:', container)\n  console.log('üé® WorldMap: Data type:', typeof data)\n  console.log('üé® WorldMap: Data keys:', data ? Object.keys(data) : 'No data')\n  console.log('üé® WorldMap: Features available:', data?.features ? 'Yes' : 'No')\n  console.log('üé® WorldMap: Features count:', data?.features?.length || 'N/A')\n  \n  if (!data?.features || !Array.isArray(data.features)) {\n    console.error('‚ùå WorldMap: Invalid geo data provided to setupMap:', data)\n    console.error('‚ùå WorldMap: Expected data.features to be an array, got:', typeof data?.features)\n    return\n  }\n\n  // Legacy function - dimensions handled in createMapDirect\n  console.log('‚ö†Ô∏è WorldMap: setupMap is deprecated - use createMapDirect instead')\n  return\n\n  // Create SVG directly\n  console.log('üñºÔ∏è WorldMap: Creating SVG directly...')\n  \n  // Remove existing SVG\n  container.select('svg').remove()\n  \n  // Create new SVG\n  const svg = container\n    .append('svg')\n    .attr('class', 'world-map-svg')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('viewBox', `0 0 ${width} ${height}`)\n    .attr('preserveAspectRatio', 'xMidYMid meet')\n\n  // Create main group\n  const g = svg.append('g')\n    .attr('class', 'map-container')\n    .attr('transform', 'translate(0, 0)')\n  \n  console.log('‚úÖ WorldMap: SVG created successfully')\n  console.log('üñºÔ∏è WorldMap: SVG node:', svg.node())\n  console.log('üñºÔ∏è WorldMap: Container group:', g.node())\n\n  // Setup projection\n  console.log('üåç WorldMap: Setting up projection...')\n  projection = d3.geoNaturalEarth1()\n    .scale(width / 6.5)\n    .translate([width / 2, height / 2])\n\n  path = d3.geoPath().projection(projection)\n  \n  console.log('‚úÖ WorldMap: Projection created')\n  console.log('üåç WorldMap: Projection scale:', projection.scale())\n  console.log('üåç WorldMap: Projection translate:', projection.translate())\n  console.log('üåç WorldMap: Path generator created')\n\n  // Setup zoom behavior\n  console.log('üîç WorldMap: Setting up zoom behavior...')\n  zoom = d3.zoom()\n    .scaleExtent([0.5, 8])\n    .on('zoom', (event) => {\n      console.log('üîç WorldMap: Zoom event:', event.transform)\n      g.attr('transform', event.transform)\n    })\n\n  svg.call(zoom)\n  console.log('‚úÖ WorldMap: Zoom behavior set up')\n\n  // Draw countries using data join pattern\n  console.log('üåç WorldMap: Drawing countries...')\n  drawCountries(g, data.features)\n  console.log('‚úÖ WorldMap: Countries drawn')\n\n  // Update with production data if available\n  const processedData = getProcessedProductionData()\n  if (processedData.length > 0) {\n    console.log('üìä WorldMap: Production data available, updating map colors')\n    updateMapWithProductionData()\n  } else {\n    console.log('‚ö†Ô∏è WorldMap: No production data available yet')\n  }\n  \n  console.log('üéâ WorldMap: setupMap completed successfully!')\n}\n\n// Draw countries using modern data join pattern\nconst drawCountries = (container, features) => {\n  console.log('üó∫Ô∏è WorldMap: Drawing countries, features count:', features?.length)\n  \n  if (!features || !Array.isArray(features) || features.length === 0) {\n    console.error('üó∫Ô∏è WorldMap: No valid features provided to drawCountries')\n    return\n  }\n\n  // Legacy function - use drawCountriesDirect instead\n  console.log('‚ö†Ô∏è WorldMap: drawCountries is deprecated - use drawCountriesDirect instead')\n  return\n  \n  console.log('üó∫Ô∏è WorldMap: Countries drawn successfully')\n}\n\n// Load production data\nconst loadProductionData = async () => {\n  console.log('üó∫Ô∏è WorldMap: loadProductionData called')\n  console.log('üó∫Ô∏è WorldMap: Props check:', {\n    selectedProduct: props.selectedProduct,\n    selectedYear: props.selectedYear,\n    selectedMetric: props.selectedMetric\n  })\n  \n  if (!props.selectedProduct || !props.selectedYear) {\n    console.warn('üó∫Ô∏è WorldMap: Missing required props, returning early')\n    return\n  }\n\n  try {\n    console.log(`üó∫Ô∏è WorldMap: Loading data for ${props.selectedProduct} ${props.selectedYear} - Metric: ${props.selectedMetric}`)\n    console.log('üîç WorldMap: Checking if timeseries data exists for this product...')\n    console.log('üîç WorldMap: Available timeseries products:', dataStore.timeseriesData ? Object.keys(dataStore.timeseriesData).slice(0, 10) : 'No timeseries data')\n    \n    let productionData = null\n    \n    // Check if we have timeseries data for this product (individual products)\n    if (dataStore.timeseriesData && dataStore.timeseriesData[props.selectedProduct]) {\n      console.log('üó∫Ô∏è WorldMap: Using timeseries data for individual product')\n      console.log('üîç WorldMap: Found product in timeseries:', props.selectedProduct)\n      const timeseriesData = dataStore.getTimeseriesDataForProduct(props.selectedProduct, props.selectedYear)\n      \n      if (timeseriesData) {\n        productionData = Object.entries(timeseriesData).map(([country, data]) => {\n          const metricKey = props.selectedMetric === 'production' ? 'production' :\n                           props.selectedMetric === 'import_quantity' ? 'imports' :\n                           props.selectedMetric === 'export_quantity' ? 'exports' :\n                           props.selectedMetric === 'domestic_supply_quantity' ? 'domestic_supply' :\n                           props.selectedMetric === 'feed' ? 'feed' :\n                           props.selectedMetric === 'food_supply_kcal' ? 'food_supply_kcal' :\n                           'production'\n          \n          const value = data[metricKey] || 0\n          let unit = data.unit || 't'\n          \n          // Override unit for specific metrics\n          if (props.selectedMetric === 'food_supply_kcal') {\n            unit = 'kcal/capita/day'\n          }\n          \n          return {\n            country: country,\n            countryCode: getCountryCode(country),\n            value: value,\n            unit: unit,\n            year: props.selectedYear,\n            element: props.selectedMetric\n          }\n        }).filter(item => item.value > 0)\n      }\n    } else {\n      // Fallback to production data for grouped products\n      console.log('üó∫Ô∏è WorldMap: Using production data for grouped product')\n      \n      // For feed and calorie metrics, only try to load if we're sure the product doesn't exist in timeseries\n      if (props.selectedMetric === 'feed' || props.selectedMetric === 'food_supply_kcal') {\n        console.warn('üó∫Ô∏è WorldMap: Feed/Calorie metric selected but product not found in timeseries data')\n        console.warn('üó∫Ô∏è WorldMap: This suggests the product should have individual data. Setting empty array.')\n        productionData = []\n      } else {\n        productionData = await dataStore.loadProductionData(\n          props.selectedProduct, \n          props.selectedYear\n        )\n      }\n    }\n    \n    console.log('üó∫Ô∏è WorldMap: Raw production data:', productionData)\n    console.log('üó∫Ô∏è WorldMap: Data type:', typeof productionData)\n\n    if (productionData) {\n      let transformedData = []\n      \n      // Check if it's already an array\n      if (Array.isArray(productionData)) {\n        transformedData = productionData.map(item => ({\n          country: item.country || item.Area || '',\n          countryCode: item.countryCode || item.iso3 || getCountryCode(item.country || item.Area || ''),\n          value: item.value || item.Value || 0,\n          unit: item.unit || item.Unit || 't',\n          year: item.year || item.Year || props.selectedYear,\n          element: item.element || item.Element || props.selectedMetric\n        }))\n      } else if (productionData.data && Array.isArray(productionData.data)) {\n        // Handle wrapped data\n        transformedData = productionData.data.map(item => ({\n          country: item.country || item.Area || '',\n          countryCode: item.countryCode || item.iso3 || getCountryCode(item.country || item.Area || ''),\n          value: item.value || item.Value || 0,\n          unit: item.unit || item.Unit || 't',\n          year: item.year || item.Year || props.selectedYear,\n          element: item.element || item.Element || props.selectedMetric\n        }))\n      } else if (typeof productionData === 'object') {\n        // Transform the object structure to array format\n        transformedData = Object.entries(productionData).map(([countryName, data]) => ({\n          country: countryName,\n          countryCode: getCountryCode(countryName),\n          value: data.value || data.Value || 0,\n          unit: data.unit || data.Unit || 't',\n          year: data.year || data.Year || props.selectedYear,\n          element: data.element || data.Element || props.selectedMetric\n        }))\n      }\n      \n      console.log('üó∫Ô∏è WorldMap: Transformed data:', transformedData)\n      productionDataStatic.value = transformedData\n      \n      // Update map if already initialized\n      updateMapWithProductionDataStatic()\n    }\n  } catch (err) {\n    console.warn('Failed to load production data:', err)\n    productionDataStatic.value = []\n  }\n}\n\n// Helper function to get country code - comprehensive mapping\nconst getCountryCode = (countryName) => {\n  const mapping = {\n    'China': 'CHN',\n    'China, mainland': 'CHN',\n    'United States': 'USA', \n    'United States of America': 'USA',\n    'Brazil': 'BRA',\n    'Argentina': 'ARG',\n    'Ukraine': 'UKR',\n    'India': 'IND',\n    'Mexico': 'MEX',\n    'Indonesia': 'IDN',\n    'France': 'FRA',\n    'Romania': 'ROU',\n    'Germany': 'DEU',\n    'Turkey': 'TUR',\n    'Russian Federation': 'RUS',\n    'Russia': 'RUS',\n    'Philippines': 'PHL',\n    'Nigeria': 'NGA',\n    'Iran': 'IRN',\n    'Iran (Islamic Republic of)': 'IRN',\n    'Pakistan': 'PAK',\n    'Italy': 'ITA',\n    'Canada': 'CAN',\n    'Thailand': 'THA',\n    'South Africa': 'ZAF',\n    'Egypt': 'EGY',\n    'Morocco': 'MAR',\n    'Kenya': 'KEN',\n    'Ethiopia': 'ETH',\n    'Ghana': 'GHA',\n    'Tanzania': 'TZA',\n    'Uganda': 'UGA',\n    'Madagascar': 'MDG',\n    'Mozambique': 'MOZ',\n    'Cameroon': 'CMR',\n    'Mali': 'MLI',\n    'Burkina Faso': 'BFA',\n    'Niger': 'NER',\n    'Senegal': 'SEN',\n    'Guinea': 'GIN',\n    'Benin': 'BEN',\n    'Burundi': 'BDI',\n    'Rwanda': 'RWA',\n    'Chad': 'TCD',\n    'Central African Republic': 'CAF',\n    'Democratic Republic of the Congo': 'COD',\n    'Congo': 'COG',\n    'Gabon': 'GAB',\n    'Equatorial Guinea': 'GNQ',\n    'Sao Tome and Principe': 'STP',\n    'Cape Verde': 'CPV',\n    'Gambia': 'GMB',\n    'Guinea-Bissau': 'GNB',\n    'Liberia': 'LBR',\n    'Sierra Leone': 'SLE',\n    'C√¥te d\\'Ivoire': 'CIV',\n    'Togo': 'TGO',\n    'Comoros': 'COM',\n    'Mauritius': 'MUS',\n    'Seychelles': 'SYC',\n    'Djibouti': 'DJI',\n    'Eritrea': 'ERI',\n    'Somalia': 'SOM',\n    'Sudan': 'SDN',\n    'South Sudan': 'SSD',\n    'Libya': 'LBY',\n    'Tunisia': 'TUN',\n    'Algeria': 'DZA',\n    'Spain': 'ESP',\n    'Portugal': 'PRT',\n    'United Kingdom': 'GBR',\n    'Ireland': 'IRL',\n    'Netherlands': 'NLD',\n    'Belgium': 'BEL',\n    'Luxembourg': 'LUX',\n    'Switzerland': 'CHE',\n    'Austria': 'AUT',\n    'Poland': 'POL',\n    'Czech Republic': 'CZE',\n    'Slovakia': 'SVK',\n    'Hungary': 'HUN',\n    'Slovenia': 'SVN',\n    'Croatia': 'HRV',\n    'Bosnia and Herzegovina': 'BIH',\n    'Serbia': 'SRB',\n    'Montenegro': 'MNE',\n    'North Macedonia': 'MKD',\n    'Albania': 'ALB',\n    'Greece': 'GRC',\n    'Bulgaria': 'BGR',\n    'Moldova': 'MDA',\n    'Belarus': 'BLR',\n    'Lithuania': 'LTU',\n    'Latvia': 'LVA',\n    'Estonia': 'EST',\n    'Finland': 'FIN',\n    'Sweden': 'SWE',\n    'Norway': 'NOR',\n    'Denmark': 'DNK',\n    'Iceland': 'ISL',\n    'Japan': 'JPN',\n    'South Korea': 'KOR',\n    'North Korea': 'PRK',\n    'Mongolia': 'MNG',\n    'Kazakhstan': 'KAZ',\n    'Kyrgyzstan': 'KGZ',\n    'Tajikistan': 'TJK',\n    'Turkmenistan': 'TKM',\n    'Uzbekistan': 'UZB',\n    'Afghanistan': 'AFG',\n    'Bangladesh': 'BGD',\n    'Bhutan': 'BTN',\n    'Nepal': 'NPL',\n    'Sri Lanka': 'LKA',\n    'Maldives': 'MDV',\n    'Myanmar': 'MMR',\n    'Laos': 'LAO',\n    'Vietnam': 'VNM',\n    'Cambodia': 'KHM',\n    'Malaysia': 'MYS',\n    'Singapore': 'SGP',\n    'Brunei': 'BRN',\n    'East Timor': 'TLS',\n    'Papua New Guinea': 'PNG',\n    'Australia': 'AUS',\n    'New Zealand': 'NZL',\n    'Fiji': 'FJI',\n    'Solomon Islands': 'SLB',\n    'Vanuatu': 'VUT',\n    'New Caledonia': 'NCL',\n    'French Polynesia': 'PYF',\n    'Samoa': 'WSM',\n    'Tonga': 'TON',\n    'Kiribati': 'KIR',\n    'Tuvalu': 'TUV',\n    'Nauru': 'NRU',\n    'Palau': 'PLW',\n    'Marshall Islands': 'MHL',\n    'Micronesia': 'FSM',\n    'Czechia': 'CZE',\n    'T√ºrkiye': 'TUR',\n    'Turkey': 'TUR',\n    'Viet Nam': 'VNM',\n    'United Kingdom of Great Britain and Northern Ireland': 'GBR',\n    'Bolivia (Plurinational State of)': 'BOL',\n    'Venezuela (Bolivarian Republic of)': 'VEN',\n    'Iran (Islamic Republic of)': 'IRN',\n    'Korea, Republic of': 'KOR',\n    'Democratic People\\'s Republic of Korea': 'PRK',\n    'Lao People\\'s Democratic Republic': 'LAO',\n    'Timor-Leste': 'TLS',\n    'C√¥te d\\'Ivoire': 'CIV',\n    'United Republic of Tanzania': 'TZA',\n    'Syrian Arab Republic': 'SYR'\n  }\n  return mapping[countryName] || countryName.substring(0, 3).toUpperCase()\n}\n\n// Enhanced country name mapping for better matching\nconst normalizeCountryName = (name) => {\n  if (!name) return ''\n  \n  const nameMapping = {\n    'United States': 'United States of America',\n    'USA': 'United States of America', \n    'US': 'United States of America',\n    'UK': 'United Kingdom',\n    'Britain': 'United Kingdom',\n    'South Korea': 'Republic of Korea',\n    'North Korea': 'Democratic People\\'s Republic of Korea',\n    'Russia': 'Russian Federation',\n    'Iran': 'Iran (Islamic Republic of)',\n    'Syria': 'Syrian Arab Republic',\n    'Venezuela': 'Venezuela (Bolivarian Republic of)',\n    'Bolivia': 'Bolivia (Plurinational State of)',\n    'Tanzania': 'United Republic of Tanzania',\n    'Congo': 'Republic of the Congo',\n    'Democratic Republic of the Congo': 'Democratic Republic of the Congo',\n    'DRC': 'Democratic Republic of the Congo',\n    'Czech Republic': 'Czechia',\n    'Macedonia': 'North Macedonia',\n    'Burma': 'Myanmar',\n    'East Timor': 'Timor-Leste',\n    'Cape Verde': 'Cabo Verde',\n    'Ivory Coast': 'C√¥te d\\'Ivoire',\n    'Swaziland': 'Eswatini'\n  }\n  \n  return nameMapping[name] || name\n}\n\n// Direct production data update (working approach)\nconst updateMapWithProductionDataDirect = (container) => {\n  const processedData = getProcessedProductionData()\n  if (!processedData.length) return\n  \n  console.log('üé® WorldMap: Updating production data directly...')\n  applyProductionDataDirect(container, processedData)\n  \n  // Create/update legend after data is applied\n  const svg = d3.select(svgContainerRef.value).select('svg')\n  if (!svg.empty() && legendScale.value) {\n    createLegend(svg)\n  }\n}\n\n// Static version for non-reactive updates\nconst updateMapWithProductionDataStatic = () => {\n  console.log('üé® WorldMap: updateMapWithProductionDataStatic called')\n  const containerElement = svgContainerRef.value\n  if (!containerElement) {\n    console.warn('üé® WorldMap: No container element available')\n    return\n  }\n  \n  const container = d3.select(containerElement).select('.map-container')\n  if (!container.empty()) {\n    console.log('üé® WorldMap: Found map container, updating...')\n    updateMapWithProductionDataDirect(container)\n  } else {\n    console.warn('üé® WorldMap: Map container not found')\n  }\n}\n\n// Apply production data directly\nconst applyProductionDataDirect = (container, data) => {\n  if (!data || !Array.isArray(data)) return\n\n  console.log('üìä WorldMap: Applying production data:', data.length, 'entries')\n  console.log('üìä WorldMap: Sample data:', data.slice(0, 5))\n  \n  // Debug: Show the actual values we're working with\n  const debugValues = data.filter(d => d.value > 0).map(d => ({ \n    country: d.country, \n    value: d.value,\n    unit: d.unit \n  }))\n  console.log('üîç WorldMap: Top 5 values:', debugValues.sort((a, b) => b.value - a.value).slice(0, 5))\n  \n  // Check for aggregate regions that might skew the data\n  const aggregateRegions = ['World', 'Europe', 'Asia', 'Africa', 'Americas', 'Oceania', 'European Union']\n  const suspiciousEntries = data.filter(d => \n    aggregateRegions.some(region => d.country.toLowerCase().includes(region.toLowerCase()))\n  )\n  if (suspiciousEntries.length > 0) {\n    console.warn('‚ö†Ô∏è WorldMap: Found aggregate regions in data:', suspiciousEntries)\n  }\n\n  // Create data lookup\n  const dataByCountry = new Map()\n  const dataByCountryCode = new Map()\n  const dataByNormalizedName = new Map()\n  \n  data.forEach(d => {\n    if (d.value > 0) {\n      dataByCountry.set(d.country.toLowerCase(), d.value)\n      if (d.countryCode) {\n        dataByCountryCode.set(d.countryCode, d.value)\n      }\n      // Also store by normalized name\n      const normalized = normalizeCountryName(d.country).toLowerCase()\n      dataByNormalizedName.set(normalized, d.value)\n    }\n  })\n  \n  console.log('üó∫Ô∏è WorldMap: Data maps created - Countries:', dataByCountry.size, 'Codes:', dataByCountryCode.size)\n  \n  // Extract unit from data (use first valid entry)\n  const unitFromData = data.find(d => d.unit)?.unit || '1000 t'\n  legendUnit.value = unitFromData\n\n  // Create adaptive color scale based on data distribution\n  // Filter out aggregate regions to get accurate country-level min/max\n  const countryData = data.filter(d => \n    d.value > 0 && \n    !aggregateRegions.some(region => d.country.toLowerCase().includes(region.toLowerCase()))\n  )\n  const values = countryData.map(d => d.value)\n  if (values.length > 0) {\n    // Sort values for analysis\n    const sortedValues = values.sort((a, b) => a - b)\n    const minValue = sortedValues[0]\n    const maxValue = sortedValues[sortedValues.length - 1]\n    \n    console.log('üé® WorldMap: Value range:', minValue, 'to', maxValue)\n    console.log('üé® WorldMap: All values:', sortedValues)\n    \n    // Analyze data distribution for optimal scale selection\n    const range = maxValue - minValue\n    const median = d3.median(sortedValues)\n    const q1 = d3.quantile(sortedValues, 0.25)\n    const q3 = d3.quantile(sortedValues, 0.75)\n    const iqr = q3 - q1\n    \n    // Detect skewness - highly skewed if max is much larger than median\n    const isHighlySkewed = (maxValue - median) > 3 * iqr\n    \n    console.log('üé® WorldMap: Data analysis:', {\n      count: values.length, range, median, q1, q3, iqr, isHighlySkewed\n    })\n    \n    // Always use all 20 colors with min at first color and max at last color\n    console.log('üé® WorldMap: Using all 20 colors with equal steps')\n    \n    // Calculate step size for 19 intervals (20 colors = 19 steps)\n    const stepSize = (maxValue - minValue) / (greenColorScheme.length - 1)\n    const valueRanges = []\n    const thresholds = []\n    \n    // Create value thresholds for each color transition\n    for (let i = 0; i < greenColorScheme.length - 1; i++) {\n      const threshold = minValue + (stepSize * (i + 1))\n      thresholds.push(threshold)\n    }\n    \n    // Create value ranges for logging\n    for (let i = 0; i < greenColorScheme.length; i++) {\n      const rangeStart = i === 0 ? minValue : thresholds[i - 1]\n      const rangeEnd = i === greenColorScheme.length - 1 ? maxValue : thresholds[i]\n      valueRanges.push({\n        min: rangeStart,\n        max: rangeEnd,\n        color: greenColorScheme[i]\n      })\n    }\n    \n    console.log('üé® WorldMap: Value ranges:', valueRanges)\n    console.log('üé® WorldMap: Thresholds between colors:', thresholds)\n    \n    // Create a custom scale function that maps values to colors\n    colorScale = (value) => {\n      // Edge cases\n      if (value <= minValue) return greenColorScheme[0]\n      if (value >= maxValue) return greenColorScheme[greenColorScheme.length - 1]\n      \n      // Find which color index the value maps to\n      // Using (length - 1) because we have 19 intervals for 20 colors\n      const normalizedPosition = (value - minValue) / (maxValue - minValue)\n      const colorIndex = Math.floor(normalizedPosition * (greenColorScheme.length - 1))\n      \n      // Ensure we don't exceed array bounds\n      const clampedIndex = Math.min(colorIndex, greenColorScheme.length - 1)\n      return greenColorScheme[clampedIndex]\n    }\n    \n    // Store thresholds for legend\n    colorScale.thresholds = () => thresholds\n    colorScale.range = () => greenColorScheme\n    colorScale.domain = () => [minValue, maxValue]\n    \n    legendDomain.value = [minValue, maxValue]\n    \n    console.log('üé® WorldMap: Adaptive color scale created with domain:', legendDomain.value)\n    \n    // Test the scale with a few sample values for verification\n    if (colorScale.quantiles) {\n      console.log('üé® WorldMap: Quantile thresholds:', colorScale.quantiles())\n    }\n    const testValues = [minValue, median, maxValue]\n    console.log('üé® WorldMap: Test colors:', testValues.map(v => ({ value: v, color: colorScale(v) })))\n    \n    // Update legend scale\n    legendScale.value = colorScale\n  }\n\n  // Update country colors\n  container.selectAll('.country')\n    .transition()\n    .duration(750)\n    .attr('fill', (d) => {\n      // Try multiple properties for country identification\n      const countryName = (d.properties.name || d.properties.NAME || d.properties.admin || '').toLowerCase()\n      const countryCode = d.properties.iso_a3 || d.properties.ISO_A3 || d.properties.adm0_a3 || d.properties.ADM0_A3\n      const normalizedName = normalizeCountryName(d.properties.name || d.properties.NAME || '').toLowerCase()\n      \n      // Try to find value by different keys\n      let value = null\n      if (countryCode && dataByCountryCode.has(countryCode)) {\n        value = dataByCountryCode.get(countryCode)\n      } else if (dataByNormalizedName.has(normalizedName)) {\n        value = dataByNormalizedName.get(normalizedName)\n      } else if (dataByCountry.has(countryName)) {\n        value = dataByCountry.get(countryName)\n      }\n      \n      if (value && colorScale) {\n        const color = colorScale(value)\n        // Log first few countries to debug\n        if (container.selectAll('.country').nodes().indexOf(d) < 5) {\n          console.log(`üé® Country: ${countryName}, Code: ${countryCode}, Value: ${value}, Color: ${color}`)\n        }\n        return color\n      }\n      // Return theme-appropriate default color for countries without data\n      const isDarkMode = document.documentElement.classList.contains('dark')\n      return isDarkMode ? '#374151' : '#e5e7eb' // gray-700 : gray-200\n    })\n    .attr('opacity', (d) => {\n      const countryName = (d.properties.name || d.properties.NAME || d.properties.admin || '').toLowerCase()\n      const countryCode = d.properties.iso_a3 || d.properties.ISO_A3 || d.properties.adm0_a3 || d.properties.ADM0_A3\n      const normalizedName = normalizeCountryName(d.properties.name || d.properties.NAME || '').toLowerCase()\n      \n      const hasData = (countryCode && dataByCountryCode.has(countryCode)) || \n                      dataByNormalizedName.has(normalizedName) ||\n                      dataByCountry.has(countryName)\n      return hasData ? 1 : 0.6\n    })\n}\n\n// Update map with production data (keeping original for compatibility)\nconst updateMapWithProductionData = () => {\n  const processedData = getProcessedProductionData()\n  if (!processedData.length) return\n\n  // Use direct approach instead of queueing\n  const container = d3.select(svgContainerRef.value).select('.map-container')\n  if (!container.empty()) {\n    updateMapWithProductionDataDirect(container)\n  }\n}\n\n// Legacy function removed - using applyProductionDataDirect with adaptive color scaling instead\n\n// Event handlers\nconst handleCountryClick = (event, d) => {\n  event.stopPropagation()\n  event.preventDefault()\n  \n  const countryName = d.properties.name\n  const countryCode = d.properties.iso_a3\n  \n  console.log('üñ±Ô∏è WorldMap: Country clicked:', { countryName, countryCode })\n  \n  // Guard: Check if this is a valid, intentional user click\n  if (!countryName || !countryCode) {\n    console.warn('üö´ WorldMap: Invalid country data, ignoring click')\n    return\n  }\n  \n  // Guard: Prevent rapid duplicate clicks (debounce)\n  const now = Date.now()\n  if (lastClickTime && now - lastClickTime < 300) {\n    console.log('üö´ WorldMap: Click too soon after previous, ignoring')\n    return\n  }\n  lastClickTime = now\n  \n  // Only set selected country if it's different from current\n  if (uiStore.selectedCountry !== countryName) {\n    console.log('üéØ WorldMap: Setting selected country:', countryName)\n    uiStore.setSelectedCountry(countryName)\n    emit('countryClick', countryCode)\n  } else {\n    console.log('üîÑ WorldMap: Country already selected, just zooming')\n  }\n  \n  // Zoom to country\n  zoomToCountry(d)\n}\n\nconst handleCountryMouseover = (event, d) => {\n  const countryName = d.properties.name || d.properties.NAME || d.properties.admin\n  const countryCode = d.properties.iso_a3 || d.properties.adm0_a3\n  const normalizedName = normalizeCountryName(countryName || '')\n  \n  // Add visual hover effect\n  d3.select(event.currentTarget)\n    .transition()\n    .duration(100)\n    .attr('stroke', '#3b82f6')\n    .attr('stroke-width', 2)\n    .style('filter', 'brightness(1.1)')\n  \n  // Find country data by code, normalized name, or original name\n  const processedData = getProcessedProductionData()\n  const countryData = processedData.find(\n    item => item.countryCode === countryCode || \n             item.country.toLowerCase() === countryName?.toLowerCase() ||\n             item.country.toLowerCase() === normalizedName?.toLowerCase()\n  )\n  \n  // Format tooltip content with proper unit handling\n  let unit = countryData?.unit || '1000 t'\n  if (props.selectedMetric === 'food_supply_kcal') {\n    unit = 'kcal/capita/day'\n  }\n  \n  const tooltipFormatter = createD3TooltipFormatter(unit)\n  let content = `<strong>${countryName}</strong><br/>`\n  if (countryData && countryData.value > 0) {\n    const formattedValue = tooltipFormatter(countryData.value)\n    const productName = props.selectedProduct?.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()) || 'Produkt'\n    const metricLabel = props.selectedMetric === 'production' ? 'Produktion' :\n                       props.selectedMetric === 'import_quantity' ? 'Import' :\n                       props.selectedMetric === 'export_quantity' ? 'Export' :\n                       props.selectedMetric === 'domestic_supply_quantity' ? 'Inlandsversorgung' :\n                       props.selectedMetric === 'feed' ? 'Tierfutter' :\n                       props.selectedMetric === 'food_supply_kcal' ? 'Kalorienversorgung' :\n                       'Inlandsversorgung'\n    content += `<span style=\"color: #fbbf24\">${productName}</span><br/>`\n    content += `${metricLabel}: <strong>${formattedValue}</strong><br/>`\n    content += `<span style=\"color: #9ca3af; font-size: 12px\">Jahr: ${props.selectedYear}</span>`\n  } else {\n    content += '<span style=\"color: #ef4444\">Keine Daten verf√ºgbar</span>'\n  }\n  \n  // Show tooltip\n  tooltip.show(event, d, () => content)\n  \n  emit('countryHover', countryCode)\n}\n\nconst handleCountryMouseout = (event, d) => {\n  // Get theme-appropriate stroke color\n  const isDarkMode = document.documentElement.classList.contains('dark')\n  const defaultStroke = isDarkMode ? '#4B5563' : '#ffffff' // gray-600 : white\n  \n  // Remove visual hover effect\n  d3.select(event.currentTarget)\n    .transition()\n    .duration(100)\n    .attr('stroke', defaultStroke)\n    .attr('stroke-width', 0.5)\n    .style('filter', 'none')\n  \n  tooltip.hide()\n  emit('countryHover', null)\n}\n\n// Zoom to specific country\nconst zoomToCountry = (countryData) => {\n  if (!path || !zoom) return\n\n  const svg = d3.select(svgContainerRef.value).select('svg')\n  if (svg.empty()) return\n\n  const bounds = path.bounds(countryData)\n  const dx = bounds[1][0] - bounds[0][0]\n  const dy = bounds[1][1] - bounds[0][1]\n  const x = (bounds[0][0] + bounds[1][0]) / 2\n  const y = (bounds[0][1] + bounds[1][1]) / 2\n  \n  // Get current SVG dimensions\n  const svgNode = svg.node()\n  const width = svgNode ? svgNode.clientWidth : props.width\n  const height = svgNode ? svgNode.clientHeight : props.height\n  \n  const scale = Math.min(8, 0.9 / Math.max(dx / width, dy / height))\n  const translate = [width / 2 - scale * x, height / 2 - scale * y]\n\n  svg.transition()\n    .duration(750)\n    .call(zoom.transform, d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale))\n}\n\n// Reset zoom\nconst resetZoom = () => {\n  const svg = d3.select(svgContainerRef.value).select('svg')\n  if (!svg.empty() && zoom) {\n    svg.transition()\n      .duration(750)\n      .call(zoom.transform, d3.zoomIdentity)\n  }\n}\n\n// Theme observer for dynamic styling updates\nconst updateThemeStyles = () => {\n  const container = d3.select(svgContainerRef.value)\n  if (container.empty()) return\n  \n  const isDarkMode = document.documentElement.classList.contains('dark')\n  const defaultFill = isDarkMode ? '#374151' : '#e5e7eb' // gray-700 : gray-200\n  const defaultStroke = isDarkMode ? '#4B5563' : '#ffffff' // gray-600 : white\n  \n  // Update country styling\n  container.selectAll('.country')\n    .each(function(d) {\n      const element = d3.select(this)\n      const currentFill = element.attr('fill')\n      \n      // Only update if it's the default color (not a data-driven color)\n      if (currentFill === '#e5e7eb' || currentFill === '#374151') {\n        element.attr('fill', defaultFill)\n      }\n      element.attr('stroke', defaultStroke)\n    })\n}\n\nconst themeObserver = new MutationObserver((mutations) => {\n  mutations.forEach((mutation) => {\n    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n      updateThemeStyles()\n    }\n  })\n})\n\n// Resize handler (simplified)\nconst handleResize = () => {\n  // Could implement resize logic here if needed\n  console.log('üîÑ WorldMap: Resize triggered')\n}\n\n// Watchers\nwatch([() => props.selectedProduct, () => props.selectedYear, () => props.selectedMetric], async () => {\n  console.log('üîÑ WorldMap WATCHER: Product/Year/Metric changed')\n  console.log('üîÑ WorldMap WATCHER: Current values:', {\n    product: props.selectedProduct,\n    year: props.selectedYear,\n    metric: props.selectedMetric,\n    isInitialized: isInitialized.value\n  })\n  \n  // Only reload if map is already initialized\n  if (isInitialized.value) {\n    console.log('üîÑ WorldMap WATCHER: Map is initialized, loading data...')\n    await loadProductionData()\n  } else {\n    console.log('üîÑ WorldMap WATCHER: Map not initialized yet, skipping...')\n  }\n}, { immediate: true })\n\n// Removed watcher - using static updates instead\n\n// Removed - no longer needed\n\n// Removed - no longer needed\n\n// Initialize on mount with better timing\nonMounted(async () => {\n  console.log('üîß WorldMap: onMounted called')\n  \n  // Wait for DOM to be fully ready\n  await nextTick()\n  \n  // Add a small delay to ensure parent containers are sized\n  setTimeout(async () => {\n    // Use requestAnimationFrame to ensure DOM is stable\n    requestAnimationFrame(async () => {\n      try {\n        console.log('‚è∞ WorldMap: RequestAnimationFrame fired, attempting initialization...')\n        console.log('üìè WorldMap: Initial container check:', {\n          containerRef: !!containerRef.value,\n          svgContainerRef: !!svgContainerRef.value,\n          containerSize: containerRef.value?.getBoundingClientRect(),\n          svgContainerSize: svgContainerRef.value?.getBoundingClientRect()\n        })\n        await initializeMap()\n        \n        // Start observing theme changes\n        if (document.documentElement) {\n          themeObserver.observe(document.documentElement, {\n            attributes: true,\n            attributeFilter: ['class']\n          })\n        }\n        \n        console.log('‚úÖ WorldMap: onMounted initialization complete')\n      } catch (error) {\n        console.error('‚ùå WorldMap: Error in onMounted initialization:', error)\n        isInitialized.value = false\n      }\n    })\n  }, 100) // 100ms delay to ensure parent layout is complete\n})\n\n// Cleanup on unmount\nonUnmounted(() => {\n  if (tooltip && tooltip.destroy) {\n    tooltip.destroy()\n  }\n  themeObserver.disconnect()\n  vizStore.setMapInstance(null)\n})\n\n// Exposed methods\ndefineExpose({\n  resetZoom,\n  loadProductionData,\n  zoomToCountry\n})\n</script>\n\n<template>\n  <div \n    ref=\"containerRef\"\n    class=\"chart-container relative w-full h-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\"\n    style=\"min-height: 600px; width: 100%; height: 100%;\"\n  >\n    <!-- Loading overlay -->\n    <LoadingSpinner\n      v-if=\"isLoading\"\n      :overlay=\"true\"\n      :centered=\"true\"\n      text=\"L√§dt Karte...\"\n      size=\"md\"\n    />\n\n    <!-- Error message -->\n    <div\n      v-if=\"error\"\n      class=\"absolute inset-0 bg-error-50 dark:bg-error-900/20 flex items-center justify-center z-10\"\n    >\n      <div class=\"text-center\">\n        <p class=\"text-error-600 dark:text-error-400 mb-3\">{{ error }}</p>\n        <BaseButton\n          variant=\"danger\"\n          size=\"sm\"\n          @click=\"initializeMap\"\n        >\n          Erneut versuchen\n        </BaseButton>\n      </div>\n    </div>\n\n    <!-- Map controls -->\n    <div class=\"absolute top-4 right-4 z-20 flex flex-col space-y-2\">\n      <BaseButton\n        variant=\"secondary\"\n        size=\"sm\"\n        :icon=\"true\"\n        class=\"!p-2\"\n        title=\"Zoom zur√ºcksetzen\"\n        @click=\"resetZoom\"\n      >\n        <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n        </svg>\n      </BaseButton>\n    </div>\n\n    <!-- Map SVG Container with explicit sizing -->\n    <!-- Remove v-once from container to ensure ref works properly -->\n    <div \n      ref=\"svgContainerRef\"\n      class=\"map-svg-container\" \n      style=\"width: 100%; height: 100%; min-height: 600px; position: relative;\"\n    >\n      <!-- Debug message -->\n      <div v-if=\"!isInitialized && !isLoading && !error\" class=\"absolute inset-0 flex items-center justify-center text-gray-500\">\n        <p>Karte wird initialisiert...</p>\n      </div>\n    </div>\n\n    <!-- Legend is rendered inside the SVG via D3 -->\n  </div>\n</template>\n\n<style scoped>\n.chart-container {\n  width: 100%;\n  height: 100%;\n  min-height: 600px;\n  position: relative;\n}\n\n.map-svg-container {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.world-map-svg {\n  width: 100% !important;\n  height: 100% !important;\n  display: block;\n}\n\n.country {\n  transition: fill 0.3s ease, opacity 0.3s ease, stroke 0.1s ease, stroke-width 0.1s ease;\n}\n\n/* Ensure proper rendering within parent containers */\n:deep(.map-container) {\n  width: 100%;\n  height: 100%;\n}\n\n/* Global tooltip styles (unscoped) */\n:global(.worldmap-tooltip) {\n  max-width: 300px;\n  line-height: 1.4;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n:global(.worldmap-tooltip strong) {\n  font-weight: 600;\n  color: #fbbf24;\n}\n</style>","// Color palette for multiple series in charts\nexport const COLOR_PALETTE = [\n  '#059669', // emerald-600\n  '#dc2626', // red-600\n  '#2563eb', // blue-600\n  '#f59e0b', // amber-500\n  '#8b5cf6', // violet-500\n  '#ec4899', // pink-500\n  '#14b8a6', // teal-500\n  '#f97316', // orange-500\n  '#6366f1', // indigo-500\n  '#84cc16', // lime-500\n  '#06b6d4', // cyan-500\n  '#a855f7', // purple-500\n]\n\n// Extended color palette for more combinations\nexport const EXTENDED_COLOR_PALETTE = [\n  ...COLOR_PALETTE,\n  '#047857', // emerald-700\n  '#b91c1c', // red-700\n  '#1e40af', // blue-700\n  '#d97706', // amber-600\n  '#7c3aed', // violet-600\n  '#db2777', // pink-600\n  '#0d9488', // teal-600\n  '#ea580c', // orange-600\n  '#4f46e5', // indigo-600\n  '#65a30d', // lime-600\n  '#0891b2', // cyan-600\n  '#9333ea', // purple-600\n]\n\n// Create a color scale function that assigns consistent colors to series\nexport function createColorScale() {\n  const colorMap = new Map()\n  let colorIndex = 0\n  \n  return function(seriesKey) {\n    if (!colorMap.has(seriesKey)) {\n      colorMap.set(seriesKey, EXTENDED_COLOR_PALETTE[colorIndex % EXTENDED_COLOR_PALETTE.length])\n      colorIndex++\n    }\n    return colorMap.get(seriesKey)\n  }\n}\n\n// Get contrasting text color for a background color\nexport function getContrastingTextColor(bgColor) {\n  // Convert hex to RGB\n  const hex = bgColor.replace('#', '')\n  const r = parseInt(hex.substr(0, 2), 16)\n  const g = parseInt(hex.substr(2, 2), 16)\n  const b = parseInt(hex.substr(4, 2), 16)\n  \n  // Calculate luminance\n  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255\n  \n  // Return white for dark colors, black for light colors\n  return luminance > 0.5 ? '#000000' : '#ffffff'\n}\n\n// Generate a color based on a string (for consistent colors)\nexport function stringToColor(str) {\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n  }\n  \n  const index = Math.abs(hash) % EXTENDED_COLOR_PALETTE.length\n  return EXTENDED_COLOR_PALETTE[index]\n}","<script setup lang=\"ts\">\nimport { ref, computed, watch, onMounted, onUnmounted } from 'vue'\nimport { useDataStore } from '@/stores/useDataStore'\nimport BaseButton from '@/components/ui/BaseButton.vue'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner.vue'\nimport * as d3 from 'd3'\nimport { createD3AxisFormatter, createD3TooltipFormatter } from '@/utils/formatters'\nimport { createColorScale } from '@/utils/chartColors'\n\ninterface Props {\n  width?: number\n  height?: number\n  selectedCountries?: string[]\n  selectedProducts?: string[]\n  selectedMetric?: string\n  chartData?: any[]\n  showGrid?: boolean\n  showPoints?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  width: 600,\n  height: 400,\n  selectedCountries: () => [],\n  selectedProducts: () => [],\n  selectedMetric: 'production',\n  chartData: () => [],\n  showGrid: true,\n  showPoints: true\n})\n\nconst emit = defineEmits<{\n  pointHover: [data: any | null]\n  pointClick: [data: any]\n}>()\n\n// Store\nconst dataStore = useDataStore()\n\n// Refs\nconst svgContainerRef = ref<HTMLDivElement>()\n\n// State\nconst isLoading = ref(false)\nconst error = ref<string | null>(null)\nconst localChartData = ref<any[]>([])\nconst colorScale = ref(createColorScale())\n\n// Chart configuration\nconst margin = { top: 20, right: 120, bottom: 40, left: 60 }\n\n// D3 variables\nlet svg: d3.Selection<SVGSVGElement, unknown, null, undefined>\nlet g: d3.Selection<SVGGElement, unknown, null, undefined>\nlet xScale: d3.ScaleTime<number, number>\nlet yScale: d3.ScaleLinear<number, number>\nlet line: d3.Line<any>\nlet tooltip: d3.Selection<HTMLDivElement, unknown, HTMLElement, any>\nlet resizeObserver: ResizeObserver\n\n// Initialize chart\nconst initializeChart = () => {\n  if (!svgContainerRef.value) return\n  \n  console.log('üìà TimeseriesChart: Initializing chart...')\n  \n  // Clear existing chart\n  d3.select(svgContainerRef.value).selectAll('*').remove()\n  \n  // Get full parent dimensions\n  const containerRect = svgContainerRef.value.getBoundingClientRect()\n  const width = containerRect.width || 600\n  const height = containerRect.height || 400\n  const innerWidth = width - margin.left - margin.right\n  const innerHeight = height - margin.top - margin.bottom\n  \n  console.log('üìà TimeseriesChart: Chart dimensions:', { width, height, innerWidth, innerHeight })\n\n  // Create SVG with responsive sizing\n  svg = d3.select(svgContainerRef.value)\n    .append('svg')\n    .attr('width', '100%')\n    .attr('height', '100%')\n    .attr('viewBox', `0 0 ${width} ${height}`)\n    .attr('preserveAspectRatio', 'xMidYMid meet')\n    .attr('class', 'timeseries-chart')\n\n  // Create main group\n  g = svg.append('g')\n    .attr('transform', `translate(${margin.left},${margin.top})`)\n\n  // Setup scales\n  xScale = d3.scaleTime().range([0, innerWidth])\n  yScale = d3.scaleLinear().range([innerHeight, 0])\n\n  // Setup line generator\n  line = d3.line<any>()\n    .x(d => xScale(new Date(d.year, 0, 1)))\n    .y(d => yScale(d.value))\n    .curve(d3.curveMonotoneX)\n\n  // Add axes groups\n  g.append('g')\n    .attr('class', 'x-axis')\n    .attr('transform', `translate(0,${innerHeight})`)\n\n  g.append('g')\n    .attr('class', 'y-axis')\n\n  // Add grid if enabled\n  if (props.showGrid) {\n    g.append('g')\n      .attr('class', 'grid x-grid')\n      .attr('transform', `translate(0,${innerHeight})`)\n\n    g.append('g')\n      .attr('class', 'grid y-grid')\n  }\n\n  // Add axis labels\n  const isDarkMode = document.documentElement.classList.contains('dark')\n  const labelColor = isDarkMode ? '#9CA3AF' : '#374151' // gray-400 : gray-700\n\n  g.append('text')\n    .attr('class', 'x-label')\n    .attr('text-anchor', 'middle')\n    .attr('x', innerWidth / 2)\n    .attr('y', innerHeight + 35)\n    .text('Jahr')\n    .style('font-size', '12px')\n    .style('fill', labelColor)\n\n  g.append('text')\n    .attr('class', 'y-label')\n    .attr('text-anchor', 'middle')\n    .attr('transform', 'rotate(-90)')\n    .attr('x', -innerHeight / 2)\n    .attr('y', -40)\n    .text(getMetricLabel())\n    .style('font-size', '12px')\n    .style('fill', labelColor)\n\n  // Create tooltip with green theme\n  tooltip = d3.select('body')\n    .append('div')\n    .attr('class', 'timeseries-tooltip')\n    .style('position', 'absolute')\n    .style('padding', '8px 12px')\n    .style('background', 'rgba(6, 78, 59, 0.95)') // emerald-800 with opacity\n    .style('color', 'white')\n    .style('border', '1px solid #10b981') // emerald-500\n    .style('border-radius', '6px')\n    .style('font-size', '12px')\n    .style('font-weight', '500')\n    .style('pointer-events', 'none')\n    .style('opacity', 0)\n    .style('z-index', 1000)\n    .style('box-shadow', '0 4px 6px -1px rgba(0, 0, 0, 0.1)')\n\n  // Setup resize observer\n  setupResizeObserver()\n  \n  console.log('‚úÖ TimeseriesChart: Chart initialized')\n}\n\n// Setup resize observer for responsive behavior\nconst setupResizeObserver = () => {\n  if (!svgContainerRef.value || !window.ResizeObserver) return\n  \n  resizeObserver = new ResizeObserver(() => {\n    if (chartData.value.length > 0) {\n      updateChart()\n    }\n  })\n  \n  resizeObserver.observe(svgContainerRef.value)\n}\n\n// Get metric label for Y-axis\nconst getMetricLabel = () => {\n  switch (props.selectedMetric) {\n    case 'production': return 'Produktion (Mio. t)'\n    case 'import_quantity': return 'Import (Mio. t)'\n    case 'export_quantity': return 'Export (Mio. t)'\n    case 'domestic_supply_quantity': return 'Inlandsversorgung (Mio. t)'\n    default: return 'Wert (Mio. t)'\n  }\n}\n\n// Load and prepare data\nconst loadData = () => {\n  // Use the chartData passed from parent\n  localChartData.value = props.chartData || []\n  \n  // Reset color scale when new data is loaded\n  colorScale.value = createColorScale()\n  \n  if (localChartData.value.length > 0) {\n    console.log(`üìà TimeseriesChart: Loaded ${localChartData.value.length} data points`)\n    updateChart()\n  }\n}\n\n// Update chart with current data\nconst updateChart = () => {\n  if (!g || !localChartData.value.length) return\n  \n  console.log('üìà TimeseriesChart: Updating chart with', localChartData.value.length, 'data points')\n  \n  const data = localChartData.value.filter(d => d.value > 0).sort((a, b) => a.year - b.year)\n  if (!data.length) return\n\n  // Get current dimensions from container\n  const containerRect = svgContainerRef.value?.getBoundingClientRect()\n  const width = containerRect?.width || 600\n  const height = containerRect?.height || 400\n  const innerWidth = width - margin.left - margin.right\n  const innerHeight = height - margin.top - margin.bottom\n\n  // Update viewBox for responsive scaling\n  svg.attr('viewBox', `0 0 ${width} ${height}`)\n\n  // Group data by series\n  const seriesData = d3.group(data, d => d.series)\n  \n  // Update scale domains\n  const years = data.map(d => new Date(d.year, 0, 1))\n  const values = data.map(d => d.value)\n\n  xScale.domain(d3.extent(years) as [Date, Date])\n  yScale.domain([0, d3.max(values) as number])\n\n  // Get theme colors\n  const isDarkMode = document.documentElement.classList.contains('dark')\n  const axisColor = isDarkMode ? '#9CA3AF' : '#374151' // gray-400 : gray-700\n  const gridColor = isDarkMode ? '#4B5563' : '#E5E7EB' // gray-600 : gray-200\n\n  // Update axes\n  const xAxis = d3.axisBottom(xScale)\n    .tickFormat(d3.timeFormat('%Y'))\n    .tickSizeOuter(0)\n  const yAxis = d3.axisLeft(yScale)\n    .tickFormat(createD3AxisFormatter('1000 t'))\n    .tickSizeOuter(0)\n\n  const xAxisSelection = g.select('.x-axis')\n    .transition()\n    .duration(750)\n    .call(xAxis)\n\n  const yAxisSelection = g.select('.y-axis')\n    .transition()\n    .duration(750)\n    .call(yAxis)\n\n  // Style axes\n  xAxisSelection.selectAll('path').style('stroke', axisColor).style('stroke-width', '1px')\n  xAxisSelection.selectAll('line').style('stroke', axisColor).style('stroke-width', '1px')\n  xAxisSelection.selectAll('text').style('fill', axisColor).style('font-size', '12px')\n\n  yAxisSelection.selectAll('path').style('stroke', axisColor).style('stroke-width', '1px')\n  yAxisSelection.selectAll('line').style('stroke', axisColor).style('stroke-width', '1px')\n  yAxisSelection.selectAll('text').style('fill', axisColor).style('font-size', '12px')\n\n  // Update grid\n  if (props.showGrid) {\n    const xGridSelection = g.select('.x-grid')\n      .transition()\n      .duration(750)\n      .call(d3.axisBottom(xScale)\n        .tickSize(-innerHeight)\n        .tickFormat(() => '')\n        .tickSizeOuter(0)\n      )\n\n    const yGridSelection = g.select('.y-grid')\n      .transition()\n      .duration(750)\n      .call(d3.axisLeft(yScale)\n        .tickSize(-innerWidth)\n        .tickFormat(() => '')\n        .tickSizeOuter(0)\n      )\n\n    // Style grid lines\n    xGridSelection.selectAll('path').style('stroke', 'none')\n    xGridSelection.selectAll('line').style('stroke', gridColor).style('stroke-width', '1px').style('opacity', 0.5)\n\n    yGridSelection.selectAll('path').style('stroke', 'none')\n    yGridSelection.selectAll('line').style('stroke', gridColor).style('stroke-width', '1px').style('opacity', 0.5)\n  }\n\n  // Remove existing lines\n  g.selectAll('.line-path').remove()\n  g.selectAll('.series-group').remove()\n\n  // Create a group for each series\n  const seriesGroups = g.selectAll('.series-group')\n    .data(Array.from(seriesData.entries()), d => d[0])\n    .enter()\n    .append('g')\n    .attr('class', 'series-group')\n\n  // Draw lines for each series\n  seriesGroups.each(function([seriesKey, seriesValues]) {\n    const sortedValues = seriesValues.sort((a, b) => a.year - b.year)\n    const color = colorScale.value(seriesKey)\n    \n    d3.select(this)\n      .append('path')\n      .attr('class', 'line-path')\n      .attr('fill', 'none')\n      .attr('stroke', color)\n      .attr('stroke-width', 2.5)\n      .attr('stroke-linejoin', 'round')\n      .attr('stroke-linecap', 'round')\n      .attr('opacity', 0)\n      .attr('d', line(sortedValues))\n      .transition()\n      .duration(750)\n      .attr('opacity', 1)\n  })\n\n  // Draw points if enabled\n  if (props.showPoints) {\n    // Remove existing points\n    g.selectAll('.data-point').remove()\n    \n    // Add points for each data point\n    data.forEach(d => {\n      const color = colorScale.value(d.series)\n      \n      g.append('circle')\n        .attr('class', 'data-point')\n        .attr('r', 0)\n        .attr('fill', color)\n        .attr('stroke', 'white')\n        .attr('stroke-width', 2)\n        .style('cursor', 'pointer')\n        .attr('cx', xScale(new Date(d.year, 0, 1)))\n        .attr('cy', yScale(d.value))\n        .datum(d)\n        .on('mouseover', handlePointMouseover)\n        .on('mouseout', handlePointMouseout)\n        .on('click', handlePointClick)\n        .transition()\n        .duration(750)\n        .attr('r', 4)\n    })\n  }\n\n  // Update Y-axis label\n  g.select('.y-label')\n    .text(getMetricLabel())\n    .style('fill', axisColor)\n\n  // Update X-axis label\n  g.select('.x-label')\n    .style('fill', axisColor)\n    \n  // Add legend\n  g.selectAll('.legend').remove()\n  \n  const legendGroup = g.append('g')\n    .attr('class', 'legend')\n    .attr('transform', `translate(${innerWidth + 10}, 20)`)\n  \n  const legendItems = Array.from(seriesData.keys()).sort()\n  const legendItemHeight = 20\n  \n  legendItems.forEach((series, i) => {\n    const legendItem = legendGroup.append('g')\n      .attr('transform', `translate(0, ${i * legendItemHeight})`)\n    \n    // Color box\n    legendItem.append('rect')\n      .attr('width', 12)\n      .attr('height', 12)\n      .attr('fill', colorScale.value(series))\n      .attr('rx', 2)\n    \n    // Label\n    legendItem.append('text')\n      .attr('x', 18)\n      .attr('y', 9)\n      .text(series)\n      .style('font-size', '11px')\n      .style('fill', axisColor)\n      .style('alignment-baseline', 'middle')\n  })\n}\n\n// Event handlers\nconst handlePointMouseover = (event: MouseEvent, d: any) => {\n  const color = colorScale.value(d.series)\n  \n  // Highlight the hovered point\n  d3.select(event.target as Element)\n    .transition()\n    .duration(150)\n    .attr('r', 6)\n    .attr('stroke-width', 3)\n\n  tooltip\n    .style('opacity', 1)\n    .style('background', color)\n    .style('border-color', color)\n    .html(`\n      <strong>${d.series}</strong><br/>\n      Jahr: ${d.year}<br/>\n      ${getMetricLabel().replace('(Mio. t)', '')}: ${createD3TooltipFormatter('1000 t')(d.value)}\n    `)\n    .style('left', (event.pageX + 10) + 'px')\n    .style('top', (event.pageY - 10) + 'px')\n  \n  emit('pointHover', d)\n}\n\nconst handlePointMouseout = (event: MouseEvent) => {\n  // Reset point to normal size\n  d3.select(event.target as Element)\n    .transition()\n    .duration(150)\n    .attr('r', 4)\n    .attr('stroke-width', 2)\n\n  tooltip.style('opacity', 0)\n  emit('pointHover', null)\n}\n\nconst handlePointClick = (event: MouseEvent, d: any) => {\n  emit('pointClick', d)\n}\n\n// Cleanup function\nconst cleanup = () => {\n  if (resizeObserver) {\n    resizeObserver.disconnect()\n  }\n  if (tooltip) {\n    tooltip.remove()\n  }\n  if (svgContainerRef.value) {\n    d3.select(svgContainerRef.value).selectAll('*').remove()\n  }\n}\n\n// Update styling based on theme\nconst updateThemeStyles = () => {\n  if (!g) return\n  \n  const isDarkMode = document.documentElement.classList.contains('dark')\n  const axisColor = isDarkMode ? '#9CA3AF' : '#374151' // gray-400 : gray-700\n  const gridColor = isDarkMode ? '#4B5563' : '#E5E7EB' // gray-600 : gray-200\n  \n  // Update axis styling\n  g.select('.x-axis').selectAll('path').style('stroke', axisColor)\n  g.select('.x-axis').selectAll('line').style('stroke', axisColor)\n  g.select('.x-axis').selectAll('text').style('fill', axisColor)\n  \n  g.select('.y-axis').selectAll('path').style('stroke', axisColor)\n  g.select('.y-axis').selectAll('line').style('stroke', axisColor)\n  g.select('.y-axis').selectAll('text').style('fill', axisColor)\n  \n  // Update grid styling\n  g.select('.x-grid').selectAll('line').style('stroke', gridColor)\n  g.select('.y-grid').selectAll('line').style('stroke', gridColor)\n  \n  // Update labels\n  g.select('.x-label').style('fill', axisColor)\n  g.select('.y-label').style('fill', axisColor)\n}\n\n// Watch for theme changes\nconst observer = new MutationObserver((mutations) => {\n  mutations.forEach((mutation) => {\n    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n      updateThemeStyles()\n    }\n  })\n})\n\n// Watchers\nwatch(() => props.chartData, () => {\n  loadData()\n}, { deep: true })\n\n// Lifecycle\nonMounted(() => {\n  initializeChart()\n  loadData()\n  \n  // Start observing theme changes\n  if (document.documentElement) {\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['class']\n    })\n  }\n})\n\nonUnmounted(() => {\n  cleanup()\n  observer.disconnect()\n})\n\n// Exposed methods\ndefineExpose({\n  loadData,\n  updateChart\n})\n</script>\n\n<template>\n  <div class=\"timeseries-chart-wrapper relative w-full h-full flex flex-col\">\n    <!-- Loading overlay -->\n    <LoadingSpinner\n      v-if=\"isLoading\"\n      :overlay=\"true\"\n      :centered=\"true\"\n      text=\"L√§dt Zeitreihen...\"\n      size=\"md\"\n    />\n\n    <!-- Error message -->\n    <div\n      v-if=\"error\"\n      class=\"absolute inset-0 bg-error-50 dark:bg-error-900/20 flex items-center justify-center z-10\"\n    >\n      <div class=\"text-center\">\n        <p class=\"text-error-600 dark:text-error-400 mb-3\">{{ error }}</p>\n        <BaseButton\n          variant=\"danger\"\n          size=\"sm\"\n          @click=\"loadData\"\n        >\n          Erneut versuchen\n        </BaseButton>\n      </div>\n    </div>\n\n    <!-- Chart title (optional, compact) -->\n    <div v-if=\"localChartData.length > 0\" class=\"px-4 py-2 border-b border-gray-200 dark:border-gray-700 flex-shrink-0\">\n      <h4 class=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n        {{ getMetricLabel() }}\n      </h4>\n    </div>\n\n    <!-- Chart SVG Container - takes all remaining space -->\n    <div \n      ref=\"svgContainerRef\"\n      class=\"timeseries-svg-container flex-1 w-full min-h-0\"\n    />\n\n    <!-- No data message -->\n    <div\n      v-if=\"!isLoading && !error && localChartData.length === 0\"\n      class=\"absolute inset-0 flex items-center justify-center text-gray-500 dark:text-gray-400\"\n    >\n      <div class=\"text-center\">\n        <svg class=\"w-12 h-12 mx-auto mb-4 opacity-50\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n        <p>Keine Zeitreihen-Daten verf√ºgbar</p>\n        <p class=\"text-xs mt-1\">W√§hlen Sie Produkte und L√§nder aus</p>\n      </div>\n    </div>\n  </div>\n</template>","<script setup lang=\"ts\">\nimport { ref, computed, watch, nextTick, onMounted, onUnmounted } from 'vue'\nimport { useVisualizationStore } from '@/stores/useVisualizationStore'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner.vue'\nimport * as d3 from 'd3'\nimport { createD3AxisFormatter } from '@/utils/formatters'\n\ninterface Props {\n  data?: any[]\n  config?: any\n  width?: number\n  height?: number\n  selectedScenario?: string\n  simulationRuns?: number\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  data: () => [],\n  config: () => ({}),\n  width: 800,\n  height: 500,\n  selectedScenario: 'climate_change',\n  simulationRuns: 100\n})\n\nconst emit = defineEmits<{\n  'scenario-select': [scenario: string]\n  runSimulation: []\n}>()\n\n// Stores\nconst vizStore = useVisualizationStore()\n\n// Refs\nconst containerRef = ref<HTMLDivElement>()\nconst svgRef = ref<SVGElement | null>(null)\n\n// State\nconst isLoading = ref(false)\nconst error = ref<string | null>(null)\n\n// Chart dimensions\nconst margin = computed(() => ({\n  top: 20,\n  right: 30,\n  bottom: 40,\n  left: 60\n}))\n\nconst dimensions = computed(() => {\n  const container = containerRef.value\n  if (!container) return { width: 800, height: 400 }\n  \n  const rect = container.getBoundingClientRect()\n  return {\n    width: Math.max(400, rect.width || 800),\n    height: 400\n  }\n})\n\n// Chart configuration\nconst chartConfig = computed(() => ({\n  baselineColor: '#6b7280',\n  scenarioColor: '#ef4444'\n}))\n\n\n// Initialize chart\nconst initializeChart = async () => {\n  await nextTick()\n  \n  try {\n    isLoading.value = true\n    error.value = null\n    \n    await setupChart()\n\n  } catch (err) {\n    error.value = 'Fehler beim Initialisieren der Simulation'\n    console.error('Simulation initialization error:', err)\n  } finally {\n    isLoading.value = false\n  }\n}\n\n// Setup chart with D3.js\nconst setupChart = async () => {\n  if (!containerRef.value) return\n  \n  const chartData = props.data || []\n  const { width, height } = dimensions.value\n  const m = margin.value\n  \n  // Clear previous content\n  d3.select(containerRef.value).selectAll('*').remove()\n  \n  // Create SVG\n  const svg = d3.select(containerRef.value)\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('class', 'simulation-svg')\n  \n  svgRef.value = svg.node()\n  \n  const g = svg.append('g')\n    .attr('transform', `translate(${m.left},${m.top})`)\n  \n  const innerWidth = width - m.left - m.right\n  const innerHeight = height - m.top - m.bottom\n\n  if (chartData.length === 0) {\n    // Show empty state\n    g.append('text')\n      .attr('class', 'empty-text')\n      .attr('x', innerWidth / 2)\n      .attr('y', innerHeight / 2)\n      .attr('text-anchor', 'middle')\n      .style('font-size', '14px')\n      .style('fill', 'currentColor')\n      .style('opacity', 0.6)\n      .text('Keine Simulationsdaten verf√ºgbar')\n    return\n  }\n\n  // Scales\n  const xScale = d3.scaleLinear()\n    .domain(d3.extent(chartData, d => d.year))\n    .range([0, innerWidth])\n\n  const allValues = chartData.reduce((acc, d) => {\n    if (d && typeof d === 'object') {\n      const values = [d.baseline, d.scenario, d.lower, d.upper].filter(v => v !== undefined && v !== null && !isNaN(v))\n      acc.push(...values)\n    }\n    return acc\n  }, [])\n  \n  const yScale = d3.scaleLinear()\n    .domain(d3.extent(allValues))\n    .nice()\n    .range([innerHeight, 0])\n\n  // Line generators with null value handling\n  const baselineLine = d3.line()\n    .x(d => xScale(d.year))\n    .y(d => yScale(d.baseline))\n    .defined(d => d.baseline !== null && d.baseline !== undefined && !isNaN(d.baseline))\n    .curve(d3.curveMonotoneX)\n\n  const scenarioLine = d3.line()\n    .x(d => xScale(d.year))\n    .y(d => yScale(d.scenario))\n    .defined(d => d.scenario !== null && d.scenario !== undefined && !isNaN(d.scenario))\n    .curve(d3.curveMonotoneX)\n\n  // Confidence interval area\n  const confidenceArea = d3.area()\n    .x(d => xScale(d.year))\n    .y0(d => yScale(d.lower))\n    .y1(d => yScale(d.upper))\n    .defined(d => d.lower !== null && d.lower !== undefined && d.upper !== null && d.upper !== undefined && !isNaN(d.lower) && !isNaN(d.upper))\n    .curve(d3.curveMonotoneX)\n\n  // Add axes\n  g.append('g')\n    .attr('class', 'x-axis')\n    .attr('transform', `translate(0, ${innerHeight})`)\n    .call(d3.axisBottom(xScale).tickFormat(d3.format('d')))\n    .selectAll('text')\n    .style('fill', 'currentColor')\n\n  g.append('g')\n    .attr('class', 'y-axis')\n    .call(d3.axisLeft(yScale).tickFormat(createD3AxisFormatter('1000 t')))\n    .selectAll('text')\n    .style('fill', 'currentColor')\n    \n  // Style axis lines\n  g.selectAll('.domain, .tick line')\n    .style('stroke', 'currentColor')\n    .style('opacity', 0.3)\n\n  // Add confidence interval\n  g.append('path')\n    .datum(chartData)\n    .attr('class', 'confidence-area')\n    .attr('d', confidenceArea)\n    .style('fill', chartConfig.value.scenarioColor)\n    .style('fill-opacity', 0.2)\n\n  // Add baseline line\n  g.append('path')\n    .datum(chartData)\n    .attr('class', 'baseline-line')\n    .attr('d', baselineLine)\n    .style('stroke', chartConfig.value.baselineColor)\n    .style('stroke-width', 2)\n    .style('fill', 'none')\n\n  // Add scenario line\n  g.append('path')\n    .datum(chartData)\n    .attr('class', 'scenario-line')\n    .attr('d', scenarioLine)\n    .style('stroke', chartConfig.value.scenarioColor)\n    .style('stroke-width', 2)\n    .style('fill', 'none')\n    .style('stroke-dasharray', '5,5')\n\n  // Add legend\n  const legend = g.append('g')\n    .attr('class', 'legend')\n    .attr('transform', `translate(${innerWidth - 120}, 20)`)\n\n  legend.append('line')\n    .attr('x1', 0)\n    .attr('x2', 20)\n    .attr('y1', 0)\n    .attr('y2', 0)\n    .style('stroke', chartConfig.value.baselineColor)\n    .style('stroke-width', 2)\n\n  legend.append('text')\n    .attr('x', 25)\n    .attr('y', 4)\n    .style('font-size', '12px')\n    .style('fill', 'currentColor')\n    .text('Baseline')\n\n  legend.append('line')\n    .attr('x1', 0)\n    .attr('x2', 20)\n    .attr('y1', 20)\n    .attr('y2', 20)\n    .style('stroke', chartConfig.value.scenarioColor)\n    .style('stroke-width', 2)\n    .style('stroke-dasharray', '5,5')\n\n  legend.append('text')\n    .attr('x', 25)\n    .attr('y', 24)\n    .style('font-size', '12px')\n    .style('fill', 'currentColor')\n    .text('Szenario')\n\n}\n\n\n// Initialize when mounted\nonMounted(() => {\n  initializeChart()\n})\n\n// Re-initialize when data changes\nwatch(() => props.data, () => {\n  initializeChart()\n}, { deep: true })\n\n// Cleanup on unmount\nonUnmounted(() => {\n  if (containerRef.value) {\n    d3.select(containerRef.value).selectAll('*').remove()\n  }\n})\n\n// No exposed methods needed - chart is purely reactive to props\n</script>\n\n<template>\n  <div \n    ref=\"containerRef\"\n    class=\"chart-container relative w-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\"\n  >\n    <!-- Loading overlay -->\n    <LoadingSpinner\n      v-if=\"isLoading\"\n      :overlay=\"true\"\n      :centered=\"true\"\n      text=\"L√§dt Simulation...\"\n      size=\"md\"\n    />\n\n    <!-- Error message -->\n    <div\n      v-if=\"error\"\n      class=\"absolute inset-0 bg-error-50 dark:bg-error-900/20 flex items-center justify-center z-10\"\n    >\n      <div class=\"text-center\">\n        <p class=\"text-error-600 dark:text-error-400 mb-3\">{{ error }}</p>\n        <BaseButton\n          variant=\"danger\"\n          size=\"sm\"\n          @click=\"initializeChart\"\n        >\n          Erneut versuchen\n        </BaseButton>\n      </div>\n    </div>\n\n    <!-- Chart Header -->\n    <div v-if=\"data && data.length > 0\" class=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n      <h3 class=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\n        Simulationsergebnisse\n      </h3>\n      <p class=\"text-sm text-gray-600 dark:text-gray-400\">\n        Zeitreihen-Analyse mit Konfidenzintervallen\n      </p>\n    </div>\n\n    <!-- Chart SVG Container -->\n    <div v-if=\"data && data.length > 0\" class=\"p-4 min-h-[400px]\" />\n\n    <!-- Placeholder content -->\n    <div v-if=\"!data || data.length === 0\" class=\"absolute inset-0 flex items-center justify-center text-gray-500 dark:text-gray-400 pointer-events-none\">\n      <div class=\"text-center\">\n        <svg class=\"w-12 h-12 mx-auto mb-4 opacity-50\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n        <p>Bereit f√ºr Simulation</p>\n        <p class=\"text-xs mt-1\">Starten Sie eine Simulation, um die Ergebnisse zu sehen</p>\n      </div>\n    </div>\n  </div>\n</template>","<script setup>\nimport { ref, computed, watch, onMounted, onUnmounted } from 'vue'\nimport * as d3 from 'd3'\nimport { useD3 } from '@/composables/useD3'\nimport { useUIStore } from '@/stores/useUIStore'\nimport { createD3AxisFormatter, createD3TooltipFormatter } from '@/utils/formatters'\n\nconst props = defineProps({\n  data: {\n    type: Array,\n    default: () => []\n  },\n  config: {\n    type: Object,\n    default: () => ({})\n  }\n})\n\nconst emit = defineEmits(['prediction-select', 'confidence-toggle'])\n\n// Stores\nconst uiStore = useUIStore()\n\n// D3 setup\nconst containerRef = ref(null)\nconst svgRef = ref(null)\nconst gRef = ref(null)\nlet resizeObserver = null\n\nconst { \n  dimensions,\n  isReady,\n  createSVG,\n  updateDimensions \n} = useD3(containerRef, {\n  margin: { top: 40, right: 150, bottom: 60, left: 80 }\n})\n\n// State\nconst showConfidenceInterval = ref(true)\n\n// Dark mode detection using UIStore\nconst isDarkMode = computed(() => uiStore.isDarkMode)\n\n// Utility function to correct unrealistic confidence intervals\n// Polynomial regression can produce extremely wide confidence intervals for long-term forecasts\n// This function applies reasonable bounds to prevent misleading visualizations\nconst correctConfidenceInterval = (prediction) => {\n  const predicted = prediction.predicted_value\n  let lower = prediction.confidence_lower\n  let upper = prediction.confidence_upper\n  const originalLower = lower\n  const originalUpper = upper\n  \n  // Validate confidence bounds are reasonable\n  const maxReasonableRange = predicted * 3 // Max 300% of predicted value\n  const minLower = Math.max(0, predicted * 0.1) // At least 10% of predicted value\n  \n  // Fix unrealistic confidence bounds\n  if (upper - lower > maxReasonableRange) {\n    const halfRange = maxReasonableRange / 2\n    lower = Math.max(minLower, predicted - halfRange)\n    upper = predicted + halfRange\n  }\n  \n  // Ensure lower bound is not 0 unless predicted value is very small\n  if (lower === 0 && predicted > 100000) {\n    lower = Math.max(minLower, predicted * 0.2)\n  }\n  \n  // Cap upper bound to prevent extreme funnel shapes\n  const maxUpper = predicted * 2.5\n  if (upper > maxUpper) {\n    upper = maxUpper\n  }\n  \n  // Log when significant corrections are made\n  if (Math.abs(originalLower - lower) > predicted * 0.1 || Math.abs(originalUpper - upper) > predicted * 0.1) {\n    console.warn(`üìä MLChart: Confidence interval corrected for year ${prediction.year}:`, {\n      original: `${originalLower?.toFixed(0)} - ${originalUpper?.toFixed(0)}`,\n      corrected: `${lower?.toFixed(0)} - ${upper?.toFixed(0)}`,\n      prediction: predicted?.toFixed(0)\n    })\n  }\n  \n  return {\n    ...prediction,\n    confidence_lower: lower,\n    confidence_upper: upper\n  }\n}\n\n// Chart dimensions\nconst chartDimensions = computed(() => {\n  // Use container width if config width is '100%' or not specified\n  let width = 800\n  if (props.config?.width === '100%') {\n    width = containerRef.value?.clientWidth || 800\n  } else if (props.config?.width) {\n    width = props.config.width\n  }\n  \n  const height = props.config?.height || 400\n  const margin = { top: 40, right: 150, bottom: 60, left: 80 }\n  \n  return {\n    width,\n    height,\n    innerWidth: width - margin.left - margin.right,\n    innerHeight: height - margin.top - margin.bottom,\n    margin\n  }\n})\n\n// Process data\nconst processedData = computed(() => {\n  if (!props.data || props.data.length === 0) return { predictions: [], historical: [] }\n  \n  // Separate historical and prediction data using the type field if available\n  const predictions = props.data.filter(d => {\n    // Use type field if available, otherwise fallback to year-based logic\n    if (d.type) {\n      return d.type === 'prediction' && (d.predicted_value > 0 || d.value > 0)\n    } else {\n      // Fallback: year >= 2023 is prediction\n      return d.year >= 2023 && (d.predicted_value > 0 || d.value > 0)\n    }\n  })\n  \n  const historical = props.data.filter(d => {\n    // Use type field if available, otherwise fallback to year-based logic\n    if (d.type) {\n      return d.type === 'historical' && (d.value > 0 || d.predicted_value > 0)\n    } else {\n      // Fallback: year < 2023 is historical\n      return d.year < 2023 && (d.value > 0 || d.predicted_value > 0)\n    }\n  })\n  \n  console.log('üìä MLChart data processed:', {\n    total: props.data.length,\n    historical: historical.length,\n    predictions: predictions.length,\n    historicalYears: historical.map(d => d.year).slice(0, 5),\n    predictionYears: predictions.map(d => d.year).slice(0, 5),\n    sampleTypes: props.data.slice(0, 3).map(d => ({ year: d.year, type: d.type }))\n  })\n  \n  return { predictions, historical }\n})\n\n// Initialize chart\nconst initChart = () => {\n  if (!isReady.value || !containerRef.value) return\n  \n  const { width, height, margin } = chartDimensions.value\n  \n  // Clear any existing SVG\n  d3.select(containerRef.value).selectAll('svg').remove()\n  \n  // Create new SVG\n  const result = createSVG({\n    width,\n    height,\n    className: 'ml-chart-svg',\n    margin\n  })\n  \n  if (result) {\n    svgRef.value = result.svg\n    gRef.value = result.g\n    drawChart()\n  }\n}\n\n// Draw chart\nconst drawChart = () => {\n  if (!gRef.value || !props.data || props.data.length === 0) return\n  \n  const { innerWidth, innerHeight } = chartDimensions.value\n  const { predictions, historical } = processedData.value\n  \n  // Clear previous content\n  gRef.value.selectAll('*').remove()\n  \n  // Scales\n  const allYears = [...historical, ...predictions].map(d => d.year)\n  \n  // Get corrected confidence intervals for scale calculation\n  const correctedPredictions = predictions\n    .filter(d => \n      d.confidence_lower != null && d.confidence_upper != null &&\n      d.predicted_value != null && d.predicted_value > 0\n    )\n    .map(correctConfidenceInterval)\n  \n  const allValues = [\n    ...historical.map(d => d.predicted_value || d.value).filter(v => v != null && v > 0),\n    ...predictions.map(d => d.predicted_value).filter(v => v != null && v > 0),\n    ...correctedPredictions.map(d => d.confidence_lower).filter(v => v != null && v > 0),\n    ...correctedPredictions.map(d => d.confidence_upper).filter(v => v != null && v > 0)\n  ]\n  \n  if (allYears.length === 0 || allValues.length === 0) return\n  \n  const xScale = d3.scaleLinear()\n    .domain(d3.extent(allYears))\n    .range([0, innerWidth])\n  \n  const yScale = d3.scaleLinear()\n    .domain([0, d3.max(allValues) * 1.1])\n    .range([innerHeight, 0])\n  \n  // Line generators\n  const line = d3.line()\n    .x(d => xScale(d.year))\n    .y(d => yScale(d.predicted_value || d.value || 0))\n    .curve(d3.curveMonotoneX)\n  \n  // Area generator for confidence interval\n  const area = d3.area()\n    .x(d => xScale(d.year))\n    .y0(d => yScale(d.confidence_lower || d.predicted_value || d.value || 0))\n    .y1(d => yScale(d.confidence_upper || d.predicted_value || d.value || 0))\n    .curve(d3.curveMonotoneX)\n  \n  // Add axes\n  const xAxis = gRef.value.append('g')\n    .attr('transform', `translate(0,${innerHeight})`)\n    .call(d3.axisBottom(xScale).tickFormat(d3.format('d')))\n  \n  const yAxis = gRef.value.append('g')\n    .call(d3.axisLeft(yScale).tickFormat(createD3AxisFormatter('1000 t')))\n  \n  // Add axis labels\n  xAxis.append('text')\n    .attr('x', innerWidth / 2)\n    .attr('y', 40)\n    .style('text-anchor', 'middle')\n    .style('fill', 'currentColor')\n    .attr('class', 'axis-label')\n    .text('Jahr')\n  \n  yAxis.append('text')\n    .attr('transform', 'rotate(-90)')\n    .attr('y', -60)\n    .attr('x', -innerHeight / 2)\n    .style('text-anchor', 'middle')\n    .style('fill', 'currentColor')\n    .attr('class', 'axis-label')\n    .text('Produktion (Mio. t)')\n  \n  // Add grid lines\n  gRef.value.append('g')\n    .attr('class', 'grid')\n    .attr('transform', `translate(0,${innerHeight})`)\n    .call(d3.axisBottom(xScale)\n      .tickSize(-innerHeight)\n      .tickFormat('')\n    )\n    .style('stroke-dasharray', '3,3')\n    .style('opacity', 0.3)\n  \n  gRef.value.append('g')\n    .attr('class', 'grid')\n    .call(d3.axisLeft(yScale)\n      .tickSize(-innerWidth)\n      .tickFormat('')\n    )\n    .style('stroke-dasharray', '3,3')\n    .style('opacity', 0.3)\n  \n  // Draw confidence interval\n  if (showConfidenceInterval.value && predictions.length > 0) {\n    // Process confidence intervals with validation and smoothing\n    const predictionsWithConfidence = predictions\n      .filter(d => \n        d.confidence_lower != null && d.confidence_upper != null &&\n        d.confidence_upper > d.confidence_lower &&\n        d.predicted_value != null && d.predicted_value > 0\n      )\n      .map(correctConfidenceInterval)\n    \n    if (predictionsWithConfidence.length > 0) {\n      gRef.value.append('path')\n        .datum(predictionsWithConfidence)\n        .attr('fill', '#60a5fa')\n        .attr('fill-opacity', 0.2)\n        .attr('d', area)\n    }\n  }\n  \n  // Draw historical line if exists\n  if (historical.length > 0) {\n    gRef.value.append('path')\n      .datum(historical)\n      .attr('fill', 'none')\n      .attr('stroke', '#10b981')\n      .attr('stroke-width', 2)\n      .attr('d', line)\n    \n    // Add dots for historical data\n    gRef.value.selectAll('.hist-dot')\n      .data(historical)\n      .enter().append('circle')\n      .attr('class', 'hist-dot')\n      .attr('cx', d => xScale(d.year))\n      .attr('cy', d => yScale(d.predicted_value || d.value))\n      .attr('r', 4)\n      .attr('fill', '#10b981')\n  }\n  \n  // Draw prediction line\n  if (predictions.length > 0) {\n    // Connect from last historical point\n    const lastHistorical = historical[historical.length - 1]\n    const connectionData = lastHistorical \n      ? [{ ...lastHistorical, predicted_value: lastHistorical.value }, ...predictions]\n      : predictions\n    \n    gRef.value.append('path')\n      .datum(connectionData)\n      .attr('fill', 'none')\n      .attr('stroke', '#3b82f6')\n      .attr('stroke-width', 2)\n      .attr('stroke-dasharray', '5,5')\n      .attr('d', line)\n    \n    // Add dots for predictions\n    gRef.value.selectAll('.pred-dot')\n      .data(predictions)\n      .enter().append('circle')\n      .attr('class', 'pred-dot')\n      .attr('cx', d => xScale(d.year))\n      .attr('cy', d => yScale(d.predicted_value || d.value))\n      .attr('r', 4)\n      .attr('fill', '#3b82f6')\n      .style('cursor', 'pointer')\n      .on('click', (event, d) => {\n        emit('prediction-select', d)\n      })\n      .on('mouseenter', function(event, d) {\n        d3.select(this).attr('r', 6)\n        \n        // Show tooltip with dark mode support\n        const darkMode = isDarkMode.value\n        \n        const tooltip = d3.select('body').append('div')\n          .attr('class', 'ml-chart-tooltip')\n          .style('position', 'absolute')\n          .style('background', darkMode ? 'rgba(31, 41, 55, 0.95)' : 'rgba(255, 255, 255, 0.95)')\n          .style('color', darkMode ? '#f9fafb' : '#111827')\n          .style('padding', '10px 12px')\n          .style('border-radius', '8px')\n          .style('font-size', '12px')\n          .style('font-weight', '500')\n          .style('line-height', '1.5')\n          .style('box-shadow', darkMode ? '0 10px 25px rgba(0, 0, 0, 0.5)' : '0 10px 25px rgba(0, 0, 0, 0.15)')\n          .style('border', darkMode ? '1px solid rgba(75, 85, 99, 0.3)' : '1px solid rgba(209, 213, 219, 0.3)')\n          .style('backdrop-filter', 'blur(10px)')\n          .style('pointer-events', 'none')\n          .style('z-index', '1000')\n          .style('opacity', 0)\n        \n        // Apply confidence interval corrections for tooltip\n        const corrected = correctConfidenceInterval(d)\n        \n        const tooltipFormatter = createD3TooltipFormatter('1000 t')\n        tooltip.html(`\n          <strong>Jahr ${d.year}</strong><br/>\n          Prognose: ${tooltipFormatter(corrected.predicted_value)}<br/>\n          Konfidenz: ${tooltipFormatter(corrected.confidence_lower)} - ${tooltipFormatter(corrected.confidence_upper)}<br/>\n          Unsicherheit: ${d.uncertainty_percent?.toFixed(1) || 'N/A'}%\n        `)\n        .style('left', (event.pageX + 10) + 'px')\n        .style('top', (event.pageY - 10) + 'px')\n        .transition()\n        .duration(200)\n        .style('opacity', 1)\n      })\n      .on('mouseleave', function() {\n        d3.select(this).attr('r', 4)\n        d3.selectAll('.ml-chart-tooltip').remove()\n      })\n  }\n  \n  // Add legend\n  const legend = gRef.value.append('g')\n    .attr('transform', `translate(${innerWidth - 120}, 20)`)\n  \n  // Add legend background for better visibility in dark mode\n  legend.append('rect')\n    .attr('x', -10)\n    .attr('y', -10)\n    .attr('width', 140)\n    .attr('height', 70)\n    .attr('rx', 4)\n    .attr('class', 'legend-background')\n  \n  const legendItems = [\n    { label: 'Historisch', color: '#10b981', dash: false },\n    { label: 'Prognose', color: '#3b82f6', dash: true },\n    { label: 'Konfidenzintervall', color: '#60a5fa', dash: false, area: true }\n  ]\n  \n  legendItems.forEach((item, i) => {\n    const legendRow = legend.append('g')\n      .attr('transform', `translate(0, ${i * 20})`)\n    \n    if (item.area) {\n      legendRow.append('rect')\n        .attr('width', 15)\n        .attr('height', 10)\n        .attr('class', 'legend-area-indicator')\n        .attr('fill', item.color)\n        .attr('fill-opacity', 0.2)\n    } else {\n      legendRow.append('line')\n        .attr('x1', 0)\n        .attr('x2', 15)\n        .attr('y1', 5)\n        .attr('y2', 5)\n        .attr('class', `legend-line ${item.dash ? 'legend-line-dashed' : 'legend-line-solid'}`)\n        .attr('stroke', item.color)\n        .attr('stroke-width', 2)\n        .attr('stroke-dasharray', item.dash ? '5,5' : null)\n    }\n    \n    legendRow.append('text')\n      .attr('x', 20)\n      .attr('y', 5)\n      .attr('dy', '0.35em')\n      .attr('class', 'legend-text')\n      .text(item.label)\n  })\n  \n  // Add confidence toggle button\n  const toggleButton = gRef.value.append('g')\n    .attr('transform', `translate(20, 20)`)\n    .style('cursor', 'pointer')\n    .on('click', () => {\n      showConfidenceInterval.value = !showConfidenceInterval.value\n      emit('confidence-toggle', showConfidenceInterval.value)\n      drawChart()\n    })\n  \n  toggleButton.append('rect')\n    .attr('width', 140)\n    .attr('height', 25)\n    .attr('rx', 4)\n    .attr('class', `confidence-toggle ${showConfidenceInterval.value ? 'confidence-toggle-active' : 'confidence-toggle-inactive'}`)\n  \n  toggleButton.append('text')\n    .attr('x', 70)\n    .attr('y', 12.5)\n    .attr('text-anchor', 'middle')\n    .attr('dy', '0.35em')\n    .attr('class', `confidence-toggle-text ${showConfidenceInterval.value ? 'confidence-toggle-text-active' : 'confidence-toggle-text-inactive'}`)\n    .text('Konfidenzintervall')\n}\n\n// Watch for ready state\nwatch(isReady, (ready) => {\n  if (ready) {\n    initChart()\n  }\n})\n\n// Watch for data changes\nwatch(() => props.data, () => {\n  if (isReady.value) {\n    drawChart()\n  }\n}, { deep: true })\n\n// Watch for config changes\nwatch(() => props.config, () => {\n  if (isReady.value) {\n    initChart()\n  }\n}, { deep: true })\n\n// Watch for dark mode changes and redraw chart for better styling\nwatch(() => uiStore.isDarkMode, () => {\n  if (isReady.value) {\n    drawChart()\n  }\n})\n\n// Initialize on mount\nonMounted(() => {\n  if (isReady.value) {\n    initChart()\n  }\n  \n  // Setup resize observer for responsive chart\n  if (containerRef.value && ResizeObserver) {\n    resizeObserver = new ResizeObserver((entries) => {\n      // Debounce resize events\n      setTimeout(() => {\n        if (isReady.value) {\n          initChart()\n        }\n      }, 100)\n    })\n    \n    resizeObserver.observe(containerRef.value)\n  }\n})\n\n// Cleanup on unmount\nonUnmounted(() => {\n  if (resizeObserver) {\n    resizeObserver.disconnect()\n    resizeObserver = null\n  }\n})\n</script>\n\n<template>\n  <div \n    ref=\"containerRef\" \n    class=\"ml-chart w-full\"\n    :style=\"{ height: chartDimensions.height + 'px' }\"\n  />\n</template>\n\n<style scoped>\n.ml-chart {\n  @apply bg-white dark:bg-gray-800 rounded-lg shadow-sm dark:shadow-gray-900/20;\n}\n\n/* Tooltip has inline styles for better compatibility */\n\n/* Ensure text is visible in dark mode */\n:deep(.ml-chart-svg text) {\n  @apply fill-gray-700 dark:fill-gray-300;\n}\n\n:deep(.ml-chart-svg .axis-label) {\n  @apply fill-gray-600 dark:fill-gray-400;\n}\n\n:deep(.ml-chart-svg .legend-text) {\n  @apply fill-gray-700 dark:fill-gray-300;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n/* Legend background styling */\n:deep(.ml-chart-svg .legend-background) {\n  @apply fill-white dark:fill-gray-800 stroke-gray-200 dark:stroke-gray-600;\n  fill-opacity: 0.95;\n  stroke-width: 1;\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));\n}\n\n/* Legend line indicators */\n:deep(.ml-chart-svg .legend-line) {\n  /* Keep original stroke colors from JavaScript */\n}\n\n:deep(.ml-chart-svg .legend-line-solid) {\n  stroke-dasharray: none;\n}\n\n:deep(.ml-chart-svg .legend-line-dashed) {\n  stroke-dasharray: 5,5;\n}\n\n/* Legend area indicator */\n:deep(.ml-chart-svg .legend-area-indicator) {\n  /* Keep original fill color from JavaScript */\n  /* fill-opacity is set in JavaScript */\n}\n\n/* Confidence toggle button styling */\n:deep(.ml-chart-svg .confidence-toggle-active) {\n  @apply fill-blue-500 dark:fill-blue-400;\n}\n\n:deep(.ml-chart-svg .confidence-toggle-inactive) {\n  @apply fill-gray-200 dark:fill-gray-600 stroke-gray-300 dark:stroke-gray-500;\n  stroke-width: 1;\n  transition: all 0.2s ease;\n}\n\n:deep(.ml-chart-svg .confidence-toggle-active) {\n  transition: all 0.2s ease;\n}\n\n/* Hover effects for toggle button */\n:deep(.ml-chart-svg g:hover .confidence-toggle-active) {\n  @apply fill-blue-600 dark:fill-blue-300;\n}\n\n:deep(.ml-chart-svg g:hover .confidence-toggle-inactive) {\n  @apply fill-gray-300 dark:fill-gray-500;\n}\n\n:deep(.ml-chart-svg .confidence-toggle-text-active) {\n  @apply fill-white dark:fill-gray-100;\n  font-size: 12px;\n}\n\n:deep(.ml-chart-svg .confidence-toggle-text-inactive) {\n  @apply fill-gray-700 dark:fill-gray-300;\n  font-size: 12px;\n}\n\n/* Grid lines in dark mode */\n:deep(.ml-chart-svg .grid) {\n  @apply stroke-gray-300 dark:stroke-gray-600;\n}\n\n:deep(.ml-chart-svg .grid line) {\n  @apply stroke-gray-300 dark:stroke-gray-600;\n}\n\n/* Axis lines in dark mode */\n:deep(.ml-chart-svg .domain) {\n  @apply stroke-gray-400 dark:stroke-gray-500;\n}\n\n/* Tick lines in dark mode */\n:deep(.ml-chart-svg .tick line) {\n  @apply stroke-gray-400 dark:stroke-gray-500;\n}\n</style>"],"names":["ref","class","style","width","height","_hoisted_3","_hoisted_4","_hoisted_5","position","props","__props","emit","__emit","dataStore","useDataStore","uiStore","useUIStore","vizStore","useVisualizationStore","containerRef","svgContainerRef","isLoading","error","geoDataStatic","shallowRef","productionDataStatic","isInitialized","lastClickTime","legendScale","legendDomain","legendUnit","tooltipDiv","tooltip","element","init","d3.select","append","attr","show","event","data","formatter","content","mouseX","pageX","clientX","mouseY","pageY","clientY","html","hide","destroy","remove","getProcessedProductionData","Array","isArray","value","filter","d","projection","path","colorScale","zoom","greenColorScheme","mapConfig","computed","colorScheme","getVisualizationConfig","initializeMap","async","loadedGeoData","loadGeoData","createMapDirect","err","requestAnimationFrame","features","containerElement","container","existingSvg","select","empty","containerRect","getBoundingClientRect","mainRect","_a","parentElement","parentRect","width2","height2","svg","d3.geoNaturalEarth1","scale","translate","d3.geoPath","d3.zoom","scaleExtent","on","transform","call","g","drawCountriesDirect","selectedProduct","selectedYear","setSelectedProduct","nextTick","retries","timeseriesData","Promise","resolve","setTimeout","loadProductionData","updateMapWithProductionDataDirect","length","isDarkMode","document","documentElement","classList","contains","defaultFill","defaultStroke","countries","selectAll","properties","iso_a3","adm0_a3","name","exit","enterCountries","enter","handleCountryClick","handleCountryMouseover","handleCountryMouseout","merge","size","createLegend","legendWidth","legendMargin","svgNode","node","svgWidth","clientWidth","svgHeight","clientHeight","legend","gradientId","defs","gradient","legendStroke","legendScaleLinear","d3.scaleLinear","domain","range","forEach","color","i","startPos","endPos","tickValues","stepSize","push","legendAxis","d3.axisBottom","ticks","tickFormat","createD3AxisFormatter","legendTextColor","legendAxisGroup","text","metricLabel","production","import_quantity","export_quantity","domestic_supply","selectedMetric","unitLabel","productionData","getTimeseriesDataForProduct","Object","entries","map","country","unit","countryCode","getCountryCode","year","item","transformedData","Area","iso3","Value","Unit","Year","Element","countryName","updateMapWithProductionDataStatic","China","Brazil","Argentina","Ukraine","India","Mexico","Indonesia","France","Romania","Germany","Turkey","Russia","Philippines","Nigeria","Iran","Pakistan","Italy","Canada","Thailand","Egypt","Morocco","Kenya","Ethiopia","Ghana","Tanzania","Uganda","Madagascar","Mozambique","Cameroon","Mali","Niger","Senegal","Guinea","Benin","Burundi","Rwanda","Chad","Congo","Gabon","Gambia","Liberia","Togo","Comoros","Mauritius","Seychelles","Djibouti","Eritrea","Somalia","Sudan","Libya","Tunisia","Algeria","Spain","Portugal","Ireland","Netherlands","Belgium","Luxembourg","Switzerland","Austria","Poland","Slovakia","Hungary","Slovenia","Croatia","Serbia","Montenegro","Albania","Greece","Bulgaria","Moldova","Belarus","Lithuania","Latvia","Estonia","Finland","Sweden","Norway","Denmark","Iceland","Japan","Mongolia","Kazakhstan","Kyrgyzstan","Tajikistan","Turkmenistan","Uzbekistan","Afghanistan","Bangladesh","Bhutan","Nepal","Maldives","Myanmar","Laos","Vietnam","Cambodia","Malaysia","Singapore","Brunei","Australia","Fiji","Vanuatu","Samoa","Tonga","Kiribati","Tuvalu","Nauru","Palau","Micronesia","Czechia","substring","toUpperCase","normalizeCountryName","USA","US","UK","Britain","Syria","Venezuela","Bolivia","DRC","Macedonia","Burma","Swaziland","processedData","applyProductionDataDirect","aggregateRegions","some","region","toLowerCase","includes","dataByCountry","Map","dataByCountryCode","dataByNormalizedName","set","normalized","unitFromData","find","values","sortedValues","sort","a","b","minValue","maxValue","d3.median","d3.quantile","valueRanges","thresholds","threshold","rangeStart","rangeEnd","min","max","normalizedPosition","colorIndex","Math","floor","clampedIndex","quantiles","transition","duration","NAME","admin","ISO_A3","ADM0_A3","normalizedName","has","get","nodes","indexOf","stopPropagation","preventDefault","now","Date","selectedCountry","setSelectedCountry","zoomToCountry","currentTarget","countryData","tooltipFormatter","createD3TooltipFormatter","formattedValue","productName","replace","l","bounds","dx","dy","x","y","d3.zoomIdentity","resetZoom","updateThemeStyles","each","this","currentFill","themeObserver","MutationObserver","mutations","mutation","type","attributeName","watch","immediate","onMounted","observe","attributes","attributeFilter","onUnmounted","disconnect","setMapInstance","__expose","_openBlock","_createElementBlock","_hoisted_1","$setup","_createBlock","key","overlay","centered","_createCommentVNode","_hoisted_2","_createElementVNode","_toDisplayString","_createVNode","variant","onClick","_cache","_createTextVNode","icon","title","fill","stroke","viewBox","_hoisted_6","_hoisted_7","EXTENDED_COLOR_PALETTE","createColorScale","colorMap","seriesKey","localChartData","margin","top","right","bottom","left","xScale","yScale","line","resizeObserver","initializeChart","innerWidth","innerHeight","d3.scaleTime","d3.line","curve","d3.curveMonotoneX","showGrid","labelColor","getMetricLabel","setupResizeObserver","window","ResizeObserver","chartData","updateChart","loadData","seriesData","d3.group","series","years","d3.extent","d3.max","axisColor","gridColor","xAxis","d3.timeFormat","tickSizeOuter","yAxis","d3.axisLeft","xAxisSelection","yAxisSelection","xGridSelection","tickSize","yGridSelection","from","seriesValues","showPoints","datum","handlePointMouseover","handlePointMouseout","handlePointClick","legendGroup","legendItems","keys","legendItem","target","cleanup","observer","deep","_hoisted_8","svgRef","dimensions","rect","chartConfig","baselineColor","scenarioColor","setupChart","m","allValues","reduce","acc","baseline","scenario","lower","upper","v","isNaN","nice","baselineLine","defined","scenarioLine","confidenceArea","d3.area","y0","y1","d3.format","_component_BaseButton","$props","gRef","isReady","createSVG","updateDimensions","useD3","showConfidenceInterval","correctConfidenceInterval","prediction","predicted","predicted_value","confidence_lower","confidence_upper","originalLower","originalUpper","maxReasonableRange","minLower","halfRange","maxUpper","abs","chartDimensions","config","_b","_c","_d","predictions","historical","initChart","result","className","drawChart","allYears","correctedPredictions","area","predictionsWithConfidence","lastHistorical","connectionData","darkMode","corrected","uncertainty_percent","toFixed","label","dash","legendRow","toggleButton","ready","_normalizeStyle"],"mappings":"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"}